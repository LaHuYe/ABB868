
# 1 "Z:\正在研发\37-艾珀尔\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x改呼吸灯版本2\app_water_process.c"

# 26 "F:\softWare\important\SCMCU_IDE_V2.00.15\data\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);


# 13 "F:\softWare\important\SCMCU_IDE_V2.00.15\data\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 10 "F:\softWare\important\SCMCU_IDE_V2.00.15\data\include\SC8P171xE.h"
volatile unsigned char INDF @ 0x00;
volatile unsigned char TMR0 @ 0x01;
volatile unsigned char PCL @ 0x02;
volatile unsigned char STATUS @ 0x03;
volatile unsigned char FSR @ 0x04;
volatile unsigned char PORTA @ 0x05;
volatile unsigned char PORTB @ 0x06;
volatile unsigned char WPUA @ 0x07;
volatile unsigned char WPDA @ 0x08;
volatile unsigned char IOCA @ 0x09;
volatile unsigned char PCLATH @ 0x0A;
volatile unsigned char INTCON @ 0x0B;
volatile unsigned char PIR1 @ 0x0C;
volatile unsigned char PIR2 @ 0x0D;
volatile unsigned char PWMD2L @ 0x0E;
volatile unsigned char PWMD3L @ 0x0F;
volatile unsigned char PWMD4L @ 0x10;
volatile unsigned char TMR2 @ 0x11;
volatile unsigned char T2CON @ 0x12;
volatile unsigned char LCDCON0 @ 0x13;
volatile unsigned char LCDCON1 @ 0x14;
volatile unsigned char LCDCON @ 0x15;
volatile unsigned char PWMD0L @ 0x16;
volatile unsigned char PWMD1L @ 0x17;
volatile unsigned char PWMD01H @ 0x18;
volatile unsigned char PWMTL @ 0x19;
volatile unsigned char PWMTH @ 0x1A;
volatile unsigned char PWMCON @ 0x1B;
volatile unsigned char PWMD23H @ 0x1C;
volatile unsigned char PWM4TL @ 0x1D;
volatile unsigned char ADRESH @ 0x1E;
volatile unsigned char ADCON0 @ 0x1F;
volatile unsigned char OPTION_REG @ 0x81;
volatile unsigned char TRISA @ 0x85;
volatile unsigned char TRISB @ 0x86;
volatile unsigned char WPDB @ 0x87;
volatile unsigned char WDTCON @ 0x88;
volatile unsigned char PIE1 @ 0x8C;
volatile unsigned char PIE2 @ 0x8D;
volatile unsigned char PWMCON1 @ 0x8E;
volatile unsigned char OSCCON @ 0x8F;
volatile unsigned char LVDCON @ 0x91;
volatile unsigned char PR2 @ 0x92;
volatile unsigned char ANSEL @ 0x93;
volatile unsigned char ANSELH @ 0x94;
volatile unsigned char WPUB @ 0x95;
volatile unsigned char IOCB @ 0x96;
volatile unsigned char TABLE_SPH @ 0x97;
volatile unsigned char TABLE_SPL @ 0x98;
volatile unsigned char TABLE_DATAH @ 0x99;
volatile unsigned char ADRESL @ 0x9E;
volatile unsigned char ADCON1 @ 0x9F;



volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit Z @ ((unsigned)&STATUS*8)+2;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit C @ ((unsigned)&STATUS*8)+0;


volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA0 @ ((unsigned)&PORTA*8)+0;


volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB0 @ ((unsigned)&PORTB*8)+0;


volatile bit WPUA6 @ ((unsigned)&WPUA*8)+6;
volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;


volatile bit WPDA6 @ ((unsigned)&WPDA*8)+6;
volatile bit WPDA5 @ ((unsigned)&WPDA*8)+5;
volatile bit WPDA4 @ ((unsigned)&WPDA*8)+4;
volatile bit WPDA3 @ ((unsigned)&WPDA*8)+3;
volatile bit WPDA2 @ ((unsigned)&WPDA*8)+2;
volatile bit WPDA1 @ ((unsigned)&WPDA*8)+1;
volatile bit WPDA0 @ ((unsigned)&WPDA*8)+0;


volatile bit IOCA6 @ ((unsigned)&IOCA*8)+6;
volatile bit IOCA5 @ ((unsigned)&IOCA*8)+5;
volatile bit IOCA4 @ ((unsigned)&IOCA*8)+4;
volatile bit IOCA3 @ ((unsigned)&IOCA*8)+3;
volatile bit IOCA2 @ ((unsigned)&IOCA*8)+2;
volatile bit IOCA1 @ ((unsigned)&IOCA*8)+1;
volatile bit IOCA0 @ ((unsigned)&IOCA*8)+0;


volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit RBIF @ ((unsigned)&INTCON*8)+0;


volatile bit RAIF @ ((unsigned)&PIR1*8)+3;
volatile bit PWMIF @ ((unsigned)&PIR1*8)+2;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit ADIF @ ((unsigned)&PIR1*8)+0;


volatile bit LVDIF @ ((unsigned)&PIR2*8)+0;


volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;


volatile bit COM6EN @ ((unsigned)&LCDCON0*8)+6;
volatile bit COM5EN @ ((unsigned)&LCDCON0*8)+5;
volatile bit COM4EN @ ((unsigned)&LCDCON0*8)+4;
volatile bit COM3EN @ ((unsigned)&LCDCON0*8)+3;
volatile bit COM2EN @ ((unsigned)&LCDCON0*8)+2;
volatile bit COM1EN @ ((unsigned)&LCDCON0*8)+1;
volatile bit COM0EN @ ((unsigned)&LCDCON0*8)+0;


volatile bit COM14EN @ ((unsigned)&LCDCON1*8)+6;
volatile bit COM13EN @ ((unsigned)&LCDCON1*8)+5;
volatile bit COM12EN @ ((unsigned)&LCDCON1*8)+4;
volatile bit COM11EN @ ((unsigned)&LCDCON1*8)+3;
volatile bit COM9EN @ ((unsigned)&LCDCON1*8)+1;
volatile bit COM8EN @ ((unsigned)&LCDCON1*8)+0;


volatile bit LCDEN @ ((unsigned)&LCDCON*8)+7;
volatile bit LCD_ISLE1 @ ((unsigned)&LCDCON*8)+1;
volatile bit LCD_ISLE0 @ ((unsigned)&LCDCON*8)+0;


volatile bit PWMD19 @ ((unsigned)&PWMD01H*8)+3;
volatile bit PWMD18 @ ((unsigned)&PWMD01H*8)+2;
volatile bit PWMD09 @ ((unsigned)&PWMD01H*8)+1;
volatile bit PWMD08 @ ((unsigned)&PWMD01H*8)+0;


volatile bit CLKDIV2 @ ((unsigned)&PWMCON*8)+7;
volatile bit CLKDIV1 @ ((unsigned)&PWMCON*8)+6;
volatile bit CLKDIV0 @ ((unsigned)&PWMCON*8)+5;
volatile bit PWM1DIR @ ((unsigned)&PWMCON*8)+3;
volatile bit PWM0DIR @ ((unsigned)&PWMCON*8)+2;
volatile bit PWM1EN @ ((unsigned)&PWMCON*8)+1;
volatile bit PWM0EN @ ((unsigned)&PWMCON*8)+0;


volatile bit PWMD39 @ ((unsigned)&PWMD23H*8)+3;
volatile bit PWMD38 @ ((unsigned)&PWMD23H*8)+2;
volatile bit PWMD29 @ ((unsigned)&PWMD23H*8)+1;
volatile bit PWMD28 @ ((unsigned)&PWMD23H*8)+0;


volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit ADON @ ((unsigned)&ADCON0*8)+0;


volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;


volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;


volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;


volatile bit WPDB6 @ ((unsigned)&WPDB*8)+6;
volatile bit WPDB5 @ ((unsigned)&WPDB*8)+5;
volatile bit WPDB4 @ ((unsigned)&WPDB*8)+4;
volatile bit WPDB3 @ ((unsigned)&WPDB*8)+3;
volatile bit WPDB1 @ ((unsigned)&WPDB*8)+1;
volatile bit WPDB0 @ ((unsigned)&WPDB*8)+0;


volatile bit SWDTEN @ ((unsigned)&WDTCON*8)+0;


volatile bit RAIE @ ((unsigned)&PIE1*8)+3;
volatile bit PWMIE @ ((unsigned)&PIE1*8)+2;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit ADIE @ ((unsigned)&PIE1*8)+0;


volatile bit LVDIE @ ((unsigned)&PIE2*8)+0;


volatile bit PMW4DIR @ ((unsigned)&PWMCON1*8)+5;
volatile bit PWM3DIR @ ((unsigned)&PWMCON1*8)+4;
volatile bit PWM2DIR @ ((unsigned)&PWMCON1*8)+3;
volatile bit PWM4EN @ ((unsigned)&PWMCON1*8)+2;
volatile bit PWM3EN @ ((unsigned)&PWMCON1*8)+1;
volatile bit PWM2EN @ ((unsigned)&PWMCON1*8)+0;


volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;


volatile bit LVD_RES @ ((unsigned)&LVDCON*8)+7;
volatile bit LVD_SEL2 @ ((unsigned)&LVDCON*8)+3;
volatile bit LVD_SEL1 @ ((unsigned)&LVDCON*8)+2;
volatile bit LVD_SEL0 @ ((unsigned)&LVDCON*8)+1;
volatile bit LVDEN @ ((unsigned)&LVDCON*8)+0;


volatile bit ANS6 @ ((unsigned)&ANSEL*8)+6;
volatile bit ANS5 @ ((unsigned)&ANSEL*8)+5;
volatile bit ANS4 @ ((unsigned)&ANSEL*8)+4;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;


volatile bit ANS14 @ ((unsigned)&ANSELH*8)+6;
volatile bit ANS13 @ ((unsigned)&ANSELH*8)+5;
volatile bit ANS12 @ ((unsigned)&ANSELH*8)+4;
volatile bit ANS11 @ ((unsigned)&ANSELH*8)+3;
volatile bit ANS9 @ ((unsigned)&ANSELH*8)+1;
volatile bit ANS8 @ ((unsigned)&ANSELH*8)+0;


volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;


volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;


volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;
volatile bit TADSEL @ ((unsigned)&ADCON1*8)+3;
volatile bit LDOEN @ ((unsigned)&ADCON1*8)+2;
volatile bit LDOSEL @ ((unsigned)&ADCON1*8)+0;


# 27 "F:\softWare\important\SCMCU_IDE_V2.00.15\data\include\sc.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 76
extern unsigned int flash_read(unsigned short addr);


# 149
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 184
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;

# 5 "Z:\正在研发\37-艾珀尔\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x改呼吸灯版本2\app_key.h"
typedef enum
{
KEY_TYPE_IDLE = 0,
KEY_TYPE_DOWN,
KEY_TYPE_LONG,
KEY_TYPE_LONG_LONG,
KEY_TYPE_LONG_BIND,
KEY_TYPE_SHORT,
KEY_TYPE_LONG_RELEASE,
KEY_TYPE_LONG_LONG_RELEASE,
} key_type_t;


typedef enum
{
MODE_CHANGING,
POWER_OFF,
} key_states_t;

typedef struct
{
key_states_t state;
} key_state_t;

extern key_state_t key_state;


extern volatile unsigned int KeyPressCnt1;
extern volatile unsigned char KeyRelaxCnt1;

extern volatile unsigned int KeyPressCnt2;
extern volatile unsigned char KeyRelaxCnt2;


void app_process_key(void);

# 38 "Z:\正在研发\37-艾珀尔\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x改呼吸灯版本2\app_adc.h"
extern volatile unsigned char BatStates;
extern volatile unsigned char motor_lock_cnt;



unsigned int AdcResultChk(unsigned char adch,unsigned char adldo);
void app_adc_process();
void MotorAdcIChk(void);

extern volatile unsigned int adresultvdd;
extern volatile unsigned int adresultvdd_back;

# 11 "Z:\正在研发\37-艾珀尔\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x改呼吸灯版本2\app_charge.h"
typedef struct
{
unsigned char Charge : 1 ;
unsigned char FullCharge :1 ;
unsigned char ForceFullCharge : 1 ;
unsigned char flag_charge_force_full_24hour :1;
unsigned char Remind :1;
unsigned char flag_led_remind;
unsigned char flag_remind_delay_10s;
unsigned int remind_delay_10s_timer;
unsigned char low_bat_3V3;
unsigned char LowPower;
unsigned char LowLed;
unsigned char LowLed_cnt;
unsigned int ChargeCnt;
unsigned int DisChargeCnt;
unsigned int ChargeFullCnt;
unsigned int Old_to_Charge_cnt;
unsigned char low_led_blink_cnt;

} app_charge_t;

extern app_charge_t app_charge;
extern bit flag_discharge_once;




void app_process_charge(void);
void ChargePwmOut(unsigned char Duty);

# 20 "Z:\正在研发\37-艾珀尔\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x改呼吸灯版本2\app_motor.h"
typedef struct
{
unsigned char Period;

unsigned char DutyLow;

unsigned char DutyHigh;



unsigned char normal_duty_change_value;

unsigned char mid_duty_change_value;

unsigned char time;

unsigned char mid_duty;



} MOTOR_InitTypeDef;

typedef struct
{

unsigned int DutyLow;
unsigned int Period;
} app_motor_pwm_pram_t;
extern app_motor_pwm_pram_t app_motor_pwm_pram;

extern MOTOR_InitTypeDef MOTOR_InitStruct;

extern unsigned char DutyLow;
extern unsigned char DutyHigh;

void MotorLoop(void);
void Mode_control(void);
void app_process_motor_duty(void);

void app_process_set_mode_init(void);
void app_process_set_mode_next(void);

# 6 "Z:\正在研发\37-艾珀尔\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x改呼吸灯版本2\app_process.h"
extern bit flag_old_mode;

typedef enum
{
WORK_STATE_POWEROFF = 0,
WORK_STATE_WORKING,
WORK_STATE_CHARGING,



WORK_STATE_LOWBAT_LED,
WORK_STATE_OLD_MODE_RUN,
WORK_STATE_NULL
} work_state_t;

# 25
typedef void (*p_work_state_cb)(void);

typedef struct
{
work_state_t states;
p_work_state_cb cb;
} work_state_action_t;


typedef enum
{
WORK_MODE_IDEL = 0,
WORK_MODE_ONE,
WORK_MODE_TWO,
WORK_MODE_THREE,


} mode_t;

typedef struct
{
unsigned char mode;
unsigned char mode_out_put;
unsigned int work_mode_count;
unsigned char times;

} app_process_mode_t;




extern volatile work_state_t app_work_state;
extern app_process_mode_t work_mode;
extern unsigned char work_step;

# 72
void app_process_set_work_state(work_state_t states);

void app_process_power_off(void);
void app_process_work(void);
void app_process_go_to_sleep(void);
void turn_off(void);

# 5 "Z:\正在研发\37-艾珀尔\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x改呼吸灯版本2\app_water_process.h"
typedef enum
{
WATER_WORK_STATE_POWEROFF = 0,
WATER_WORK_STATE_WORKING,
WATER_WORK_STATE_CHARGING,



WATER_WORK_STATE_MODE_LED,
WATER_WORK_STATE_NULL
} water_work_state_t;

typedef enum
{
WATER_WORK_MODE_IDEL = 0,
WATER_WORK_MODE_ONE,
WATER_WORK_MODE_TWO,
WATER_WORK_MODE_THREE,
WATER_WORK_MODE_FOUR,
WATER_WORK_MODE_FIVE,
} water_mode_t;

typedef struct
{
unsigned char water_mode;
unsigned char water_mode_out_put;
unsigned int water_mode_count;
unsigned char times;

} app_process_water_mode_t;

extern volatile water_work_state_t water_work_state;
extern app_process_water_mode_t water_work_mode;

void app_process_set_water_state(water_work_state_t states);
void app_process_set_water_mode_init(void);
void app_process_set_water_mode_next(void);
void MotorWaterDrive(void);
void water_motor(void);
void app_water_process_work(void);
void water_turn_off();

# 12 "Z:\正在研发\37-艾珀尔\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x改呼吸灯版本2\app_led.h"
typedef enum
{
LED_STATE_OFF = 0,
LED_STATE_ON = !LED_STATE_OFF,
}led_state_t;

typedef enum
{
LED_INDEX_NULL = 0,
LED_INDEX_1 = (1 << (0)),
LED_INDEX_2 = (1 << (1)),
LED_INDEX_3 = (1 << (2)),
LED_INDEX_4 = (1 << (3)),
LED_INDEX_5 = (1 << (4)),
LED_INDEX_6 = (1 << (5)),
LED_INDEX_7 = (1 << (6)),
LED_INDEX_8 = (1 << (7)),
LED_INDEX_9 = (1 << (8)),
LED_INDEX_10 = (1 << (9)),
LED_INDEX_11 = (1 << (10)),
LED_INDEX_12 = (1 << (11)),
LED_INDEX_13 = (1 << (12)),
LED_INDEX_14 = (1 << (13)),
LED_INDEX_15 = (1 << (14)),
LED_INDEX_16 = (1 << (15)),
LED_INDEX_17 = (1 << (16)),
LED_INDEX_BRUSH_LOW = LED_INDEX_15 | LED_INDEX_16 | LED_INDEX_11,
LED_INDEX_BRUSH_MID = LED_INDEX_6 | LED_INDEX_7 | LED_INDEX_8,
LED_INDEX_BRUSH_HIGH = LED_INDEX_BRUSH_LOW | LED_INDEX_BRUSH_MID,
LED_INDEX_BRUSH_OFF = LED_INDEX_BRUSH_LOW | LED_INDEX_BRUSH_MID,
LED_INDEX_18 = (1 << (17)),
LED_INDEX_19 = (1 << (18)),
LED_INDEX_ALL = 0xff,
}led_index_t;

# 59
void app_led_mode_set();
void app_led_water_mode_set();

void set_led_state(led_index_t index,led_state_t state);
void set_led_dirct_state(led_index_t index);
void process_led_remind_low_power(void);
void led_charge_pwm(void);
void process_led(void);

# 84
extern unsigned int CntLedFlash;


void led_pwm();

# 5 "Z:\正在研发\37-艾珀尔\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x改呼吸灯版本2\app_timer.h"
typedef struct
{
unsigned int mode_select_time;
unsigned long work_updown_count;
unsigned int work_change_count;
unsigned int charge_to_oldmode_count;
} app_timer_t;

typedef enum
{
TIMING_3S = 300,
TIMING_5S = 500,
TIMING_8S = 800,
TIMING_10S = 1000,
TIMING_20S = 1000,
TIMING_15S = 1500,
TIMING_30S = 3000,
TIMING_120S = 12000,
} TIMING_t;

# 31
extern app_timer_t app_timer;
extern app_timer_t app_water_timer;
extern bit flag_save_old_mode;

void app_process_timing(void);
void charge_to_oldmode_timing();

void clear_count(void);
void timing_deint(void);
void update_work_timing(unsigned long count);
void update_change_updown_timing(unsigned int counts);

void work_chang_timing();
void oldmodeCountDownOff();

# 51 "Z:\正在研发\37-艾珀尔\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x改呼吸灯版本2\main.h"
extern volatile bit Flag_10ms;
extern unsigned char CntSleep;
extern volatile unsigned char CntTime200us;
void GotoSleep(void);

# 3 "Z:\正在研发\37-艾珀尔\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x改呼吸灯版本2\app_water_process.c"
unsigned char water_work_step;
unsigned char CntWaterDrive;
unsigned char MotorWaterDuty;

volatile water_work_state_t water_work_state = WATER_WORK_STATE_POWEROFF;
app_process_water_mode_t water_work_mode =
{
WATER_WORK_MODE_THREE,0,0,0
};
app_timer_t app_water_timer =
{
0
};

void app_process_set_water_state(water_work_state_t states)
{
water_work_state = states;
water_work_step = 0;
}

void water_motor()
{
if (water_work_mode.water_mode == WATER_WORK_MODE_ONE)
{

MotorWaterDuty=36;
}
if (water_work_mode.water_mode == WATER_WORK_MODE_TWO)
{

MotorWaterDuty=51;
}
if (water_work_mode.water_mode == WATER_WORK_MODE_THREE)
{

MotorWaterDuty=66;
}
if (water_work_mode.water_mode == WATER_WORK_MODE_FOUR)
{

MotorWaterDuty=81;
}
if (water_work_mode.water_mode == WATER_WORK_MODE_FIVE)
{

MotorWaterDuty=96;
}
water_work_mode.water_mode_out_put = water_work_mode.water_mode;
}

# 59
void app_process_set_water_mode_next(void)
{
water_work_mode.water_mode++;
if (water_work_mode.water_mode > WATER_WORK_MODE_FIVE)
{
water_work_mode.water_mode = WATER_WORK_MODE_ONE;
}

# 71
}

void MotorWaterDrive()
{
if(water_work_mode.water_mode_out_put == WATER_WORK_MODE_IDEL)
{
(RA5=0);
return;
}
CntWaterDrive++;
if(CntWaterDrive==1)
{
(RA5=1);
}
if(CntWaterDrive==MotorWaterDuty)
{
(RA5=0);
}
if(CntWaterDrive>99)
{
CntWaterDrive=0;
}
}

void app_process_water_working()
{
if (!water_work_step)
{
water_work_step++;
}
else
{
water_work_mode.water_mode_count++;
if (water_work_mode.water_mode_count == (100UL * (30)))
{
water_work_mode.water_mode_out_put = WORK_MODE_IDEL;
}
else if (water_work_mode.water_mode_count >= (100UL * (30)) + ((200) / 10))
{
water_work_mode.water_mode_count = 0;
water_work_mode.times++;
if(water_work_mode.times >= 4)
{
water_work_mode.times = 0;
if (app_charge.Remind)
{
app_charge.flag_remind_delay_10s = 1;
app_charge.remind_delay_10s_timer = 0;
}

app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
}
else
{
water_work_mode.water_mode_out_put = water_work_mode.water_mode;
}
}
}
}

void water_turn_off()
{
water_work_mode.water_mode_count = 0;
water_work_mode.times = 0;

water_work_mode.water_mode_out_put = WATER_WORK_MODE_IDEL;

set_led_state(LED_INDEX_8 | LED_INDEX_7 | LED_INDEX_6 | LED_INDEX_5 | LED_INDEX_4, LED_STATE_OFF);
}

void app_process_water_workoff()
{
water_turn_off();
}

static unsigned int water_mode_led_cnt;
void app_process_water_mdoe_led()
{
if (!water_work_step)
{
water_mode_led_cnt = (100UL * (10));
water_work_step++;
}
else
{
water_work_mode.water_mode_count++;
if (water_mode_led_cnt)
{
water_mode_led_cnt--;
if (!water_mode_led_cnt)
{

app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
}
}
}
}

void app_water_process_work()
{
switch (water_work_state)
{
case WATER_WORK_STATE_WORKING:
app_process_water_working();
break;
case WATER_WORK_STATE_POWEROFF:
app_process_water_workoff();
break;
case WATER_WORK_STATE_MODE_LED:
app_process_water_mdoe_led();
break;

default:
break;
}
}

