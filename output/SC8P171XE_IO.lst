

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 08 14:32:07 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1712E
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	swtext1,local,class=CONST,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	intentry,global,class=CODE,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	functab,global,class=ENTRY,delta=2
    67                           	psect	pa_nodes0,global,class=CODE,delta=2
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 1.45
    71                           ; Generated 16/11/2017 GMT
    72                           ; 
    73                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F887 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataBANK0
   106  0000                     __pidataBANK0:	
   107                           
   108                           	psect	nvBANK0
   109  006C                     __pnvBANK0:	
   110  006C                     _water_work_state:	
   111  006C                     	ds	1
   112  006D                     _app_work_state:	
   113  006D                     	ds	1
   114  001F                     _ADCON0	set	31
   115  001E                     _ADRESH	set	30
   116  001B                     _PWMCON	set	27
   117  001A                     _PWMTH	set	26
   118  0019                     _PWMTL	set	25
   119  0016                     _PWMD0L	set	22
   120  0012                     _T2CON	set	18
   121  000B                     _INTCON	set	11
   122  0009                     _IOCA	set	9
   123  0007                     _WPUA	set	7
   124  0006                     _PORTB	set	6
   125  0005                     _PORTA	set	5
   126  0001                     _TMR0	set	1
   127  00F8                     _ADON	set	248
   128  00F9                     _GODONE	set	249
   129  00D8                     _PWM0EN	set	216
   130  0061                     _TMR2IF	set	97
   131  0062                     _PWMIF	set	98
   132  0063                     _RAIF	set	99
   133  0058                     _RBIF	set	88
   134  005A                     _T0IF	set	90
   135  005B                     _RBIE	set	91
   136  005D                     _T0IE	set	93
   137  005E                     _PEIE	set	94
   138  005F                     _GIE	set	95
   139  0030                     _RB0	set	48
   140  0031                     _RB1	set	49
   141  0032                     _RB2	set	50
   142  0033                     _RB3	set	51
   143  0035                     _RB5	set	53
   144  0036                     _RB6	set	54
   145  0028                     _RA0	set	40
   146  0029                     _RA1	set	41
   147  002A                     _RA2	set	42
   148  002B                     _RA3	set	43
   149  002C                     _RA4	set	44
   150  002D                     _RA5	set	45
   151  002E                     _RA6	set	46
   152  009F                     _ADCON1	set	159
   153  009E                     _ADRESL	set	158
   154  0096                     _IOCB	set	150
   155  0095                     _WPUB	set	149
   156  0094                     _ANSELH	set	148
   157  0092                     _PR2	set	146
   158  008F                     _OSCCON	set	143
   159  0088                     _WDTCON	set	136
   160  0086                     _TRISB	set	134
   161  0085                     _TRISA	set	133
   162  0081                     _OPTION_REG	set	129
   163  0461                     _TMR2IE	set	1121
   164  0463                     _RAIE	set	1123
   165  0440                     _SWDTEN	set	1088
   166  0433                     _TRISB3	set	1075
   167                           
   168                           	psect	cinit
   169  000B                     start_initialization:	
   170                           ; #config settings
   171                           
   172  000B                     __initialization:	
   173                           
   174                           ;initializer for _water_work_mode
   175  000B  3003               	movlw	3
   176  000C  00E1               	movwf	__pdataBANK0& (0+127)
   177  000D  3002               	movlw	2
   178  000E  01E2               	clrf	(__pdataBANK0+1)& (0+127)
   179  000F  01E3               	clrf	(__pdataBANK0+2)& (0+127)
   180  0010  01E4               	clrf	(__pdataBANK0+3)& (0+127)
   181  0011  01E5               	clrf	(__pdataBANK0+4)& (0+127)
   182                           
   183                           ;initializer for _work_mode
   184  0012  00E6               	movwf	(__pdataBANK0+5)& (0+127)
   185  0013  3005               	movlw	5
   186  0014  01E7               	clrf	(__pdataBANK0+6)& (0+127)
   187  0015  01E8               	clrf	(__pdataBANK0+7)& (0+127)
   188  0016  01E9               	clrf	(__pdataBANK0+8)& (0+127)
   189  0017  01EA               	clrf	(__pdataBANK0+9)& (0+127)
   190                           
   191                           ;initializer for _BatStates
   192  0018  00EB               	movwf	(__pdataBANK0+10)& (0+127)
   193  0019  30A0               	movlw	low __pbssBANK1
   194                           
   195                           ; Clear objects allocated to BANK1
   196  001A  1383               	bcf	3,7	;select IRP bank0
   197  001B  0084               	movwf	4
   198  001C  30D7               	movlw	low (__pbssBANK1+55)
   199  001D  27BA               	fcall	clear_ram0
   200                           
   201                           ; Clear objects allocated to BANK0
   202  001E  3020               	movlw	low __pbssBANK0
   203  001F  0084               	movwf	4
   204  0020  3053               	movlw	low (__pbssBANK0+51)
   205  0021  27BA               	fcall	clear_ram0
   206                           
   207                           ; Clear objects allocated to BITCOMMON
   208  0022  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   209  0023                     end_of_initialization:	
   210                           ;End of C runtime variable initialization code
   211                           
   212  0023                     __end_of__initialization:	
   213  0023  0183               	clrf	3
   214  0024  2E7B               	ljmp	_main	;jump to C main() function
   215                           
   216                           	psect	bitbssCOMMON
   217  03D8                     __pbitbssCOMMON:	
   218  03D8                     _Flag_10ms:	
   219  03D8                     	ds	1
   220  03D9                     _Flag_1ms:	
   221  03D9                     	ds	1
   222  03DA                     _Flag_250us:	
   223  03DA                     	ds	1
   224  03DB                     _is_charge_pwm:	
   225  03DB                     	ds	1
   226  03DC                     _PWM_dir:	
   227  03DC                     	ds	1
   228  03DD                     _flag_discharge_once:	
   229  03DD                     	ds	1
   230  03DE                     _flag_charge_once:	
   231  03DE                     	ds	1
   232                           
   233                           	psect	bssBANK0
   234  0020                     __pbssBANK0:	
   235  0020                     _led_index:	
   236  0020                     	ds	4
   237  0024                     _water_mode_led_cnt:	
   238  0024                     	ds	2
   239  0026                     _motor_fix_cnt:	
   240  0026                     	ds	2
   241  0028                     _pwm_timer:	
   242  0028                     	ds	2
   243  002A                     _PWM_Cnt:	
   244  002A                     	ds	2
   245  002C                     _PWM_Duty:	
   246  002C                     	ds	2
   247  002E                     _CntLedFlash:	
   248  002E                     	ds	2
   249  0030                     _KeyPressCnt3:	
   250  0030                     	ds	2
   251  0032                     _KeyPressCnt2:	
   252  0032                     	ds	2
   253  0034                     _KeyPressCnt1:	
   254  0034                     	ds	2
   255  0036                     _adresult_chagrge_vdd:	
   256  0036                     	ds	2
   257  0038                     _adresultvdd_back:	
   258  0038                     	ds	2
   259  003A                     _adresultvdd:	
   260  003A                     	ds	2
   261  003C                     _MotorWaterDuty:	
   262  003C                     	ds	1
   263  003D                     _CntWaterDrive:	
   264  003D                     	ds	1
   265  003E                     _water_work_step:	
   266  003E                     	ds	1
   267  003F                     _dead_area_b2:	
   268  003F                     	ds	1
   269  0040                     _dead_area_b1:	
   270  0040                     	ds	1
   271  0041                     _low_b:	
   272  0041                     	ds	1
   273  0042                     _dead_area1:	
   274  0042                     	ds	1
   275  0043                     _low_a:	
   276  0043                     	ds	1
   277  0044                     _work_step:	
   278  0044                     	ds	1
   279  0045                     _CntSleep:	
   280  0045                     	ds	1
   281  0046                     _step:	
   282  0046                     	ds	1
   283  0047                     _KeyRelaxCnt3:	
   284  0047                     	ds	1
   285  0048                     _KeyRelaxCnt2:	
   286  0048                     	ds	1
   287  0049                     _KeyRelaxCnt1:	
   288  0049                     	ds	1
   289  004A                     _key_water_mode_type:	
   290  004A                     	ds	1
   291  004B                     _key_water_pwr_type:	
   292  004B                     	ds	1
   293  004C                     _key_brush_pwrtype:	
   294  004C                     	ds	1
   295  004D                     _charge_full_cnt:	
   296  004D                     	ds	1
   297  004E                     _bat_remind_delay:	
   298  004E                     	ds	1
   299  004F                     _motor_lock_cnt:	
   300  004F                     	ds	1
   301  0050                     _CntLowPowerOff:	
   302  0050                     	ds	1
   303  0051                     _BatAdcCnt:	
   304  0051                     	ds	1
   305  0052                     _adtimes:	
   306  0052                     	ds	1
   307                           
   308                           	psect	dataBANK0
   309  0061                     __pdataBANK0:	
   310  0061                     _water_work_mode:	
   311  0061                     	ds	5
   312  0066                     _work_mode:	
   313  0066                     	ds	5
   314  006B                     _BatStates:	
   315  006B                     	ds	1
   316                           
   317                           	psect	bssBANK1
   318  00A0                     __pbssBANK1:	
   319  00A0                     _app_charge:	
   320  00A0                     	ds	18
   321  00B2                     _app_timer:	
   322  00B2                     	ds	10
   323  00BC                     _MOTOR_InitStruct:	
   324  00BC                     	ds	7
   325  00C3                     _charge_force_full_cnt:	
   326  00C3                     	ds	4
   327  00C7                     _adsum:	
   328  00C7                     	ds	4
   329  00CB                     _Cnt1ms:	
   330  00CB                     	ds	2
   331  00CD                     _Cnt10ms:	
   332  00CD                     	ds	2
   333  00CF                     _adresultmotor:	
   334  00CF                     	ds	2
   335  00D1                     _admax:	
   336  00D1                     	ds	2
   337  00D3                     _admin:	
   338  00D3                     	ds	2
   339  00D5                     _adresult:	
   340  00D5                     	ds	2
   341                           
   342                           	psect	clrtext
   343  07BA                     clear_ram0:	
   344                           ;	Called with FSR containing the base address, and
   345                           ;	W with the last address+1
   346                           
   347  07BA  0064               	clrwdt	;clear the watchdog before getting into this loop
   348  07BB                     clrloop0:	
   349  07BB  0180               	clrf	0	;clear RAM location pointed to by FSR
   350  07BC  0A84               	incf	4,f	;increment pointer
   351  07BD  0604               	xorwf	4,w	;XOR with final address
   352  07BE  1903               	btfsc	3,2	;have we reached the end yet?
   353  07BF  3400               	retlw	0	;all done for this memory range, return
   354  07C0  0604               	xorwf	4,w	;XOR again to restore value
   355  07C1  2FBB               	goto	clrloop0	;do the next byte
   356                           
   357                           	psect	cstackCOMMON
   358  0070                     __pcstackCOMMON:	
   359  0070                     ?_app_process_set_work_state:	
   360  0070                     ?_app_process_set_water_state:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_app_process_set_mode_init:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_app_process_set_mode_next:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_app_led_water_mode_set:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_water_motor:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_app_process_set_water_mode_next:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_work_chang_timing:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_GotoSleep:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_app_water_process_work:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_Mode_control:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ??_Mode_control:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_MotorWaterDrive:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ??_MotorWaterDrive:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_app_process_motor_duty:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_app_adc_bat_voltage_check:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_app_adc_process:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_ChargePwmOut:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_Charge_Check:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?_app_process_charge:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_key_brush_pwr_check:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_key_water_pwr_check:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_key_water_mode_check:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_charge_or_lowBat_check:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ?_handle_key_pwr:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_handle_key_water:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?_app_process_key:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?_led_charge_pwm:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ?_app_led_mode_set:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?_process_led_remind_low_power:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_process_led:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     ??_process_led:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     ?_app_process_working:	
   454                           ; 1 bytes @ 0x0
   455                           
   456  0070                     ?_app_process_power_off:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  0070                     ?_app_process_go_to_sleep:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0070                     ?_app_process_charing:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0070                     ?_app_process_work:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0070                     ?_PortInit:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0070                     ?_Timer0Cofng:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ?_Timer2Config:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_AdcConfig:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ?_PwmConfig:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?_main:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ?_Timer2_Isr:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?_app_process_water_working:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ?_water_turn_off:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?_app_process_water_workoff:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?_app_process_water_mdoe_led:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?i1_set_led_state:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0070                     AdcOneChk@adch:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     i1set_led_state@index:	
   508                           ; 1 bytes @ 0x0
   509                           
   510                           
   511                           ; 2 bytes @ 0x0
   512  0070                     	ds	2
   513  0072                     i1set_led_state@state:	
   514                           
   515                           ; 1 bytes @ 0x2
   516  0072                     	ds	1
   517  0073                     ??i1_set_led_state:	
   518                           
   519                           ; 1 bytes @ 0x3
   520  0073                     	ds	6
   521  0079                     ??_led_charge_pwm:	
   522  0079                     ??_Timer2_Isr:	
   523                           ; 1 bytes @ 0x9
   524                           
   525                           
   526                           ; 1 bytes @ 0x9
   527  0079                     	ds	2
   528                           
   529                           	psect	cstackBANK0
   530  0053                     __pcstackBANK0:	
   531  0053                     ??_app_process_set_work_state:	
   532  0053                     ??_app_process_set_water_state:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0053                     ?_set_led_state:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0053                     ??_water_motor:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0053                     ??_app_process_set_water_mode_next:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0053                     ?_set_led_dirct_state:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  0053                     ??_work_chang_timing:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0053                     ??_app_process_motor_duty:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0053                     ??_ChargePwmOut:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0053                     ??_key_brush_pwr_check:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0053                     ??_key_water_pwr_check:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0053                     ??_key_water_mode_check:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0053                     ??_charge_or_lowBat_check:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0053                     ??_PortInit:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0053                     ??_Timer0Cofng:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0053                     ??_Timer2Config:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0053                     ??_AdcConfig:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0053                     ??_PwmConfig:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0053                     ?_AdcOneChk:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0053                     AdcOneChk@adldo:	
   587                           ; 2 bytes @ 0x0
   588                           
   589  0053                     ChargePwmOut@Duty:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0053                     app_process_set_work_state@states:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0053                     app_process_set_water_state@states:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0053                     set_led_state@index:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0053                     set_led_dirct_state@index:	
   602                           ; 2 bytes @ 0x0
   603                           
   604                           
   605                           ; 2 bytes @ 0x0
   606  0053                     	ds	1
   607  0054                     ??_GotoSleep:	
   608  0054                     ??_app_process_working:	
   609                           ; 1 bytes @ 0x1
   610                           
   611  0054                     ??_app_process_go_to_sleep:	
   612                           ; 1 bytes @ 0x1
   613                           
   614  0054                     ??_app_process_water_working:	
   615                           ; 1 bytes @ 0x1
   616                           
   617  0054                     ??_app_process_water_mdoe_led:	
   618                           ; 1 bytes @ 0x1
   619                           
   620                           
   621                           ; 1 bytes @ 0x1
   622  0054                     	ds	1
   623  0055                     ??_set_led_dirct_state:	
   624  0055                     ??_AdcOneChk:	
   625                           ; 1 bytes @ 0x2
   626                           
   627  0055                     set_led_state@state:	
   628                           ; 1 bytes @ 0x2
   629                           
   630                           
   631                           ; 1 bytes @ 0x2
   632  0055                     	ds	1
   633  0056                     ??_set_led_state:	
   634  0056                     AdcOneChk@i:	
   635                           ; 1 bytes @ 0x3
   636                           
   637                           
   638                           ; 1 bytes @ 0x3
   639  0056                     	ds	1
   640  0057                     AdcOneChk@ad_result:	
   641                           
   642                           ; 2 bytes @ 0x4
   643  0057                     	ds	2
   644  0059                     ?_AdcResultChk:	
   645  0059                     AdcResultChk@adldo:	
   646                           ; 2 bytes @ 0x6
   647                           
   648                           
   649                           ; 1 bytes @ 0x6
   650  0059                     	ds	3
   651  005C                     ??_app_process_set_mode_init:	
   652  005C                     ??_app_process_set_mode_next:	
   653                           ; 1 bytes @ 0x9
   654                           
   655  005C                     ??_app_led_water_mode_set:	
   656                           ; 1 bytes @ 0x9
   657                           
   658  005C                     ??_app_water_process_work:	
   659                           ; 1 bytes @ 0x9
   660                           
   661  005C                     ??_AdcResultChk:	
   662                           ; 1 bytes @ 0x9
   663                           
   664  005C                     ??_handle_key_pwr:	
   665                           ; 1 bytes @ 0x9
   666                           
   667  005C                     ??_handle_key_water:	
   668                           ; 1 bytes @ 0x9
   669                           
   670  005C                     ??_app_process_key:	
   671                           ; 1 bytes @ 0x9
   672                           
   673  005C                     ??_app_led_mode_set:	
   674                           ; 1 bytes @ 0x9
   675                           
   676  005C                     ??_process_led_remind_low_power:	
   677                           ; 1 bytes @ 0x9
   678                           
   679  005C                     ??_app_process_power_off:	
   680                           ; 1 bytes @ 0x9
   681                           
   682  005C                     ??_app_process_charing:	
   683                           ; 1 bytes @ 0x9
   684                           
   685  005C                     ??_app_process_work:	
   686                           ; 1 bytes @ 0x9
   687                           
   688  005C                     ??_water_turn_off:	
   689                           ; 1 bytes @ 0x9
   690                           
   691  005C                     ??_app_process_water_workoff:	
   692                           ; 1 bytes @ 0x9
   693                           
   694  005C                     AdcResultChk@adch:	
   695                           ; 1 bytes @ 0x9
   696                           
   697                           
   698                           ; 1 bytes @ 0x9
   699  005C                     	ds	1
   700  005D                     AdcResultChk@i:	
   701                           
   702                           ; 1 bytes @ 0xA
   703  005D                     	ds	1
   704  005E                     AdcResultChk@ad_value:	
   705                           
   706                           ; 2 bytes @ 0xB
   707  005E                     	ds	2
   708  0060                     ??_app_adc_bat_voltage_check:	
   709  0060                     ??_Charge_Check:	
   710                           ; 1 bytes @ 0xD
   711                           
   712                           
   713                           ; 1 bytes @ 0xD
   714  0060                     	ds	1
   715  0061                     ??_app_adc_process:	
   716  0061                     ??_app_process_charge:	
   717                           ; 1 bytes @ 0xE
   718                           
   719  0061                     ??_main:	
   720                           ; 1 bytes @ 0xE
   721                           
   722                           
   723                           	psect	maintext
   724  067B                     __pmaintext:	
   725                           ; 1 bytes @ 0xE
   726 ;;
   727 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   728 ;;
   729 ;; *************** function _main *****************
   730 ;; Defined at:
   731 ;;		line 85 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\main.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;		None
   734 ;; Auto vars:     Size  Location     Type
   735 ;;		None
   736 ;; Return value:  Size  Location     Type
   737 ;;                  1    wreg      void 
   738 ;; Registers used:
   739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   740 ;; Tracked objects:
   741 ;;		On entry : B00/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMMON   BANK0   BANK1
   745 ;;      Params:         0       0       0
   746 ;;      Locals:         0       0       0
   747 ;;      Temps:          0       0       0
   748 ;;      Totals:         0       0       0
   749 ;;Total ram usage:        0 bytes
   750 ;; Hardware stack levels required when called:    8
   751 ;; This function calls:
   752 ;;		_AdcConfig
   753 ;;		_PortInit
   754 ;;		_PwmConfig
   755 ;;		_Timer0Cofng
   756 ;;		_Timer2Config
   757 ;;		_app_adc_process
   758 ;;		_app_process_charge
   759 ;;		_app_process_go_to_sleep
   760 ;;		_app_process_key
   761 ;;		_app_process_set_water_state
   762 ;;		_app_process_set_work_state
   763 ;;		_app_process_work
   764 ;;		_app_water_process_work
   765 ;;		_process_led_remind_low_power
   766 ;; This function is called by:
   767 ;;		Startup code after reset
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           
   772                           ;psect for function _main
   773  067B                     _main:	
   774                           
   775                           ;incstack = 0
   776                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   777  067B  0000               	nop	;# 
   778  067C  0064               	clrwdt	;# 
   779                           
   780                           ;main.c: 89: OSCCON = 0X70;
   781  067D  3070               	movlw	112
   782  067E  1683               	bsf	3,5	;RP0=1, select bank1
   783  067F  008F               	movwf	15	;volatile
   784                           
   785                           ;main.c: 91: PortInit();
   786  0680  273A               	fcall	_PortInit
   787                           
   788                           ;main.c: 92: Timer0Cofng();
   789  0681  27D1               	fcall	_Timer0Cofng
   790                           
   791                           ;main.c: 93: Timer2Config();
   792  0682  279D               	fcall	_Timer2Config
   793                           
   794                           ;main.c: 94: AdcConfig();
   795  0683  27E5               	fcall	_AdcConfig
   796                           
   797                           ;main.c: 95: PwmConfig();
   798  0684  27D8               	fcall	_PwmConfig
   799  0685  0064               	clrwdt	;# 
   800                           
   801                           ;main.c: 98: INTCON |= 0XC0;
   802  0686  30C0               	movlw	192
   803  0687  048B               	iorwf	11,f	;volatile
   804                           
   805                           ;main.c: 99: SWDTEN = 1;
   806  0688  1683               	bsf	3,5	;RP0=1, select bank1
   807  0689  1408               	bsf	8,0	;volatile
   808                           
   809                           ;main.c: 101: app_process_set_work_state(WORK_STATE_POWEROFF);
   810  068A  3000               	movlw	0
   811  068B  27EB               	fcall	_app_process_set_work_state
   812                           
   813                           ;main.c: 102: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
   814  068C  3000               	movlw	0
   815  068D  27F0               	fcall	_app_process_set_water_state
   816  068E                     l3789:	
   817                           ;main.c: 118: while (1)
   818                           
   819  068E  0064               	clrwdt	;# 
   820                           
   821                           ;main.c: 122: if (Flag_10ms)
   822  068F  1C7B               	btfss	_Flag_10ms/(0+8),_Flag_10ms& (0+7)	;volatile
   823  0690  2E8E               	goto	l3789
   824                           
   825                           ;main.c: 123: {
   826                           ;main.c: 124: Flag_10ms = 0;
   827  0691  107B               	bcf	_Flag_10ms/(0+8),_Flag_10ms& (0+7)	;volatile
   828                           
   829                           ;main.c: 125: app_adc_process();
   830  0692  27FB               	fcall	_app_adc_process
   831                           
   832                           ;main.c: 126: app_process_charge();
   833  0693  27FA               	fcall	_app_process_charge
   834                           
   835                           ;main.c: 128: app_process_key();
   836  0694  27DF               	fcall	_app_process_key
   837                           
   838                           ;main.c: 129: app_process_work();
   839  0695  2786               	fcall	_app_process_work
   840                           
   841                           ;main.c: 130: app_water_process_work();
   842  0696  275B               	fcall	_app_water_process_work
   843                           
   844                           ;main.c: 132: app_process_go_to_sleep();
   845  0697  2729               	fcall	_app_process_go_to_sleep
   846                           
   847                           ;main.c: 133: process_led_remind_low_power();
   848  0698  21C3               	fcall	_process_led_remind_low_power
   849  0699  2E8E               	goto	l3789
   850  069A                     __end_of_main:	
   851                           
   852                           	psect	text1
   853  01C3                     __ptext1:	
   854 ;; *************** function _process_led_remind_low_power *****************
   855 ;; Defined at:
   856 ;;		line 194 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_led.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;		None
   859 ;; Auto vars:     Size  Location     Type
   860 ;;		None
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, status,2, status,0, pclath, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMMON   BANK0   BANK1
   870 ;;      Params:         0       0       0
   871 ;;      Locals:         0       0       0
   872 ;;      Temps:          0       0       0
   873 ;;      Totals:         0       0       0
   874 ;;Total ram usage:        0 bytes
   875 ;; Hardware stack levels used:    1
   876 ;; Hardware stack levels required when called:    4
   877 ;; This function calls:
   878 ;;		_app_process_set_water_state
   879 ;;		_app_process_set_work_state
   880 ;;		_set_led_dirct_state
   881 ;;		_set_led_state
   882 ;; This function is called by:
   883 ;;		_main
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           
   888                           ;psect for function _process_led_remind_low_power
   889  01C3                     _process_led_remind_low_power:	
   890                           
   891                           ;app_led.c: 196: if (app_charge.LowPower)
   892                           
   893                           ;incstack = 0
   894                           ; Regs used in _process_led_remind_low_power: [wreg+status,2+status,0+pclath+cstack]
   895  01C3  1683               	bsf	3,5	;RP0=1, select bank1
   896  01C4  0826               	movf	(_app_charge^(0+128)+6),w
   897  01C5  1903               	btfsc	3,2
   898  01C6  29ED               	goto	l2216
   899                           
   900                           ;app_led.c: 197: {
   901                           ;app_led.c: 198: if (app_charge.LowLed)
   902  01C7  0827               	movf	(_app_charge^(0+128)+7),w
   903  01C8  1903               	btfsc	3,2
   904  01C9  0008               	return
   905  01CA  3002               	movlw	2
   906                           
   907                           ;app_led.c: 199: {
   908                           ;app_led.c: 200: app_charge.LowLed_cnt++;
   909  01CB  0AA8               	incf	(_app_charge^(0+128)+8),f
   910                           
   911                           ;app_led.c: 201: if (app_charge.LowLed_cnt <= 1)
   912  01CC  0228               	subwf	(_app_charge^(0+128)+8),w
   913  01CD  1803               	skipnc
   914  01CE  29DA               	goto	l6996
   915                           
   916                           ;app_led.c: 202: {
   917                           ;app_led.c: 203: app_process_set_work_state(WORK_STATE_POWEROFF);
   918  01CF  3000               	movlw	0
   919  01D0  27EB               	fcall	_app_process_set_work_state
   920                           
   921                           ;app_led.c: 204: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
   922  01D1  3000               	movlw	0
   923  01D2  27F0               	fcall	_app_process_set_water_state
   924                           
   925                           ;app_led.c: 205: app_charge.low_led_blink_cnt = 5;
   926  01D3  3005               	movlw	5
   927  01D4  1683               	bsf	3,5	;RP0=1, select bank1
   928  01D5  00B1               	movwf	(_app_charge^(0+128)+17)
   929                           
   930                           ;app_led.c: 206: set_led_dirct_state(LED_INDEX_NULL);
   931  01D6  1283               	bcf	3,5	;RP0=0, select bank0
   932  01D7  01D3               	clrf	set_led_dirct_state@index
   933  01D8  01D4               	clrf	set_led_dirct_state@index+1
   934  01D9  2FCA               	ljmp	l6764
   935  01DA                     l6996:	
   936                           ;app_led.c: 207: }
   937                           
   938                           
   939                           ;app_led.c: 208: else if (app_charge.LowLed_cnt < 25)
   940  01DA  3019               	movlw	25
   941  01DB  0228               	subwf	(_app_charge^(0+128)+8),w
   942  01DC  1803               	skipnc
   943  01DD  29E1               	goto	l7000
   944  01DE                     l6998:	
   945                           
   946                           ;app_led.c: 209: {
   947                           ;app_led.c: 210: set_led_state(LED_INDEX_10, LED_STATE_ON);
   948  01DE  222C               	fcall	PL6	;call to abstracted procedure
   949  01DF  0AD5               	incf	set_led_state@state,f
   950  01E0  2E26               	ljmp	l6232
   951  01E1                     l7000:	
   952                           ;app_led.c: 211: }
   953                           
   954                           
   955                           ;app_led.c: 212: else if (app_charge.LowLed_cnt < 50)
   956  01E1  3032               	movlw	50
   957  01E2  0228               	subwf	(_app_charge^(0+128)+8),w
   958  01E3  1803               	skipnc
   959  01E4  29E7               	goto	l7004
   960  01E5                     l7002:	
   961                           
   962                           ;app_led.c: 213: {
   963                           ;app_led.c: 214: set_led_state(LED_INDEX_10, LED_STATE_OFF);
   964  01E5  222C               	fcall	PL6	;call to abstracted procedure
   965  01E6  2E26               	ljmp	l6232
   966  01E7                     l7004:	
   967                           ;app_led.c: 215: }
   968                           
   969                           
   970                           ;app_led.c: 216: else
   971                           ;app_led.c: 217: {
   972                           ;app_led.c: 218: app_charge.low_led_blink_cnt--;
   973  01E7  03B1               	decf	(_app_charge^(0+128)+17),f
   974                           
   975                           ;app_led.c: 219: if (!app_charge.low_led_blink_cnt)
   976  01E8  1903               	btfsc	3,2
   977                           
   978                           ;app_led.c: 220: {
   979                           ;app_led.c: 221: app_charge.LowLed = 0;
   980  01E9  01A7               	clrf	(_app_charge^(0+128)+7)
   981                           
   982                           ;app_led.c: 222: }
   983                           ;app_led.c: 223: app_charge.LowLed_cnt = 2;
   984  01EA  3002               	movlw	2
   985  01EB  00A8               	movwf	(_app_charge^(0+128)+8)
   986  01EC  0008               	return
   987  01ED                     l2216:	
   988                           
   989                           ;app_led.c: 227: else if (app_charge.Remind)
   990  01ED  1E20               	btfss	_app_charge^(0+128),4
   991  01EE  2A28               	goto	l7042
   992                           
   993                           ;app_led.c: 228: {
   994                           ;app_led.c: 229: if (app_work_state == WORK_STATE_WORKING || water_work_state == WATER_W
      +                          ORK_STATE_WORKING || app_charge.flag_remind_delay_10s)
   995  01EF  1283               	bcf	3,5	;RP0=0, select bank0
   996  01F0  036D               	decf	_app_work_state,w	;volatile
   997  01F1  1903               	btfsc	3,2
   998  01F2  29FA               	goto	l7018
   999  01F3  036C               	decf	_water_work_state,w	;volatile
  1000  01F4  1903               	btfsc	3,2
  1001  01F5  29FA               	goto	l7018
  1002  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  1003  01F7  0822               	movf	(_app_charge^(0+128)+2),w
  1004  01F8  1903               	btfsc	3,2
  1005  01F9  0008               	return
  1006  01FA                     l7018:	
  1007                           
  1008                           ;app_led.c: 230: {
  1009                           ;app_led.c: 231: CntLedFlash++;
  1010  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1011  01FB  0AAE               	incf	_CntLedFlash,f
  1012  01FC  1903               	skipnz
  1013  01FD  0AAF               	incf	_CntLedFlash+1,f
  1014                           
  1015                           ;app_led.c: 232: if (CntLedFlash <= ((500) / 10))
  1016  01FE  3000               	movlw	0
  1017  01FF  022F               	subwf	_CntLedFlash+1,w
  1018  0200  3033               	movlw	51
  1019  0201  1903               	skipnz
  1020  0202  022E               	subwf	_CntLedFlash,w
  1021  0203  1C03               	btfss	3,0
  1022  0204  29DE               	goto	l6998
  1023                           
  1024                           ;app_led.c: 236: else if (CntLedFlash <= ((1000) / 10))
  1025  0205  3000               	movlw	0
  1026  0206  022F               	subwf	_CntLedFlash+1,w
  1027  0207  3065               	movlw	101
  1028  0208  1903               	skipnz
  1029  0209  022E               	subwf	_CntLedFlash,w
  1030  020A  1C03               	btfss	3,0
  1031  020B  29E5               	goto	l7002
  1032                           
  1033                           ;app_led.c: 240: else
  1034                           ;app_led.c: 241: {
  1035                           ;app_led.c: 242: CntLedFlash = 0;
  1036  020C  01AE               	clrf	_CntLedFlash
  1037  020D  01AF               	clrf	_CntLedFlash+1
  1038                           
  1039                           ;app_led.c: 243: if (app_charge.flag_remind_delay_10s)
  1040  020E  1683               	bsf	3,5	;RP0=1, select bank1
  1041  020F  0822               	movf	(_app_charge^(0+128)+2),w
  1042  0210  1903               	btfsc	3,2
  1043  0211  0008               	return
  1044                           
  1045                           ;app_led.c: 244: {
  1046                           ;app_led.c: 246: if (++app_charge.remind_delay_10s_timer >= 10)
  1047  0212  0AA3               	incf	(_app_charge^(0+128)+3),f
  1048  0213  1903               	skipnz
  1049  0214  0AA4               	incf	((_app_charge+1)^(0+128)+3),f
  1050  0215  3000               	movlw	0
  1051  0216  0224               	subwf	((_app_charge+1)^(0+128)+3),w
  1052  0217  300A               	movlw	10
  1053  0218  1903               	skipnz
  1054  0219  0223               	subwf	(_app_charge^(0+128)+3),w
  1055  021A  1C03               	skipc
  1056  021B  0008               	return
  1057  021C  3002               	movlw	2
  1058                           
  1059                           ;app_led.c: 247: {
  1060                           ;app_led.c: 248: app_charge.flag_remind_delay_10s = 0;
  1061  021D  01A2               	clrf	(_app_charge^(0+128)+2)
  1062                           
  1063                           ;app_led.c: 250: set_led_state(LED_INDEX_10, LED_STATE_OFF);
  1064  021E  2134               	fcall	PL12	;call to abstracted procedure
  1065  021F  2626               	fcall	_set_led_state
  1066                           
  1067                           ;app_led.c: 251: if (water_work_state != WATER_WORK_STATE_MODE_LED)
  1068  0220  3003               	movlw	3
  1069  0221  066C               	xorwf	_water_work_state,w	;volatile
  1070  0222  1903               	btfsc	3,2
  1071  0223  0008               	return
  1072                           
  1073                           ;app_led.c: 252: {
  1074                           ;app_led.c: 253: app_process_set_work_state(WORK_STATE_POWEROFF);
  1075  0224  3000               	movlw	0
  1076  0225  27EB               	fcall	_app_process_set_work_state
  1077                           
  1078                           ;app_led.c: 254: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
  1079  0226  3000               	movlw	0
  1080  0227  2FF0               	ljmp	_app_process_set_water_state
  1081  0228                     l7042:	
  1082                           
  1083                           ;app_led.c: 263: else
  1084                           ;app_led.c: 264: {
  1085                           ;app_led.c: 265: CntLedFlash = 0;
  1086  0228  1283               	bcf	3,5	;RP0=0, select bank0
  1087  0229  01AE               	clrf	_CntLedFlash
  1088  022A  01AF               	clrf	_CntLedFlash+1
  1089  022B  0008               	return
  1090  022C                     __end_of_process_led_remind_low_power:	
  1091  022C                     PL6:	
  1092  022C  3002               	movlw	2
  1093  022D  1283               	bcf	3,5	;RP0=0, select bank0
  1094  022E  01D3               	clrf	set_led_state@index
  1095  022F  00D4               	movwf	set_led_state@index+1
  1096  0230  01D5               	clrf	set_led_state@state
  1097  0231  0008               	return
  1098  0232                     __end_ofPL6:	
  1099                           
  1100                           	psect	text2
  1101  07CA                     __ptext2:	
  1102 ;; *************** function _set_led_dirct_state *****************
  1103 ;; Defined at:
  1104 ;;		line 281 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_led.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;  index           2    0[BANK0 ] enum E591
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;		None
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      void 
  1111 ;; Registers used:
  1112 ;;		wreg
  1113 ;; Tracked objects:
  1114 ;;		On entry : 100/0
  1115 ;;		On exit  : 100/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMMON   BANK0   BANK1
  1118 ;;      Params:         0       2       0
  1119 ;;      Locals:         0       0       0
  1120 ;;      Temps:          0       0       0
  1121 ;;      Totals:         0       2       0
  1122 ;;Total ram usage:        2 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; Hardware stack levels required when called:    3
  1125 ;; This function calls:
  1126 ;;		Nothing
  1127 ;; This function is called by:
  1128 ;;		_process_led_remind_low_power
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           
  1133                           ;psect for function _set_led_dirct_state
  1134  07CA                     _set_led_dirct_state:	
  1135  07CA                     l6764:	
  1136                           ;incstack = 0
  1137                           ; Regs used in _set_led_dirct_state: [wreg]
  1138                           
  1139                           
  1140                           ;app_led.c: 283: led_index = index;
  1141  07CA  0853               	movf	set_led_dirct_state@index,w
  1142  07CB  00A0               	movwf	_led_index
  1143  07CC  0854               	movf	set_led_dirct_state@index+1,w
  1144  07CD  00A1               	movwf	_led_index+1
  1145  07CE  01A2               	clrf	_led_index+2
  1146  07CF  01A3               	clrf	_led_index+3
  1147  07D0  0008               	return
  1148  07D1                     __end_of_set_led_dirct_state:	
  1149                           
  1150                           	psect	text3
  1151  075B                     __ptext3:	
  1152 ;; *************** function _app_water_process_work *****************
  1153 ;; Defined at:
  1154 ;;		line 169 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_water_process
      +.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 100/0
  1165 ;;		On exit  : 100/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMMON   BANK0   BANK1
  1168 ;;      Params:         0       0       0
  1169 ;;      Locals:         0       0       0
  1170 ;;      Temps:          0       0       0
  1171 ;;      Totals:         0       0       0
  1172 ;;Total ram usage:        0 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    6
  1175 ;; This function calls:
  1176 ;;		_app_process_water_mdoe_led
  1177 ;;		_app_process_water_working
  1178 ;;		_app_process_water_workoff
  1179 ;; This function is called by:
  1180 ;;		_main
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           
  1185                           ;psect for function _app_water_process_work
  1186  075B                     _app_water_process_work:	
  1187                           
  1188                           ;app_water_process.c: 181: break;
  1189                           
  1190                           ;app_water_process.c: 171: switch (water_work_state)
  1191                           
  1192                           ;incstack = 0
  1193                           ; Regs used in _app_water_process_work: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1194  075B  086C               	movf	_water_work_state,w	;volatile
  1195                           
  1196                           ; Switch size 1, requested type "space"
  1197                           ; Number of cases is 3, Range of values is 0 to 3
  1198                           ; switch strategies available:
  1199                           ; Name         Instructions Cycles
  1200                           ; direct_byte           10     6 (fixed)
  1201                           ; simple_byte           10     6 (average)
  1202                           ; jumptable            260     6 (fixed)
  1203                           ;	Chosen strategy is direct_byte
  1204  075C  0084               	movwf	4
  1205  075D  3004               	movlw	4
  1206  075E  0204               	subwf	4,w
  1207  075F  1803               	skipnc
  1208  0760  0008               	return
  1209  0761  3007               	movlw	high S7298
  1210  0762  008A               	movwf	10
  1211  0763  30F5               	movlw	low S7298
  1212  0764  0704               	addwf	4,w
  1213  0765  0082               	movwf	2
  1214  0766                     l4858:	
  1215  0766  0008               	return
  1216  0767                     l7138:	
  1217                           
  1218                           ;app_water_process.c: 174: app_process_water_working();
  1219  0767  2E52               	ljmp	l6866
  1220  0768                     l7140:	
  1221                           ;app_water_process.c: 175: break;
  1222                           
  1223                           
  1224                           ;app_water_process.c: 177: app_process_water_workoff();
  1225  0768  2FA8               	ljmp	l6396
  1226  0769                     l7142:	
  1227                           ;app_water_process.c: 178: break;
  1228                           
  1229                           
  1230                           ;app_water_process.c: 180: app_process_water_mdoe_led();
  1231  0769  2EB9               	ljmp	l6898
  1232  076A                     __end_of_app_water_process_work:	
  1233                           
  1234                           	psect	swtext1
  1235  07F5                     __pswtext1:	
  1236  07F5                     S7298:	
  1237  07F5  2F68               	ljmp	l7140
  1238  07F6  2F67               	ljmp	l7138
  1239  07F7  2F66               	ljmp	l4858
  1240  07F8  2F69               	ljmp	l7142
  1241                           
  1242                           	psect	text4
  1243  07F9                     __ptext4:	
  1244 ;; *************** function _app_process_water_workoff *****************
  1245 ;; Defined at:
  1246 ;;		line 141 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_water_process
      +.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;		None
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;		None
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  1    wreg      void 
  1253 ;; Registers used:
  1254 ;;		wreg, status,2, status,0, pclath, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 100/0
  1257 ;;		On exit  : 100/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMMON   BANK0   BANK1
  1260 ;;      Params:         0       0       0
  1261 ;;      Locals:         0       0       0
  1262 ;;      Temps:          0       0       0
  1263 ;;      Totals:         0       0       0
  1264 ;;Total ram usage:        0 bytes
  1265 ;; Hardware stack levels used:    1
  1266 ;; Hardware stack levels required when called:    5
  1267 ;; This function calls:
  1268 ;;		_water_turn_off
  1269 ;; This function is called by:
  1270 ;;		_app_water_process_work
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           
  1275                           ;psect for function _app_process_water_workoff
  1276  07F9                     _app_process_water_workoff:	
  1277                           
  1278                           ;app_water_process.c: 143: water_turn_off();
  1279                           
  1280                           ;incstack = 0
  1281                           ; Regs used in _app_process_water_workoff: [wreg+status,2+status,0+pclath+cstack]
  1282  07F9  2FA8               	ljmp	l6396
  1283  07FA                     __end_of_app_process_water_workoff:	
  1284                           
  1285                           	psect	text5
  1286  07A8                     __ptext5:	
  1287 ;; *************** function _water_turn_off *****************
  1288 ;; Defined at:
  1289 ;;		line 131 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_water_process
      +.c"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;		None
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;		None
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      void 
  1296 ;; Registers used:
  1297 ;;		wreg, status,2, status,0, pclath, cstack
  1298 ;; Tracked objects:
  1299 ;;		On entry : 100/0
  1300 ;;		On exit  : 100/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMMON   BANK0   BANK1
  1303 ;;      Params:         0       0       0
  1304 ;;      Locals:         0       0       0
  1305 ;;      Temps:          0       0       0
  1306 ;;      Totals:         0       0       0
  1307 ;;Total ram usage:        0 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; Hardware stack levels required when called:    4
  1310 ;; This function calls:
  1311 ;;		_set_led_state
  1312 ;; This function is called by:
  1313 ;;		_app_process_water_workoff
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           
  1318                           ;psect for function _water_turn_off
  1319  07A8                     _water_turn_off:	
  1320  07A8                     l6396:	
  1321                           ;incstack = 0
  1322                           ; Regs used in _water_turn_off: [wreg+status,2+status,0+pclath+cstack]
  1323                           
  1324  07A8  30F8               	movlw	248
  1325                           
  1326                           ;app_water_process.c: 133: water_work_mode.water_mode_count = 0;
  1327  07A9  01E3               	clrf	_water_work_mode+2
  1328  07AA  01E4               	clrf	_water_work_mode+3
  1329                           
  1330                           ;app_water_process.c: 134: water_work_mode.times = 0;
  1331  07AB  01E5               	clrf	_water_work_mode+4
  1332                           
  1333                           ;app_water_process.c: 136: water_work_mode.water_mode_out_put = WATER_WORK_MODE_IDEL;
  1334  07AC  01E2               	clrf	_water_work_mode+1
  1335                           
  1336                           ;app_water_process.c: 138: set_led_state(LED_INDEX_8 | LED_INDEX_7 | LED_INDEX_6 | LED_I
      +                          NDEX_5 | LED_INDEX_4, LED_STATE_OFF);
  1337  07AD  00D3               	movwf	set_led_state@index
  1338  07AE  01D4               	clrf	set_led_state@index+1
  1339  07AF  01D5               	clrf	set_led_state@state
  1340  07B0  2E26               	ljmp	l6232
  1341  07B1                     __end_of_water_turn_off:	
  1342                           
  1343                           	psect	text6
  1344  0652                     __ptext6:	
  1345 ;; *************** function _app_process_water_working *****************
  1346 ;; Defined at:
  1347 ;;		line 95 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_water_process.
      +c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;		None
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0, pclath, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 100/0
  1358 ;;		On exit  : 100/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMMON   BANK0   BANK1
  1361 ;;      Params:         0       0       0
  1362 ;;      Locals:         0       0       0
  1363 ;;      Temps:          0       0       0
  1364 ;;      Totals:         0       0       0
  1365 ;;Total ram usage:        0 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    4
  1368 ;; This function calls:
  1369 ;;		_app_process_set_water_state
  1370 ;; This function is called by:
  1371 ;;		_app_water_process_work
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           
  1376                           ;psect for function _app_process_water_working
  1377  0652                     _app_process_water_working:	
  1378  0652                     l6866:	
  1379                           ;incstack = 0
  1380                           ; Regs used in _app_process_water_working: [wreg+status,2+status,0+pclath+cstack]
  1381                           
  1382                           
  1383                           ;app_water_process.c: 97: if (!water_work_step)
  1384  0652  083E               	movf	_water_work_step,w
  1385  0653  1D03               	btfss	3,2
  1386  0654  2E57               	goto	l6870
  1387                           
  1388                           ;app_water_process.c: 98: {
  1389                           ;app_water_process.c: 99: water_work_step++;
  1390  0655  0ABE               	incf	_water_work_step,f
  1391                           
  1392                           ;app_water_process.c: 100: }
  1393  0656  0008               	return
  1394  0657                     l6870:	
  1395                           
  1396                           ;app_water_process.c: 101: else
  1397                           ;app_water_process.c: 102: {
  1398                           ;app_water_process.c: 103: water_work_mode.water_mode_count++;
  1399  0657  0AE3               	incf	_water_work_mode+2,f
  1400  0658  1903               	skipnz
  1401  0659  0AE4               	incf	_water_work_mode+3,f
  1402                           
  1403                           ;app_water_process.c: 104: if (water_work_mode.water_mode_count == (100UL * (30)))
  1404  065A  30B8               	movlw	184
  1405  065B  0663               	xorwf	_water_work_mode+2,w
  1406  065C  300B               	movlw	11
  1407  065D  1903               	skipnz
  1408  065E  0664               	xorwf	_water_work_mode+3,w
  1409  065F  1D03               	btfss	3,2
  1410  0660  2E63               	goto	l6876
  1411                           
  1412                           ;app_water_process.c: 105: {
  1413                           ;app_water_process.c: 106: water_work_mode.water_mode_out_put = WORK_MODE_IDEL;
  1414  0661  01E2               	clrf	_water_work_mode+1
  1415                           
  1416                           ;app_water_process.c: 107: }
  1417  0662  0008               	return
  1418  0663                     l6876:	
  1419                           
  1420                           ;app_water_process.c: 108: else if (water_work_mode.water_mode_count >= (100UL * (30)) +
      +                           ((200) / 10))
  1421  0663  300B               	movlw	11
  1422  0664  0264               	subwf	_water_work_mode+3,w
  1423  0665  30CC               	movlw	204
  1424  0666  1903               	skipnz
  1425  0667  0263               	subwf	_water_work_mode+2,w
  1426  0668  1C03               	skipc
  1427  0669  0008               	return
  1428  066A  3004               	movlw	4
  1429                           
  1430                           ;app_water_process.c: 109: {
  1431                           ;app_water_process.c: 110: water_work_mode.water_mode_count = 0;
  1432  066B  01E3               	clrf	_water_work_mode+2
  1433  066C  01E4               	clrf	_water_work_mode+3
  1434                           
  1435                           ;app_water_process.c: 111: water_work_mode.times++;
  1436  066D  0AE5               	incf	_water_work_mode+4,f
  1437                           
  1438                           ;app_water_process.c: 112: if(water_work_mode.times >= 4)
  1439  066E  0265               	subwf	_water_work_mode+4,w
  1440  066F  1C03               	skipc
  1441  0670  2E78               	goto	l6894
  1442                           
  1443                           ;app_water_process.c: 113: {
  1444                           ;app_water_process.c: 114: water_work_mode.times = 0;
  1445  0671  01E5               	clrf	_water_work_mode+4
  1446                           
  1447                           ;app_water_process.c: 115: if (app_charge.Remind)
  1448  0672  1683               	bsf	3,5	;RP0=1, select bank1
  1449  0673  1E20               	btfss	_app_charge^(0+128),4
  1450  0674  2E76               	goto	l6892
  1451                           
  1452                           ;app_water_process.c: 116: {
  1453                           ;app_water_process.c: 117: app_charge.flag_remind_delay_10s = 1;
  1454                           
  1455                           ;app_water_process.c: 118: app_charge.remind_delay_10s_timer = 0;
  1456  0675  259A               	fcall	PL10	;call to abstracted procedure
  1457  0676                     l6892:	
  1458                           
  1459                           ;app_water_process.c: 119: }
  1460                           ;app_water_process.c: 121: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
  1461  0676  3000               	movlw	0
  1462  0677  2FF0               	ljmp	_app_process_set_water_state
  1463  0678                     l6894:	
  1464                           ;app_water_process.c: 122: }
  1465                           
  1466                           
  1467                           ;app_water_process.c: 123: else
  1468                           ;app_water_process.c: 124: {
  1469                           ;app_water_process.c: 125: water_work_mode.water_mode_out_put = water_work_mode.water_mo
      +                          de;
  1470  0678  0861               	movf	_water_work_mode,w
  1471  0679  00E2               	movwf	_water_work_mode+1
  1472  067A  0008               	return
  1473  067B                     __end_of_app_process_water_working:	
  1474                           
  1475                           	psect	text7
  1476  06B9                     __ptext7:	
  1477 ;; *************** function _app_process_water_mdoe_led *****************
  1478 ;; Defined at:
  1479 ;;		line 147 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_water_process
      +.c"
  1480 ;; Parameters:    Size  Location     Type
  1481 ;;		None
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;		None
  1484 ;; Return value:  Size  Location     Type
  1485 ;;                  1    wreg      void 
  1486 ;; Registers used:
  1487 ;;		wreg, status,2, status,0, pclath, cstack
  1488 ;; Tracked objects:
  1489 ;;		On entry : 100/0
  1490 ;;		On exit  : 100/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMMON   BANK0   BANK1
  1493 ;;      Params:         0       0       0
  1494 ;;      Locals:         0       0       0
  1495 ;;      Temps:          0       0       0
  1496 ;;      Totals:         0       0       0
  1497 ;;Total ram usage:        0 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; Hardware stack levels required when called:    4
  1500 ;; This function calls:
  1501 ;;		_app_process_set_water_state
  1502 ;; This function is called by:
  1503 ;;		_app_water_process_work
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           
  1508                           ;psect for function _app_process_water_mdoe_led
  1509  06B9                     _app_process_water_mdoe_led:	
  1510  06B9                     l6898:	
  1511                           ;incstack = 0
  1512                           ; Regs used in _app_process_water_mdoe_led: [wreg+status,2+status,0+pclath+cstack]
  1513                           
  1514                           
  1515                           ;app_water_process.c: 149: if (!water_work_step)
  1516  06B9  083E               	movf	_water_work_step,w
  1517  06BA  1D03               	btfss	3,2
  1518  06BB  2EC2               	goto	l6904
  1519                           
  1520                           ;app_water_process.c: 150: {
  1521                           ;app_water_process.c: 151: water_mode_led_cnt = (100UL * (10));
  1522  06BC  30E8               	movlw	232
  1523  06BD  00A4               	movwf	_water_mode_led_cnt
  1524  06BE  3003               	movlw	3
  1525  06BF  00A5               	movwf	_water_mode_led_cnt+1
  1526                           
  1527                           ;app_water_process.c: 152: water_work_step++;
  1528  06C0  0ABE               	incf	_water_work_step,f
  1529                           
  1530                           ;app_water_process.c: 153: }
  1531  06C1  0008               	return
  1532  06C2                     l6904:	
  1533                           
  1534                           ;app_water_process.c: 154: else
  1535                           ;app_water_process.c: 155: {
  1536                           ;app_water_process.c: 156: water_work_mode.water_mode_count++;
  1537  06C2  0AE3               	incf	_water_work_mode+2,f
  1538  06C3  1903               	skipnz
  1539  06C4  0AE4               	incf	_water_work_mode+3,f
  1540                           
  1541                           ;app_water_process.c: 157: if (water_mode_led_cnt)
  1542  06C5  0824               	movf	_water_mode_led_cnt,w
  1543  06C6  0425               	iorwf	_water_mode_led_cnt+1,w
  1544  06C7  1903               	btfsc	3,2
  1545  06C8  0008               	return
  1546                           
  1547                           ;app_water_process.c: 158: {
  1548                           ;app_water_process.c: 159: water_mode_led_cnt--;
  1549  06C9  3001               	movlw	1
  1550  06CA  02A4               	subwf	_water_mode_led_cnt,f
  1551  06CB  3000               	movlw	0
  1552  06CC  1C03               	skipc
  1553  06CD  03A5               	decf	_water_mode_led_cnt+1,f
  1554  06CE  02A5               	subwf	_water_mode_led_cnt+1,f
  1555                           
  1556                           ;app_water_process.c: 160: if (!water_mode_led_cnt)
  1557  06CF  0824               	movf	_water_mode_led_cnt,w
  1558  06D0  0425               	iorwf	_water_mode_led_cnt+1,w
  1559  06D1  1D03               	btfss	3,2
  1560  06D2  0008               	return
  1561                           
  1562                           ;app_water_process.c: 161: {
  1563                           ;app_water_process.c: 163: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
  1564  06D3  3000               	movlw	0
  1565  06D4  2FF0               	ljmp	_app_process_set_water_state
  1566  06D5                     __end_of_app_process_water_mdoe_led:	
  1567                           
  1568                           	psect	text8
  1569  0786                     __ptext8:	
  1570 ;; *************** function _app_process_work *****************
  1571 ;; Defined at:
  1572 ;;		line 209 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_process.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;		None
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;		None
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  1    wreg      void 
  1579 ;; Registers used:
  1580 ;;		wreg, status,2, status,0, pclath, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 100/0
  1583 ;;		On exit  : 100/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMMON   BANK0   BANK1
  1586 ;;      Params:         0       0       0
  1587 ;;      Locals:         0       0       0
  1588 ;;      Temps:          0       0       0
  1589 ;;      Totals:         0       0       0
  1590 ;;Total ram usage:        0 bytes
  1591 ;; Hardware stack levels used:    1
  1592 ;; Hardware stack levels required when called:    6
  1593 ;; This function calls:
  1594 ;;		_app_process_charing
  1595 ;;		_app_process_power_off
  1596 ;;		_app_process_working
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           
  1603                           ;psect for function _app_process_work
  1604  0786                     _app_process_work:	
  1605                           
  1606                           ;app_process.c: 220: if (app_work_state == WORK_STATE_POWEROFF)
  1607                           
  1608                           ;incstack = 0
  1609                           ; Regs used in _app_process_work: [wreg+status,2+status,0+pclath+cstack]
  1610  0786  086D               	movf	_app_work_state,w	;volatile
  1611  0787  1D03               	btfss	3,2
  1612  0788  2F8A               	goto	l7108
  1613                           
  1614                           ;app_process.c: 221: {
  1615                           ;app_process.c: 222: app_process_power_off();
  1616  0789  27B1               	fcall	_app_process_power_off
  1617  078A                     l7108:	
  1618                           
  1619                           ;app_process.c: 223: }
  1620                           ;app_process.c: 224: if (app_work_state == WORK_STATE_WORKING)
  1621  078A  0B6D               	decfsz	_app_work_state,w	;volatile
  1622  078B  2F8D               	goto	l7112
  1623                           
  1624                           ;app_process.c: 225: {
  1625                           ;app_process.c: 226: app_process_working();
  1626  078C  256F               	fcall	_app_process_working
  1627  078D                     l7112:	
  1628                           
  1629                           ;app_process.c: 227: }
  1630                           ;app_process.c: 228: if (app_work_state == WORK_STATE_CHARGING)
  1631  078D  3002               	movlw	2
  1632  078E  066D               	xorwf	_app_work_state,w	;volatile
  1633  078F  1D03               	btfss	3,2
  1634  0790  0008               	return
  1635                           
  1636                           ;app_process.c: 229: {
  1637                           ;app_process.c: 230: app_process_charing();
  1638  0791  2F6A               	ljmp	l6858
  1639  0792                     __end_of_app_process_work:	
  1640                           
  1641                           	psect	text9
  1642  056F                     __ptext9:	
  1643 ;; *************** function _app_process_working *****************
  1644 ;; Defined at:
  1645 ;;		line 41 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_process.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;		None
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;		None
  1650 ;; Return value:  Size  Location     Type
  1651 ;;                  1    wreg      void 
  1652 ;; Registers used:
  1653 ;;		wreg, status,2, status,0, pclath, cstack
  1654 ;; Tracked objects:
  1655 ;;		On entry : 100/0
  1656 ;;		On exit  : 100/0
  1657 ;;		Unchanged: 0/0
  1658 ;; Data sizes:     COMMON   BANK0   BANK1
  1659 ;;      Params:         0       0       0
  1660 ;;      Locals:         0       0       0
  1661 ;;      Temps:          0       0       0
  1662 ;;      Totals:         0       0       0
  1663 ;;Total ram usage:        0 bytes
  1664 ;; Hardware stack levels used:    1
  1665 ;; Hardware stack levels required when called:    4
  1666 ;; This function calls:
  1667 ;;		_app_process_set_work_state
  1668 ;;		_work_chang_timing
  1669 ;; This function is called by:
  1670 ;;		_app_process_work
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           
  1675                           ;psect for function _app_process_working
  1676  056F                     _app_process_working:	
  1677                           
  1678                           ;app_process.c: 43: if (!work_step)
  1679                           
  1680                           ;incstack = 0
  1681                           ; Regs used in _app_process_working: [wreg+status,2+status,0+pclath+cstack]
  1682  056F  0844               	movf	_work_step,w
  1683  0570  1D03               	btfss	3,2
  1684  0571  2D74               	goto	l6770
  1685                           
  1686                           ;app_process.c: 44: {
  1687                           ;app_process.c: 46: work_step++;
  1688  0572  0AC4               	incf	_work_step,f
  1689                           
  1690                           ;app_process.c: 47: }
  1691  0573  0008               	return
  1692  0574                     l6770:	
  1693                           
  1694                           ;app_process.c: 48: else
  1695                           ;app_process.c: 49: {
  1696                           ;app_process.c: 50: work_chang_timing();
  1697  0574  26EF               	fcall	_work_chang_timing
  1698                           
  1699                           ;app_process.c: 51: work_mode.work_mode_count++;
  1700  0575  1283               	bcf	3,5	;RP0=0, select bank0
  1701  0576  0AE8               	incf	_work_mode+2,f
  1702  0577  1903               	skipnz
  1703  0578  0AE9               	incf	_work_mode+3,f
  1704                           
  1705                           ;app_process.c: 52: if (work_mode.work_mode_count == (100UL * (30)))
  1706  0579  30B8               	movlw	184
  1707  057A  0668               	xorwf	_work_mode+2,w
  1708  057B  300B               	movlw	11
  1709  057C  1903               	skipnz
  1710  057D  0669               	xorwf	_work_mode+3,w
  1711  057E  1D03               	btfss	3,2
  1712  057F  2D82               	goto	l6778
  1713                           
  1714                           ;app_process.c: 53: {
  1715                           ;app_process.c: 54: work_mode.mode_out_put = WORK_MODE_IDEL;
  1716  0580  01E7               	clrf	_work_mode+1
  1717                           
  1718                           ;app_process.c: 55: }
  1719  0581  0008               	return
  1720  0582                     l6778:	
  1721                           
  1722                           ;app_process.c: 56: else if (work_mode.work_mode_count >= (100UL * (30)) + ((200) / 10))
  1723  0582  300B               	movlw	11
  1724  0583  0269               	subwf	_work_mode+3,w
  1725  0584  30CC               	movlw	204
  1726  0585  1903               	skipnz
  1727  0586  0268               	subwf	_work_mode+2,w
  1728  0587  1C03               	skipc
  1729  0588  0008               	return
  1730  0589  3004               	movlw	4
  1731                           
  1732                           ;app_process.c: 57: {
  1733                           ;app_process.c: 58: work_mode.work_mode_count = 0;
  1734  058A  01E8               	clrf	_work_mode+2
  1735  058B  01E9               	clrf	_work_mode+3
  1736                           
  1737                           ;app_process.c: 59: work_mode.times++;
  1738  058C  0AEA               	incf	_work_mode+4,f
  1739                           
  1740                           ;app_process.c: 60: if(work_mode.times >= 4)
  1741  058D  026A               	subwf	_work_mode+4,w
  1742  058E  1C03               	skipc
  1743  058F  2D97               	goto	l6796
  1744                           
  1745                           ;app_process.c: 61: {
  1746                           ;app_process.c: 62: work_mode.times = 0;
  1747  0590  01EA               	clrf	_work_mode+4
  1748                           
  1749                           ;app_process.c: 63: if (app_charge.Remind)
  1750  0591  1683               	bsf	3,5	;RP0=1, select bank1
  1751  0592  1E20               	btfss	_app_charge^(0+128),4
  1752  0593  2D95               	goto	l6794
  1753                           
  1754                           ;app_process.c: 64: {
  1755                           ;app_process.c: 65: app_charge.flag_remind_delay_10s = 1;
  1756                           
  1757                           ;app_process.c: 66: app_charge.remind_delay_10s_timer = 0;
  1758  0594  259A               	fcall	PL10	;call to abstracted procedure
  1759  0595                     l6794:	
  1760                           
  1761                           ;app_process.c: 67: }
  1762                           ;app_process.c: 68: app_process_set_work_state(WORK_STATE_POWEROFF);
  1763  0595  3000               	movlw	0
  1764  0596  2FEB               	ljmp	_app_process_set_work_state
  1765  0597                     l6796:	
  1766                           ;app_process.c: 69: }
  1767                           
  1768                           
  1769                           ;app_process.c: 70: else
  1770                           ;app_process.c: 71: {
  1771                           ;app_process.c: 72: work_mode.mode_out_put = work_mode.mode;
  1772  0597  0866               	movf	_work_mode,w
  1773  0598  00E7               	movwf	_work_mode+1
  1774  0599  0008               	return
  1775  059A                     __end_of_app_process_working:	
  1776  059A                     PL10:	
  1777  059A  01A2               	clrf	(_app_charge^(0+128)+2)
  1778  059B  0AA2               	incf	(_app_charge^(0+128)+2),f
  1779  059C  01A3               	clrf	(_app_charge^(0+128)+3)
  1780  059D  01A4               	clrf	((_app_charge+1)^(0+128)+3)
  1781  059E  0008               	return
  1782  059F                     __end_ofPL10:	
  1783                           
  1784                           	psect	text10
  1785  06EF                     __ptext10:	
  1786 ;; *************** function _work_chang_timing *****************
  1787 ;; Defined at:
  1788 ;;		line 3 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_timer.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		wreg, status,2, status,0
  1797 ;; Tracked objects:
  1798 ;;		On entry : 100/0
  1799 ;;		On exit  : 100/100
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMMON   BANK0   BANK1
  1802 ;;      Params:         0       0       0
  1803 ;;      Locals:         0       0       0
  1804 ;;      Temps:          0       0       0
  1805 ;;      Totals:         0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    3
  1809 ;; This function calls:
  1810 ;;		Nothing
  1811 ;; This function is called by:
  1812 ;;		_app_process_working
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           
  1817                           ;psect for function _work_chang_timing
  1818  06EF                     _work_chang_timing:	
  1819                           
  1820                           ;app_timer.c: 5: if (app_timer.work_updown_count)
  1821                           
  1822                           ;incstack = 0
  1823                           ; Regs used in _work_chang_timing: [wreg+status,2+status,0]
  1824  06EF  1683               	bsf	3,5	;RP0=1, select bank1
  1825  06F0  0837               	movf	((_app_timer+3)^(0+128)+2),w
  1826  06F1  0436               	iorwf	((_app_timer+2)^(0+128)+2),w
  1827  06F2  0435               	iorwf	((_app_timer+1)^(0+128)+2),w
  1828  06F3  0434               	iorwf	(_app_timer^(0+128)+2),w
  1829  06F4  1903               	skipnz
  1830  06F5  0008               	return
  1831                           
  1832                           ;app_timer.c: 6: {
  1833                           ;app_timer.c: 7: app_timer.work_updown_count--;
  1834  06F6  3001               	movlw	1
  1835  06F7  02B4               	subwf	(_app_timer^(0+128)+2),f
  1836  06F8  3000               	movlw	0
  1837  06F9  1C03               	skipc
  1838  06FA  3001               	movlw	1
  1839  06FB  02B5               	subwf	((_app_timer+1)^(0+128)+2),f
  1840  06FC  3000               	movlw	0
  1841  06FD  1C03               	skipc
  1842  06FE  3001               	movlw	1
  1843  06FF  02B6               	subwf	((_app_timer+2)^(0+128)+2),f
  1844  0700  3000               	movlw	0
  1845  0701  1C03               	skipc
  1846  0702  3001               	movlw	1
  1847  0703  02B7               	subwf	((_app_timer+3)^(0+128)+2),f
  1848  0704  0008               	return
  1849  0705                     __end_of_work_chang_timing:	
  1850                           
  1851                           	psect	text11
  1852  076A                     __ptext11:	
  1853 ;; *************** function _app_process_charing *****************
  1854 ;; Defined at:
  1855 ;;		line 99 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_process.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;		None
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0, pclath, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 100/0
  1866 ;;		On exit  : 100/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMMON   BANK0   BANK1
  1869 ;;      Params:         0       0       0
  1870 ;;      Locals:         0       0       0
  1871 ;;      Temps:          0       0       0
  1872 ;;      Totals:         0       0       0
  1873 ;;Total ram usage:        0 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    5
  1876 ;; This function calls:
  1877 ;;		_app_process_power_off
  1878 ;;		_app_process_set_water_state
  1879 ;; This function is called by:
  1880 ;;		_app_process_work
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           
  1885                           ;psect for function _app_process_charing
  1886  076A                     _app_process_charing:	
  1887  076A                     l6858:	
  1888                           ;incstack = 0
  1889                           ; Regs used in _app_process_charing: [wreg+status,2+status,0+pclath+cstack]
  1890                           
  1891                           
  1892                           ;app_process.c: 101: if (!work_step)
  1893  076A  0844               	movf	_work_step,w
  1894  076B  1D03               	btfss	3,2
  1895  076C  0008               	return
  1896                           
  1897                           ;app_process.c: 102: {
  1898                           ;app_process.c: 103: app_process_power_off();
  1899  076D  27B1               	fcall	_app_process_power_off
  1900                           
  1901                           ;app_process.c: 104: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
  1902  076E  3000               	movlw	0
  1903  076F  27F0               	fcall	_app_process_set_water_state
  1904                           
  1905                           ;app_process.c: 105: app_timer.charge_to_oldmode_count = (100UL * (8));
  1906  0770  3020               	movlw	32
  1907  0771  1683               	bsf	3,5	;RP0=1, select bank1
  1908  0772  00BA               	movwf	(_app_timer^(0+128)+8)
  1909  0773  3003               	movlw	3
  1910  0774  00BB               	movwf	(_app_timer^(0+128)+9)
  1911                           
  1912                           ;app_process.c: 106: work_step++;
  1913  0775  1283               	bcf	3,5	;RP0=0, select bank0
  1914  0776  0AC4               	incf	_work_step,f
  1915                           
  1916                           ;app_process.c: 107: }
  1917  0777  0008               	return
  1918  0778                     __end_of_app_process_charing:	
  1919                           
  1920                           	psect	text12
  1921  07B1                     __ptext12:	
  1922 ;; *************** function _app_process_power_off *****************
  1923 ;; Defined at:
  1924 ;;		line 78 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_process.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;		None
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;		None
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      void 
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0, pclath, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 100/0
  1935 ;;		On exit  : 100/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMMON   BANK0   BANK1
  1938 ;;      Params:         0       0       0
  1939 ;;      Locals:         0       0       0
  1940 ;;      Temps:          0       0       0
  1941 ;;      Totals:         0       0       0
  1942 ;;Total ram usage:        0 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:    4
  1945 ;; This function calls:
  1946 ;;		_set_led_state
  1947 ;; This function is called by:
  1948 ;;		_app_process_charing
  1949 ;;		_app_process_work
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           
  1954                           ;psect for function _app_process_power_off
  1955  07B1                     _app_process_power_off:	
  1956  07B1  3007               	movlw	7
  1957                           
  1958                           ;app_process.c: 80: work_mode.work_mode_count = 0;
  1959                           
  1960                           ;incstack = 0
  1961                           ; Regs used in _app_process_power_off: [wreg+status,2+status,0+pclath+cstack]
  1962  07B2  01E8               	clrf	_work_mode+2
  1963  07B3  01E9               	clrf	_work_mode+3
  1964                           
  1965                           ;app_process.c: 81: work_mode.times = 0;
  1966  07B4  01EA               	clrf	_work_mode+4
  1967                           
  1968                           ;app_process.c: 82: work_mode.mode_out_put = WORK_MODE_IDEL;
  1969  07B5  01E7               	clrf	_work_mode+1
  1970                           
  1971                           ;app_process.c: 83: set_led_state(LED_INDEX_1 | LED_INDEX_2 | LED_INDEX_3, LED_STATE_OFF
      +                          );
  1972  07B6  00D3               	movwf	set_led_state@index
  1973  07B7  01D4               	clrf	set_led_state@index+1
  1974  07B8  01D5               	clrf	set_led_state@state
  1975  07B9  2E26               	ljmp	l6232
  1976  07BA                     __end_of_app_process_power_off:	
  1977                           
  1978                           	psect	text13
  1979  07DF                     __ptext13:	
  1980 ;; *************** function _app_process_key *****************
  1981 ;; Defined at:
  1982 ;;		line 308 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_key.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;		None
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;		None
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  1    wreg      void 
  1989 ;; Registers used:
  1990 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 100/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMMON   BANK0   BANK1
  1996 ;;      Params:         0       0       0
  1997 ;;      Locals:         0       0       0
  1998 ;;      Temps:          0       0       0
  1999 ;;      Totals:         0       0       0
  2000 ;;Total ram usage:        0 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; Hardware stack levels required when called:    7
  2003 ;; This function calls:
  2004 ;;		_charge_or_lowBat_check
  2005 ;;		_handle_key_pwr
  2006 ;;		_handle_key_water
  2007 ;;		_key_brush_pwr_check
  2008 ;;		_key_water_mode_check
  2009 ;;		_key_water_pwr_check
  2010 ;; This function is called by:
  2011 ;;		_main
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           
  2016                           ;psect for function _app_process_key
  2017  07DF                     _app_process_key:	
  2018                           
  2019                           ;app_key.c: 310: key_brush_pwr_check();
  2020                           
  2021                           ;incstack = 0
  2022                           ; Regs used in _app_process_key: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2023  07DF  24C9               	fcall	_key_brush_pwr_check
  2024                           
  2025                           ;app_key.c: 311: key_water_pwr_check();
  2026  07E0  2501               	fcall	_key_water_pwr_check
  2027                           
  2028                           ;app_key.c: 312: key_water_mode_check();
  2029  07E1  2538               	fcall	_key_water_mode_check
  2030                           
  2031                           ;app_key.c: 313: charge_or_lowBat_check();
  2032  07E2  26D5               	fcall	_charge_or_lowBat_check
  2033                           
  2034                           ;app_key.c: 314: handle_key_pwr();
  2035  07E3  23D5               	fcall	_handle_key_pwr
  2036                           
  2037                           ;app_key.c: 315: handle_key_water();
  2038  07E4  2B8F               	ljmp	l6708
  2039  07E5                     __end_of_app_process_key:	
  2040                           
  2041                           	psect	text14
  2042  0501                     __ptext14:	
  2043 ;; *************** function _key_water_pwr_check *****************
  2044 ;; Defined at:
  2045 ;;		line 60 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_key.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;		None
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;		None
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      void 
  2052 ;; Registers used:
  2053 ;;		wreg, status,2, status,0
  2054 ;; Tracked objects:
  2055 ;;		On entry : 100/0
  2056 ;;		On exit  : 100/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMMON   BANK0   BANK1
  2059 ;;      Params:         0       0       0
  2060 ;;      Locals:         0       0       0
  2061 ;;      Temps:          0       0       0
  2062 ;;      Totals:         0       0       0
  2063 ;;Total ram usage:        0 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    3
  2066 ;; This function calls:
  2067 ;;		Nothing
  2068 ;; This function is called by:
  2069 ;;		_app_process_key
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           
  2074                           ;psect for function _key_water_pwr_check
  2075  0501                     _key_water_pwr_check:	
  2076                           
  2077                           ;app_key.c: 62: if(!RB0)
  2078                           
  2079                           ;incstack = 0
  2080                           ; Regs used in _key_water_pwr_check: [wreg+status,2+status,0]
  2081  0501  1806               	btfsc	6,0	;volatile
  2082  0502  2D1F               	goto	l6610
  2083                           
  2084                           ;app_key.c: 63: {
  2085                           ;app_key.c: 64: if(KeyPressCnt2 < 200)
  2086  0503  3000               	movlw	0
  2087  0504  0233               	subwf	_KeyPressCnt2+1,w	;volatile
  2088  0505  30C8               	movlw	200
  2089  0506  1903               	skipnz
  2090  0507  0232               	subwf	_KeyPressCnt2,w	;volatile
  2091  0508  1803               	skipnc
  2092  0509  2D0D               	goto	l6602
  2093                           
  2094                           ;app_key.c: 65: {
  2095                           ;app_key.c: 66: KeyPressCnt2++;
  2096  050A  0AB2               	incf	_KeyPressCnt2,f	;volatile
  2097  050B  1903               	skipnz
  2098  050C  0AB3               	incf	_KeyPressCnt2+1,f	;volatile
  2099  050D                     l6602:	
  2100                           
  2101                           ;app_key.c: 67: }
  2102                           ;app_key.c: 68: if(KeyPressCnt2 >= 2)
  2103  050D  3000               	movlw	0
  2104  050E  0233               	subwf	_KeyPressCnt2+1,w	;volatile
  2105  050F  3002               	movlw	2
  2106  0510  1903               	skipnz
  2107  0511  0232               	subwf	_KeyPressCnt2,w	;volatile
  2108  0512  1803               	btfsc	3,0
  2109                           
  2110                           ;app_key.c: 69: {
  2111                           ;app_key.c: 70: KeyRelaxCnt2 = 0;
  2112  0513  01C8               	clrf	_KeyRelaxCnt2	;volatile
  2113                           
  2114                           ;app_key.c: 71: }
  2115                           ;app_key.c: 76: if(KeyPressCnt2 == 200)
  2116  0514  30C8               	movlw	200
  2117  0515  0632               	xorwf	_KeyPressCnt2,w	;volatile
  2118  0516  0433               	iorwf	_KeyPressCnt2+1,w	;volatile
  2119  0517  1D03               	btfss	3,2
  2120  0518  0008               	return
  2121                           
  2122                           ;app_key.c: 77: {
  2123                           ;app_key.c: 78: KeyPressCnt2 = 201;
  2124  0519  30C9               	movlw	201
  2125  051A  00B2               	movwf	_KeyPressCnt2	;volatile
  2126  051B  01B3               	clrf	_KeyPressCnt2+1	;volatile
  2127                           
  2128                           ;app_key.c: 80: key_water_pwr_type = KEY_TYPE_LONG_LONG;
  2129  051C  3003               	movlw	3
  2130  051D  00CB               	movwf	_key_water_pwr_type
  2131  051E  0008               	return
  2132  051F                     l6610:	
  2133                           
  2134                           ;app_key.c: 83: else
  2135                           ;app_key.c: 84: {
  2136                           ;app_key.c: 85: if(KeyRelaxCnt2 < 2)
  2137  051F  3002               	movlw	2
  2138  0520  0248               	subwf	_KeyRelaxCnt2,w	;volatile
  2139  0521  1803               	skipnc
  2140  0522  2D25               	goto	l6614
  2141                           
  2142                           ;app_key.c: 86: {
  2143                           ;app_key.c: 87: KeyRelaxCnt2++;
  2144  0523  0AC8               	incf	_KeyRelaxCnt2,f	;volatile
  2145                           
  2146                           ;app_key.c: 88: }
  2147  0524  0008               	return
  2148  0525                     l6614:	
  2149                           
  2150                           ;app_key.c: 89: else
  2151                           ;app_key.c: 90: {
  2152                           ;app_key.c: 91: if(KeyPressCnt2 >= 3 && KeyPressCnt2 <= 50)
  2153  0525  3000               	movlw	0
  2154  0526  0233               	subwf	_KeyPressCnt2+1,w	;volatile
  2155  0527  3003               	movlw	3
  2156  0528  1903               	skipnz
  2157  0529  0232               	subwf	_KeyPressCnt2,w	;volatile
  2158  052A  1C03               	skipc
  2159  052B  2D35               	goto	l6620
  2160  052C  3000               	movlw	0
  2161  052D  0233               	subwf	_KeyPressCnt2+1,w	;volatile
  2162  052E  3033               	movlw	51
  2163  052F  1903               	skipnz
  2164  0530  0232               	subwf	_KeyPressCnt2,w	;volatile
  2165  0531  1803               	skipnc
  2166  0532  2D35               	goto	l6620
  2167                           
  2168                           ;app_key.c: 92: {
  2169                           ;app_key.c: 94: key_water_pwr_type = KEY_TYPE_SHORT;
  2170  0533  3005               	movlw	5
  2171  0534  00CB               	movwf	_key_water_pwr_type
  2172  0535                     l6620:	
  2173                           
  2174                           ;app_key.c: 95: }
  2175                           ;app_key.c: 96: KeyPressCnt2 = 0;
  2176  0535  01B2               	clrf	_KeyPressCnt2	;volatile
  2177  0536  01B3               	clrf	_KeyPressCnt2+1	;volatile
  2178  0537  0008               	return
  2179  0538                     __end_of_key_water_pwr_check:	
  2180                           
  2181                           	psect	text15
  2182  0538                     __ptext15:	
  2183 ;; *************** function _key_water_mode_check *****************
  2184 ;; Defined at:
  2185 ;;		line 100 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_key.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  1    wreg      void 
  2192 ;; Registers used:
  2193 ;;		wreg, status,2, status,0
  2194 ;; Tracked objects:
  2195 ;;		On entry : 100/0
  2196 ;;		On exit  : 100/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1
  2199 ;;      Params:         0       0       0
  2200 ;;      Locals:         0       0       0
  2201 ;;      Temps:          0       0       0
  2202 ;;      Totals:         0       0       0
  2203 ;;Total ram usage:        0 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    3
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_app_process_key
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           
  2214                           ;psect for function _key_water_mode_check
  2215  0538                     _key_water_mode_check:	
  2216                           
  2217                           ;app_key.c: 102: if(!RB1)
  2218                           
  2219                           ;incstack = 0
  2220                           ; Regs used in _key_water_mode_check: [wreg+status,2+status,0]
  2221  0538  1886               	btfsc	6,1	;volatile
  2222  0539  2D56               	goto	l6636
  2223                           
  2224                           ;app_key.c: 103: {
  2225                           ;app_key.c: 104: if(KeyPressCnt3 < 200)
  2226  053A  3000               	movlw	0
  2227  053B  0231               	subwf	_KeyPressCnt3+1,w	;volatile
  2228  053C  30C8               	movlw	200
  2229  053D  1903               	skipnz
  2230  053E  0230               	subwf	_KeyPressCnt3,w	;volatile
  2231  053F  1803               	skipnc
  2232  0540  2D44               	goto	l6628
  2233                           
  2234                           ;app_key.c: 105: {
  2235                           ;app_key.c: 106: KeyPressCnt3++;
  2236  0541  0AB0               	incf	_KeyPressCnt3,f	;volatile
  2237  0542  1903               	skipnz
  2238  0543  0AB1               	incf	_KeyPressCnt3+1,f	;volatile
  2239  0544                     l6628:	
  2240                           
  2241                           ;app_key.c: 107: }
  2242                           ;app_key.c: 108: if(KeyPressCnt3 >= 2)
  2243  0544  3000               	movlw	0
  2244  0545  0231               	subwf	_KeyPressCnt3+1,w	;volatile
  2245  0546  3002               	movlw	2
  2246  0547  1903               	skipnz
  2247  0548  0230               	subwf	_KeyPressCnt3,w	;volatile
  2248  0549  1803               	btfsc	3,0
  2249                           
  2250                           ;app_key.c: 109: {
  2251                           ;app_key.c: 110: KeyRelaxCnt3 = 0;
  2252  054A  01C7               	clrf	_KeyRelaxCnt3	;volatile
  2253                           
  2254                           ;app_key.c: 111: }
  2255                           ;app_key.c: 116: if(KeyPressCnt3 == 200)
  2256  054B  30C8               	movlw	200
  2257  054C  0630               	xorwf	_KeyPressCnt3,w	;volatile
  2258  054D  0431               	iorwf	_KeyPressCnt3+1,w	;volatile
  2259  054E  1D03               	btfss	3,2
  2260  054F  0008               	return
  2261                           
  2262                           ;app_key.c: 117: {
  2263                           ;app_key.c: 118: KeyPressCnt3 = 201;
  2264  0550  30C9               	movlw	201
  2265  0551  00B0               	movwf	_KeyPressCnt3	;volatile
  2266  0552  01B1               	clrf	_KeyPressCnt3+1	;volatile
  2267                           
  2268                           ;app_key.c: 120: key_water_mode_type = KEY_TYPE_LONG_LONG;
  2269  0553  3003               	movlw	3
  2270  0554  00CA               	movwf	_key_water_mode_type
  2271  0555  0008               	return
  2272  0556                     l6636:	
  2273                           
  2274                           ;app_key.c: 123: else
  2275                           ;app_key.c: 124: {
  2276                           ;app_key.c: 125: if(KeyRelaxCnt3 < 2)
  2277  0556  3002               	movlw	2
  2278  0557  0247               	subwf	_KeyRelaxCnt3,w	;volatile
  2279  0558  1803               	skipnc
  2280  0559  2D5C               	goto	l6640
  2281                           
  2282                           ;app_key.c: 126: {
  2283                           ;app_key.c: 127: KeyRelaxCnt3++;
  2284  055A  0AC7               	incf	_KeyRelaxCnt3,f	;volatile
  2285                           
  2286                           ;app_key.c: 128: }
  2287  055B  0008               	return
  2288  055C                     l6640:	
  2289                           
  2290                           ;app_key.c: 129: else
  2291                           ;app_key.c: 130: {
  2292                           ;app_key.c: 131: if(KeyPressCnt3 >= 3 && KeyPressCnt3 <= 50)
  2293  055C  3000               	movlw	0
  2294  055D  0231               	subwf	_KeyPressCnt3+1,w	;volatile
  2295  055E  3003               	movlw	3
  2296  055F  1903               	skipnz
  2297  0560  0230               	subwf	_KeyPressCnt3,w	;volatile
  2298  0561  1C03               	skipc
  2299  0562  2D6C               	goto	l6646
  2300  0563  3000               	movlw	0
  2301  0564  0231               	subwf	_KeyPressCnt3+1,w	;volatile
  2302  0565  3033               	movlw	51
  2303  0566  1903               	skipnz
  2304  0567  0230               	subwf	_KeyPressCnt3,w	;volatile
  2305  0568  1803               	skipnc
  2306  0569  2D6C               	goto	l6646
  2307                           
  2308                           ;app_key.c: 132: {
  2309                           ;app_key.c: 134: key_water_mode_type = KEY_TYPE_SHORT;
  2310  056A  3005               	movlw	5
  2311  056B  00CA               	movwf	_key_water_mode_type
  2312  056C                     l6646:	
  2313                           
  2314                           ;app_key.c: 135: }
  2315                           ;app_key.c: 136: KeyPressCnt3 = 0;
  2316  056C  01B0               	clrf	_KeyPressCnt3	;volatile
  2317  056D  01B1               	clrf	_KeyPressCnt3+1	;volatile
  2318  056E  0008               	return
  2319  056F                     __end_of_key_water_mode_check:	
  2320                           
  2321                           	psect	text16
  2322  04C9                     __ptext16:	
  2323 ;; *************** function _key_brush_pwr_check *****************
  2324 ;; Defined at:
  2325 ;;		line 19 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_key.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;		None
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2, status,0
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 100/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMMON   BANK0   BANK1
  2339 ;;      Params:         0       0       0
  2340 ;;      Locals:         0       0       0
  2341 ;;      Temps:          0       0       0
  2342 ;;      Totals:         0       0       0
  2343 ;;Total ram usage:        0 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    3
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		_app_process_key
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           
  2354                           ;psect for function _key_brush_pwr_check
  2355  04C9                     _key_brush_pwr_check:	
  2356                           
  2357                           ;app_key.c: 21: if(!RB2)
  2358                           
  2359                           ;incstack = 0
  2360                           ; Regs used in _key_brush_pwr_check: [wreg+status,2+status,0]
  2361  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  2362  04CA  1906               	btfsc	6,2	;volatile
  2363  04CB  2CE8               	goto	l6584
  2364                           
  2365                           ;app_key.c: 22: {
  2366                           ;app_key.c: 23: if(KeyPressCnt1 < 100)
  2367  04CC  3000               	movlw	0
  2368  04CD  0235               	subwf	_KeyPressCnt1+1,w	;volatile
  2369  04CE  3064               	movlw	100
  2370  04CF  1903               	skipnz
  2371  04D0  0234               	subwf	_KeyPressCnt1,w	;volatile
  2372  04D1  1803               	skipnc
  2373  04D2  2CD6               	goto	l6576
  2374                           
  2375                           ;app_key.c: 24: {
  2376                           ;app_key.c: 25: KeyPressCnt1++;
  2377  04D3  0AB4               	incf	_KeyPressCnt1,f	;volatile
  2378  04D4  1903               	skipnz
  2379  04D5  0AB5               	incf	_KeyPressCnt1+1,f	;volatile
  2380  04D6                     l6576:	
  2381                           
  2382                           ;app_key.c: 26: }
  2383                           ;app_key.c: 27: if(KeyPressCnt1 >= 2)
  2384  04D6  3000               	movlw	0
  2385  04D7  0235               	subwf	_KeyPressCnt1+1,w	;volatile
  2386  04D8  3002               	movlw	2
  2387  04D9  1903               	skipnz
  2388  04DA  0234               	subwf	_KeyPressCnt1,w	;volatile
  2389  04DB  1803               	btfsc	3,0
  2390                           
  2391                           ;app_key.c: 28: {
  2392                           ;app_key.c: 29: KeyRelaxCnt1 = 0;
  2393  04DC  01C9               	clrf	_KeyRelaxCnt1	;volatile
  2394                           
  2395                           ;app_key.c: 30: }
  2396                           ;app_key.c: 35: if(KeyPressCnt1 == 100)
  2397  04DD  3064               	movlw	100
  2398  04DE  0634               	xorwf	_KeyPressCnt1,w	;volatile
  2399  04DF  0435               	iorwf	_KeyPressCnt1+1,w	;volatile
  2400  04E0  1D03               	btfss	3,2
  2401  04E1  0008               	return
  2402                           
  2403                           ;app_key.c: 36: {
  2404                           ;app_key.c: 37: KeyPressCnt1 = 101;
  2405  04E2  3065               	movlw	101
  2406  04E3  00B4               	movwf	_KeyPressCnt1	;volatile
  2407  04E4  01B5               	clrf	_KeyPressCnt1+1	;volatile
  2408                           
  2409                           ;app_key.c: 39: key_brush_pwrtype = KEY_TYPE_LONG;
  2410  04E5  3002               	movlw	2
  2411  04E6  00CC               	movwf	_key_brush_pwrtype
  2412  04E7  0008               	return
  2413  04E8                     l6584:	
  2414                           
  2415                           ;app_key.c: 42: else
  2416                           ;app_key.c: 43: {
  2417                           ;app_key.c: 44: if(KeyRelaxCnt1 < 2)
  2418  04E8  3002               	movlw	2
  2419  04E9  0249               	subwf	_KeyRelaxCnt1,w	;volatile
  2420  04EA  1803               	skipnc
  2421  04EB  2CEE               	goto	l6588
  2422                           
  2423                           ;app_key.c: 45: {
  2424                           ;app_key.c: 46: KeyRelaxCnt1++;
  2425  04EC  0AC9               	incf	_KeyRelaxCnt1,f	;volatile
  2426                           
  2427                           ;app_key.c: 47: }
  2428  04ED  0008               	return
  2429  04EE                     l6588:	
  2430                           
  2431                           ;app_key.c: 48: else
  2432                           ;app_key.c: 49: {
  2433                           ;app_key.c: 50: if(KeyPressCnt1 >= 3 && KeyPressCnt1 <= 50)
  2434  04EE  3000               	movlw	0
  2435  04EF  0235               	subwf	_KeyPressCnt1+1,w	;volatile
  2436  04F0  3003               	movlw	3
  2437  04F1  1903               	skipnz
  2438  04F2  0234               	subwf	_KeyPressCnt1,w	;volatile
  2439  04F3  1C03               	skipc
  2440  04F4  2CFE               	goto	l6594
  2441  04F5  3000               	movlw	0
  2442  04F6  0235               	subwf	_KeyPressCnt1+1,w	;volatile
  2443  04F7  3033               	movlw	51
  2444  04F8  1903               	skipnz
  2445  04F9  0234               	subwf	_KeyPressCnt1,w	;volatile
  2446  04FA  1803               	skipnc
  2447  04FB  2CFE               	goto	l6594
  2448                           
  2449                           ;app_key.c: 51: {
  2450                           ;app_key.c: 53: key_brush_pwrtype = KEY_TYPE_SHORT;
  2451  04FC  3005               	movlw	5
  2452  04FD  00CC               	movwf	_key_brush_pwrtype
  2453  04FE                     l6594:	
  2454                           
  2455                           ;app_key.c: 54: }
  2456                           ;app_key.c: 55: KeyPressCnt1 = 0;
  2457  04FE  01B4               	clrf	_KeyPressCnt1	;volatile
  2458  04FF  01B5               	clrf	_KeyPressCnt1+1	;volatile
  2459  0500  0008               	return
  2460  0501                     __end_of_key_brush_pwr_check:	
  2461                           
  2462                           	psect	text17
  2463  038F                     __ptext17:	
  2464 ;; *************** function _handle_key_water *****************
  2465 ;; Defined at:
  2466 ;;		line 244 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_key.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;		None
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;		None
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  1    wreg      void 
  2473 ;; Registers used:
  2474 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 100/0
  2477 ;;		On exit  : 100/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMMON   BANK0   BANK1
  2480 ;;      Params:         0       0       0
  2481 ;;      Locals:         0       0       0
  2482 ;;      Temps:          0       0       0
  2483 ;;      Totals:         0       0       0
  2484 ;;Total ram usage:        0 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    5
  2487 ;; This function calls:
  2488 ;;		_app_led_water_mode_set
  2489 ;;		_app_process_set_water_mode_next
  2490 ;;		_app_process_set_water_state
  2491 ;;		_water_motor
  2492 ;; This function is called by:
  2493 ;;		_app_process_key
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           
  2498                           ;psect for function _handle_key_water
  2499  038F                     _handle_key_water:	
  2500  038F                     l6708:	
  2501                           ;incstack = 0
  2502                           ; Regs used in _handle_key_water: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2503                           
  2504                           
  2505                           ;app_key.c: 246: switch (key_water_pwr_type)
  2506  038F  2BAF               	goto	l6740
  2507  0390                     l6710:	
  2508                           
  2509                           ;app_key.c: 249: if (water_work_state == WATER_WORK_STATE_WORKING)
  2510  0390  0B6C               	decfsz	_water_work_state,w	;volatile
  2511  0391  2B9B               	goto	l6722
  2512                           
  2513                           ;app_key.c: 250: {
  2514                           ;app_key.c: 251: if (app_work_state == WORK_STATE_POWEROFF)
  2515  0392  086D               	movf	_app_work_state,w	;volatile
  2516  0393  1D03               	btfss	3,2
  2517  0394  2B99               	goto	l6720
  2518                           
  2519                           ;app_key.c: 252: {
  2520                           ;app_key.c: 253: if (app_charge.Remind)
  2521  0395  1683               	bsf	3,5	;RP0=1, select bank1
  2522  0396  1E20               	btfss	_app_charge^(0+128),4
  2523  0397  2B99               	goto	l6720
  2524                           
  2525                           ;app_key.c: 254: {
  2526                           ;app_key.c: 255: app_charge.flag_remind_delay_10s = 1;
  2527                           
  2528                           ;app_key.c: 256: app_charge.remind_delay_10s_timer = 0;
  2529  0398  259A               	fcall	PL10	;call to abstracted procedure
  2530  0399                     l6720:	
  2531                           
  2532                           ;app_key.c: 257: }
  2533                           ;app_key.c: 258: }
  2534                           ;app_key.c: 259: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
  2535  0399  3000               	movlw	0
  2536  039A  2BAC               	goto	L1
  2537  039B                     l6722:	
  2538                           ;app_key.c: 260: }
  2539                           
  2540                           
  2541                           ;app_key.c: 261: else if (water_work_state == WATER_WORK_STATE_POWEROFF || app_charge.fl
      +                          ag_remind_delay_10s || water_work_state == WATER_WORK_STATE_MODE_LED)
  2542  039B  086C               	movf	_water_work_state,w	;volatile
  2543  039C  1683               	bsf	3,5	;RP0=1, select bank1
  2544  039D  1903               	btfsc	3,2
  2545  039E  2BA8               	goto	L3
  2546  039F  0822               	movf	(_app_charge^(0+128)+2),w
  2547  03A0  1D03               	btfss	3,2
  2548  03A1  2BA7               	goto	l6728
  2549  03A2  3003               	movlw	3
  2550  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  2551  03A4  066C               	xorwf	_water_work_state,w	;volatile
  2552  03A5  1D03               	btfss	3,2
  2553  03A6  2BAD               	goto	l6736
  2554  03A7                     l6728:	
  2555                           
  2556                           ;app_key.c: 262: {
  2557                           ;app_key.c: 263: app_charge.flag_remind_delay_10s = 0;
  2558  03A7  1683               	bsf	3,5	;RP0=1, select bank1
  2559  03A8                     L3:	
  2560  03A8  01A2               	clrf	(_app_charge^(0+128)+2)
  2561                           
  2562                           ;app_key.c: 264: app_led_water_mode_set();
  2563  03A9  2454               	fcall	_app_led_water_mode_set
  2564                           
  2565                           ;app_key.c: 265: water_motor();
  2566  03AA  269A               	fcall	_water_motor
  2567                           
  2568                           ;app_key.c: 266: app_process_set_water_state(WATER_WORK_STATE_WORKING);
  2569  03AB  3001               	movlw	1
  2570  03AC                     L1:	
  2571  03AC  27F0               	fcall	_app_process_set_water_state
  2572  03AD                     l6736:	
  2573                           
  2574                           ;app_key.c: 267: }
  2575                           ;app_key.c: 268: key_water_pwr_type = KEY_TYPE_IDLE;
  2576  03AD  01CB               	clrf	_key_water_pwr_type
  2577                           
  2578                           ;app_key.c: 269: break;
  2579  03AE  2BB4               	goto	l6742
  2580  03AF                     l6740:	
  2581  03AF  084B               	movf	_key_water_pwr_type,w
  2582                           
  2583                           ; Switch size 1, requested type "space"
  2584                           ; Number of cases is 1, Range of values is 5 to 5
  2585                           ; switch strategies available:
  2586                           ; Name         Instructions Cycles
  2587                           ; simple_byte            4     3 (average)
  2588                           ; direct_byte           10     9 (fixed)
  2589                           ; jumptable            263     9 (fixed)
  2590                           ;	Chosen strategy is simple_byte
  2591  03B0  3A05               	xorlw	5	; case 5
  2592  03B1  1903               	skipnz
  2593  03B2  2B90               	goto	l6710
  2594  03B3  2BB4               	goto	l6742
  2595  03B4                     l6742:	
  2596                           
  2597                           ;app_key.c: 274: key_water_pwr_type = KEY_TYPE_IDLE;
  2598  03B4  01CB               	clrf	_key_water_pwr_type
  2599                           
  2600                           ;app_key.c: 276: switch (key_water_mode_type)
  2601  03B5  2BCB               	goto	l6760
  2602  03B6                     l6744:	
  2603                           
  2604                           ;app_key.c: 279: if (water_work_state == WATER_WORK_STATE_WORKING)
  2605  03B6  0B6C               	decfsz	_water_work_state,w	;volatile
  2606  03B7  2BBC               	goto	l6748
  2607                           
  2608                           ;app_key.c: 280: {
  2609                           ;app_key.c: 281: app_process_set_water_mode_next();
  2610  03B8  27C2               	fcall	_app_process_set_water_mode_next
  2611                           
  2612                           ;app_key.c: 282: app_led_water_mode_set();
  2613  03B9  2454               	fcall	_app_led_water_mode_set
  2614                           
  2615                           ;app_key.c: 283: water_motor();
  2616  03BA  269A               	fcall	_water_motor
  2617                           
  2618                           ;app_key.c: 284: }
  2619  03BB  2BC9               	goto	l6756
  2620  03BC                     l6748:	
  2621                           
  2622                           ;app_key.c: 285: else if (water_work_state == WATER_WORK_STATE_POWEROFF)
  2623  03BC  086C               	movf	_water_work_state,w	;volatile
  2624                           
  2625                           ;app_key.c: 286: {
  2626                           ;app_key.c: 287: app_process_set_water_state(WATER_WORK_STATE_MODE_LED);
  2627  03BD  3003               	movlw	3
  2628  03BE  1D03               	btfss	3,2
  2629  03BF  2BC2               	goto	L4
  2630  03C0  27F0               	fcall	_app_process_set_water_state
  2631  03C1  2BC8               	goto	L2
  2632  03C2                     L4:	
  2633                           ;app_key.c: 290: else if (water_work_state == WATER_WORK_STATE_MODE_LED)
  2634                           
  2635                           ;app_key.c: 289: }
  2636                           
  2637                           ;app_key.c: 288: app_led_water_mode_set();
  2638                           
  2639  03C2  066C               	xorwf	_water_work_state,w	;volatile
  2640  03C3  1D03               	btfss	3,2
  2641  03C4  2BC9               	goto	l6756
  2642                           
  2643                           ;app_key.c: 291: {
  2644                           ;app_key.c: 292: app_process_set_water_state(WATER_WORK_STATE_MODE_LED);
  2645  03C5  3003               	movlw	3
  2646  03C6  27F0               	fcall	_app_process_set_water_state
  2647                           
  2648                           ;app_key.c: 293: app_process_set_water_mode_next();
  2649  03C7  27C2               	fcall	_app_process_set_water_mode_next
  2650  03C8                     L2:	
  2651                           
  2652                           ;app_key.c: 294: app_led_water_mode_set();
  2653  03C8  2454               	fcall	_app_led_water_mode_set
  2654  03C9                     l6756:	
  2655                           
  2656                           ;app_key.c: 295: }
  2657                           ;app_key.c: 296: key_water_mode_type = KEY_TYPE_IDLE;
  2658  03C9  01CA               	clrf	_key_water_mode_type
  2659                           
  2660                           ;app_key.c: 297: break;
  2661  03CA  2BD3               	goto	l6762
  2662  03CB                     l6760:	
  2663  03CB  084A               	movf	_key_water_mode_type,w
  2664                           
  2665                           ; Switch size 1, requested type "space"
  2666                           ; Number of cases is 2, Range of values is 2 to 5
  2667                           ; switch strategies available:
  2668                           ; Name         Instructions Cycles
  2669                           ; simple_byte            7     4 (average)
  2670                           ; direct_byte           13     9 (fixed)
  2671                           ; jumptable            263     9 (fixed)
  2672                           ;	Chosen strategy is simple_byte
  2673  03CC  3A02               	xorlw	2	; case 2
  2674  03CD  1903               	skipnz
  2675  03CE  2BD3               	goto	l6762
  2676  03CF  3A07               	xorlw	7	; case 5
  2677  03D0  1903               	skipnz
  2678  03D1  2BB6               	goto	l6744
  2679  03D2  2BD3               	goto	l6762
  2680  03D3                     l6762:	
  2681                           
  2682                           ;app_key.c: 305: key_water_mode_type = KEY_TYPE_IDLE;
  2683  03D3  01CA               	clrf	_key_water_mode_type
  2684  03D4  0008               	return
  2685  03D5                     __end_of_handle_key_water:	
  2686                           
  2687                           	psect	text18
  2688  069A                     __ptext18:	
  2689 ;; *************** function _water_motor *****************
  2690 ;; Defined at:
  2691 ;;		line 23 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_water_process.
      +c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;		None
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;		None
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg, status,2, status,0
  2700 ;; Tracked objects:
  2701 ;;		On entry : 100/0
  2702 ;;		On exit  : 100/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMMON   BANK0   BANK1
  2705 ;;      Params:         0       0       0
  2706 ;;      Locals:         0       0       0
  2707 ;;      Temps:          0       0       0
  2708 ;;      Totals:         0       0       0
  2709 ;;Total ram usage:        0 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    3
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_handle_key_water
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           
  2720                           ;psect for function _water_motor
  2721  069A                     _water_motor:	
  2722                           
  2723                           ;app_water_process.c: 25: if (water_work_mode.water_mode == WATER_WORK_MODE_ONE)
  2724                           
  2725                           ;incstack = 0
  2726                           ; Regs used in _water_motor: [wreg+status,2+status,0]
  2727  069A  0B61               	decfsz	_water_work_mode,w
  2728  069B  2E9E               	goto	l6354
  2729                           
  2730                           ;app_water_process.c: 26: {
  2731                           ;app_water_process.c: 28: MotorWaterDuty=36;
  2732  069C  3024               	movlw	36
  2733  069D  00BC               	movwf	_MotorWaterDuty
  2734  069E                     l6354:	
  2735                           
  2736                           ;app_water_process.c: 29: }
  2737                           ;app_water_process.c: 30: if (water_work_mode.water_mode == WATER_WORK_MODE_TWO)
  2738  069E  3002               	movlw	2
  2739  069F  0661               	xorwf	_water_work_mode,w
  2740  06A0  1D03               	btfss	3,2
  2741  06A1  2EA4               	goto	l6358
  2742                           
  2743                           ;app_water_process.c: 31: {
  2744                           ;app_water_process.c: 33: MotorWaterDuty=51;
  2745  06A2  3033               	movlw	51
  2746  06A3  00BC               	movwf	_MotorWaterDuty
  2747  06A4                     l6358:	
  2748                           
  2749                           ;app_water_process.c: 34: }
  2750                           ;app_water_process.c: 35: if (water_work_mode.water_mode == WATER_WORK_MODE_THREE)
  2751  06A4  3003               	movlw	3
  2752  06A5  0661               	xorwf	_water_work_mode,w
  2753  06A6  1D03               	btfss	3,2
  2754  06A7  2EAA               	goto	l6362
  2755                           
  2756                           ;app_water_process.c: 36: {
  2757                           ;app_water_process.c: 38: MotorWaterDuty=66;
  2758  06A8  3042               	movlw	66
  2759  06A9  00BC               	movwf	_MotorWaterDuty
  2760  06AA                     l6362:	
  2761                           
  2762                           ;app_water_process.c: 39: }
  2763                           ;app_water_process.c: 40: if (water_work_mode.water_mode == WATER_WORK_MODE_FOUR)
  2764  06AA  3004               	movlw	4
  2765  06AB  0661               	xorwf	_water_work_mode,w
  2766  06AC  1D03               	btfss	3,2
  2767  06AD  2EB0               	goto	l6366
  2768                           
  2769                           ;app_water_process.c: 41: {
  2770                           ;app_water_process.c: 43: MotorWaterDuty=81;
  2771  06AE  3051               	movlw	81
  2772  06AF  00BC               	movwf	_MotorWaterDuty
  2773  06B0                     l6366:	
  2774                           
  2775                           ;app_water_process.c: 44: }
  2776                           ;app_water_process.c: 45: if (water_work_mode.water_mode == WATER_WORK_MODE_FIVE)
  2777  06B0  3005               	movlw	5
  2778  06B1  0661               	xorwf	_water_work_mode,w
  2779  06B2  1D03               	btfss	3,2
  2780  06B3  2EB6               	goto	l4811
  2781                           
  2782                           ;app_water_process.c: 46: {
  2783                           ;app_water_process.c: 48: MotorWaterDuty=96;
  2784  06B4  3060               	movlw	96
  2785  06B5  00BC               	movwf	_MotorWaterDuty
  2786  06B6                     l4811:	
  2787                           
  2788                           ;app_water_process.c: 49: }
  2789                           ;app_water_process.c: 50: water_work_mode.water_mode_out_put = water_work_mode.water_mod
      +                          e;
  2790  06B6  0861               	movf	_water_work_mode,w
  2791  06B7  00E2               	movwf	_water_work_mode+1
  2792  06B8  0008               	return
  2793  06B9                     __end_of_water_motor:	
  2794                           
  2795                           	psect	text19
  2796  07C2                     __ptext19:	
  2797 ;; *************** function _app_process_set_water_mode_next *****************
  2798 ;; Defined at:
  2799 ;;		line 59 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_water_process.
      +c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;		None
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;		None
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  1    wreg      void 
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0
  2808 ;; Tracked objects:
  2809 ;;		On entry : 100/0
  2810 ;;		On exit  : 100/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMMON   BANK0   BANK1
  2813 ;;      Params:         0       0       0
  2814 ;;      Locals:         0       0       0
  2815 ;;      Temps:          0       0       0
  2816 ;;      Totals:         0       0       0
  2817 ;;Total ram usage:        0 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    3
  2820 ;; This function calls:
  2821 ;;		Nothing
  2822 ;; This function is called by:
  2823 ;;		_handle_key_water
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           
  2828                           ;psect for function _app_process_set_water_mode_next
  2829  07C2                     _app_process_set_water_mode_next:	
  2830  07C2  3006               	movlw	6
  2831                           
  2832                           ;app_water_process.c: 61: water_work_mode.water_mode++;
  2833                           
  2834                           ;incstack = 0
  2835                           ; Regs used in _app_process_set_water_mode_next: [wreg+status,2+status,0]
  2836  07C3  0AE1               	incf	_water_work_mode,f
  2837                           
  2838                           ;app_water_process.c: 62: if (water_work_mode.water_mode > WATER_WORK_MODE_FIVE)
  2839  07C4  0261               	subwf	_water_work_mode,w
  2840  07C5  1C03               	skipc
  2841  07C6  0008               	return
  2842                           
  2843                           ;app_water_process.c: 63: {
  2844                           ;app_water_process.c: 64: water_work_mode.water_mode = WATER_WORK_MODE_ONE;
  2845  07C7  01E1               	clrf	_water_work_mode
  2846  07C8  0AE1               	incf	_water_work_mode,f
  2847  07C9  0008               	return
  2848  07CA                     __end_of_app_process_set_water_mode_next:	
  2849                           
  2850                           	psect	text20
  2851  0454                     __ptext20:	
  2852 ;; *************** function _app_led_water_mode_set *****************
  2853 ;; Defined at:
  2854 ;;		line 166 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_led.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;		None
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;		None
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2, status,0, pclath, cstack
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/100
  2865 ;;		On exit  : 100/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMMON   BANK0   BANK1
  2868 ;;      Params:         0       0       0
  2869 ;;      Locals:         0       0       0
  2870 ;;      Temps:          0       0       0
  2871 ;;      Totals:         0       0       0
  2872 ;;Total ram usage:        0 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    4
  2875 ;; This function calls:
  2876 ;;		_set_led_state
  2877 ;; This function is called by:
  2878 ;;		_handle_key_water
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           
  2883                           ;psect for function _app_led_water_mode_set
  2884  0454                     _app_led_water_mode_set:	
  2885                           
  2886                           ;app_led.c: 168: if (water_work_mode.water_mode == WATER_WORK_MODE_ONE)
  2887                           
  2888                           ;incstack = 0
  2889                           ; Regs used in _app_led_water_mode_set: [wreg+status,2+status,0+pclath+cstack]
  2890  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2891  0455  0B61               	decfsz	_water_work_mode,w
  2892  0456  2C5F               	goto	l6334
  2893                           
  2894                           ;app_led.c: 169: {
  2895                           ;app_led.c: 170: set_led_state(LED_INDEX_8, LED_STATE_ON);
  2896  0457  3080               	movlw	128
  2897  0458  248A               	fcall	PL2	;call to abstracted procedure
  2898  0459  2626               	fcall	_set_led_state
  2899                           
  2900                           ;app_led.c: 171: set_led_state(LED_INDEX_7 | LED_INDEX_6 | LED_INDEX_5 | LED_INDEX_4, LE
      +                          D_STATE_OFF);
  2901  045A  3078               	movlw	120
  2902  045B  00D3               	movwf	set_led_state@index
  2903  045C  01D4               	clrf	set_led_state@index+1
  2904  045D  01D5               	clrf	set_led_state@state
  2905  045E  2E26               	ljmp	l6232
  2906  045F                     l6334:	
  2907                           ;app_led.c: 172: }
  2908                           
  2909                           
  2910                           ;app_led.c: 173: else if (water_work_mode.water_mode == WATER_WORK_MODE_TWO)
  2911  045F  3002               	movlw	2
  2912  0460  0661               	xorwf	_water_work_mode,w
  2913  0461  1D03               	btfss	3,2
  2914  0462  2C6B               	goto	l6338
  2915                           
  2916                           ;app_led.c: 174: {
  2917                           ;app_led.c: 175: set_led_state(LED_INDEX_8 | LED_INDEX_7, LED_STATE_ON);
  2918  0463  30C0               	movlw	192
  2919  0464  248A               	fcall	PL2	;call to abstracted procedure
  2920  0465  2626               	fcall	_set_led_state
  2921                           
  2922                           ;app_led.c: 176: set_led_state(LED_INDEX_6 | LED_INDEX_5 | LED_INDEX_4, LED_STATE_OFF);
  2923  0466  3038               	movlw	56
  2924  0467  00D3               	movwf	set_led_state@index
  2925  0468  01D4               	clrf	set_led_state@index+1
  2926  0469  01D5               	clrf	set_led_state@state
  2927  046A  2E26               	ljmp	l6232
  2928  046B                     l6338:	
  2929                           ;app_led.c: 177: }
  2930                           
  2931                           
  2932                           ;app_led.c: 178: else if (water_work_mode.water_mode == WATER_WORK_MODE_THREE)
  2933  046B  3003               	movlw	3
  2934  046C  0661               	xorwf	_water_work_mode,w
  2935  046D  1D03               	btfss	3,2
  2936  046E  2C77               	goto	l6342
  2937                           
  2938                           ;app_led.c: 179: {
  2939                           ;app_led.c: 180: set_led_state(LED_INDEX_8 | LED_INDEX_7 | LED_INDEX_6, LED_STATE_ON);
  2940  046F  30E0               	movlw	224
  2941  0470  248A               	fcall	PL2	;call to abstracted procedure
  2942  0471  2626               	fcall	_set_led_state
  2943                           
  2944                           ;app_led.c: 181: set_led_state(LED_INDEX_5 | LED_INDEX_4, LED_STATE_OFF);
  2945  0472  3018               	movlw	24
  2946  0473  00D3               	movwf	set_led_state@index
  2947  0474  01D4               	clrf	set_led_state@index+1
  2948  0475  01D5               	clrf	set_led_state@state
  2949  0476  2E26               	ljmp	l6232
  2950  0477                     l6342:	
  2951                           ;app_led.c: 182: }
  2952                           
  2953                           
  2954                           ;app_led.c: 183: else if (water_work_mode.water_mode == WATER_WORK_MODE_FOUR)
  2955  0477  3004               	movlw	4
  2956  0478  0661               	xorwf	_water_work_mode,w
  2957  0479  1D03               	btfss	3,2
  2958  047A  2C83               	goto	l6346
  2959                           
  2960                           ;app_led.c: 184: {
  2961                           ;app_led.c: 185: set_led_state(LED_INDEX_8 | LED_INDEX_7 | LED_INDEX_6 | LED_INDEX_5, LE
      +                          D_STATE_ON);
  2962  047B  30F0               	movlw	240
  2963  047C  248A               	fcall	PL2	;call to abstracted procedure
  2964  047D  2626               	fcall	_set_led_state
  2965                           
  2966                           ;app_led.c: 186: set_led_state(LED_INDEX_4, LED_STATE_OFF);
  2967  047E  3008               	movlw	8
  2968  047F  00D3               	movwf	set_led_state@index
  2969  0480  01D4               	clrf	set_led_state@index+1
  2970  0481  01D5               	clrf	set_led_state@state
  2971  0482  2E26               	ljmp	l6232
  2972  0483                     l6346:	
  2973                           ;app_led.c: 187: }
  2974                           
  2975                           
  2976                           ;app_led.c: 188: else if (water_work_mode.water_mode == WATER_WORK_MODE_FIVE)
  2977  0483  3005               	movlw	5
  2978  0484  0661               	xorwf	_water_work_mode,w
  2979  0485  1D03               	btfss	3,2
  2980  0486  0008               	return
  2981                           
  2982                           ;app_led.c: 189: {
  2983                           ;app_led.c: 190: set_led_state(LED_INDEX_8 | LED_INDEX_7 | LED_INDEX_6 | LED_INDEX_5 | L
      +                          ED_INDEX_4, LED_STATE_ON);
  2984  0487  30F8               	movlw	248
  2985  0488  248A               	fcall	PL2	;call to abstracted procedure
  2986  0489  2E26               	ljmp	l6232
  2987  048A                     __end_of_app_led_water_mode_set:	
  2988  048A                     PL2:	
  2989  048A  00D3               	movwf	set_led_state@index
  2990  048B  01D4               	clrf	set_led_state@index+1
  2991  048C  01D5               	clrf	set_led_state@state
  2992  048D  0AD5               	incf	set_led_state@state,f
  2993  048E  0008               	return
  2994  048F                     __end_ofPL2:	
  2995                           
  2996                           	psect	text21
  2997  03D5                     __ptext21:	
  2998 ;; *************** function _handle_key_pwr *****************
  2999 ;; Defined at:
  3000 ;;		line 192 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_key.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;		None
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;		None
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      void 
  3007 ;; Registers used:
  3008 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 100/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMMON   BANK0   BANK1
  3014 ;;      Params:         0       0       0
  3015 ;;      Locals:         0       0       0
  3016 ;;      Temps:          0       0       0
  3017 ;;      Totals:         0       0       0
  3018 ;;Total ram usage:        0 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:    6
  3021 ;; This function calls:
  3022 ;;		_app_process_set_mode_init
  3023 ;;		_app_process_set_mode_next
  3024 ;;		_app_process_set_work_state
  3025 ;; This function is called by:
  3026 ;;		_app_process_key
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           
  3031                           ;psect for function _handle_key_pwr
  3032  03D5                     _handle_key_pwr:	
  3033                           
  3034                           ;app_key.c: 194: switch (key_brush_pwrtype)
  3035                           
  3036                           ;incstack = 0
  3037                           ; Regs used in _handle_key_pwr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3038  03D5  2C0C               	goto	l6704
  3039  03D6                     l6664:	
  3040                           
  3041                           ;app_key.c: 197: if (app_work_state == WORK_STATE_POWEROFF || app_charge.flag_remind_del
      +                          ay_10s)
  3042  03D6  086D               	movf	_app_work_state,w	;volatile
  3043  03D7  1683               	bsf	3,5	;RP0=1, select bank1
  3044  03D8  1903               	btfsc	3,2
  3045  03D9  2BDE               	goto	L5
  3046  03DA  0822               	movf	(_app_charge^(0+128)+2),w
  3047  03DB  1903               	btfsc	3,2
  3048  03DC  2BE3               	goto	l6674
  3049                           
  3050                           ;app_key.c: 198: {
  3051                           ;app_key.c: 199: app_charge.flag_remind_delay_10s = 0;
  3052  03DD  1683               	bsf	3,5	;RP0=1, select bank1
  3053  03DE                     L5:	
  3054  03DE  3001               	movlw	1
  3055  03DF  01A2               	clrf	(_app_charge^(0+128)+2)
  3056                           
  3057                           ;app_key.c: 200: app_process_set_work_state(WORK_STATE_WORKING);
  3058  03E0  27EB               	fcall	_app_process_set_work_state
  3059                           
  3060                           ;app_key.c: 201: app_process_set_mode_init();
  3061  03E1  2792               	fcall	_app_process_set_mode_init
  3062                           
  3063                           ;app_key.c: 202: }
  3064  03E2  2C15               	goto	l6706
  3065  03E3                     l6674:	
  3066                           
  3067                           ;app_key.c: 203: else if (app_work_state == WORK_STATE_WORKING)
  3068  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  3069  03E4  0B6D               	decfsz	_app_work_state,w	;volatile
  3070  03E5  2C15               	goto	l6706
  3071                           
  3072                           ;app_key.c: 204: {
  3073                           ;app_key.c: 205: if (app_timer.work_updown_count)
  3074  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  3075  03E7  0837               	movf	((_app_timer+3)^(0+128)+2),w
  3076  03E8  0436               	iorwf	((_app_timer+2)^(0+128)+2),w
  3077  03E9  0435               	iorwf	((_app_timer+1)^(0+128)+2),w
  3078  03EA  0434               	iorwf	(_app_timer^(0+128)+2),w
  3079  03EB  1903               	skipnz
  3080  03EC  2BEF               	goto	l6680
  3081                           
  3082                           ;app_key.c: 206: {
  3083                           ;app_key.c: 207: app_process_set_mode_next();
  3084  03ED  2718               	fcall	_app_process_set_mode_next
  3085                           
  3086                           ;app_key.c: 208: }
  3087  03EE  2C15               	goto	l6706
  3088  03EF                     l6680:	
  3089                           
  3090                           ;app_key.c: 209: else
  3091                           ;app_key.c: 210: {
  3092                           ;app_key.c: 211: if (water_work_state == WATER_WORK_STATE_POWEROFF)
  3093  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  3094  03F0  086C               	movf	_water_work_state,w	;volatile
  3095  03F1  1D03               	btfss	3,2
  3096  03F2  2BFA               	goto	l6688
  3097                           
  3098                           ;app_key.c: 212: {
  3099                           ;app_key.c: 213: if (app_charge.Remind)
  3100  03F3  1683               	bsf	3,5	;RP0=1, select bank1
  3101  03F4  1E20               	btfss	_app_charge^(0+128),4
  3102  03F5  2BFA               	goto	l6688
  3103                           
  3104                           ;app_key.c: 214: {
  3105                           ;app_key.c: 215: app_charge.flag_remind_delay_10s = 1;
  3106  03F6  01A2               	clrf	(_app_charge^(0+128)+2)
  3107  03F7  0AA2               	incf	(_app_charge^(0+128)+2),f
  3108                           
  3109                           ;app_key.c: 216: app_charge.remind_delay_10s_timer = 0;
  3110  03F8  01A3               	clrf	(_app_charge^(0+128)+3)
  3111  03F9  01A4               	clrf	((_app_charge+1)^(0+128)+3)
  3112  03FA                     l6688:	
  3113                           
  3114                           ;app_key.c: 217: }
  3115                           ;app_key.c: 218: }
  3116                           ;app_key.c: 219: app_process_set_work_state(WORK_STATE_POWEROFF);
  3117  03FA  3000               	movlw	0
  3118  03FB  27EB               	fcall	_app_process_set_work_state
  3119  03FC  2C15               	goto	l6706
  3120  03FD                     l6690:	
  3121                           
  3122                           ;app_key.c: 225: if (app_work_state == WORK_STATE_WORKING)
  3123  03FD  0B6D               	decfsz	_app_work_state,w	;volatile
  3124  03FE  2C15               	goto	l6706
  3125                           
  3126                           ;app_key.c: 226: {
  3127                           ;app_key.c: 227: if (water_work_state == WATER_WORK_STATE_POWEROFF)
  3128  03FF  086C               	movf	_water_work_state,w	;volatile
  3129  0400  1D03               	btfss	3,2
  3130  0401  2C09               	goto	l6700
  3131                           
  3132                           ;app_key.c: 228: {
  3133                           ;app_key.c: 229: if (app_charge.Remind)
  3134  0402  1683               	bsf	3,5	;RP0=1, select bank1
  3135  0403  1E20               	btfss	_app_charge^(0+128),4
  3136  0404  2C09               	goto	l6700
  3137                           
  3138                           ;app_key.c: 230: {
  3139                           ;app_key.c: 231: app_charge.flag_remind_delay_10s = 1;
  3140  0405  01A2               	clrf	(_app_charge^(0+128)+2)
  3141  0406  0AA2               	incf	(_app_charge^(0+128)+2),f
  3142                           
  3143                           ;app_key.c: 232: app_charge.remind_delay_10s_timer = 0;
  3144  0407  01A3               	clrf	(_app_charge^(0+128)+3)
  3145  0408  01A4               	clrf	((_app_charge+1)^(0+128)+3)
  3146  0409                     l6700:	
  3147                           
  3148                           ;app_key.c: 233: }
  3149                           ;app_key.c: 234: }
  3150                           ;app_key.c: 235: app_process_set_work_state(WORK_STATE_POWEROFF);
  3151  0409  3000               	movlw	0
  3152  040A  27EB               	fcall	_app_process_set_work_state
  3153  040B  2C15               	goto	l6706
  3154  040C                     l6704:	
  3155  040C  1283               	bcf	3,5	;RP0=0, select bank0
  3156  040D  084C               	movf	_key_brush_pwrtype,w
  3157                           
  3158                           ; Switch size 1, requested type "space"
  3159                           ; Number of cases is 2, Range of values is 2 to 5
  3160                           ; switch strategies available:
  3161                           ; Name         Instructions Cycles
  3162                           ; simple_byte            7     4 (average)
  3163                           ; direct_byte           13     9 (fixed)
  3164                           ; jumptable            263     9 (fixed)
  3165                           ;	Chosen strategy is simple_byte
  3166  040E  3A02               	xorlw	2	; case 2
  3167  040F  1903               	skipnz
  3168  0410  2BFD               	goto	l6690
  3169  0411  3A07               	xorlw	7	; case 5
  3170  0412  1903               	skipnz
  3171  0413  2BD6               	goto	l6664
  3172  0414  2C15               	goto	l6706
  3173  0415                     l6706:	
  3174                           
  3175                           ;app_key.c: 241: key_brush_pwrtype = KEY_TYPE_IDLE;
  3176  0415  01CC               	clrf	_key_brush_pwrtype
  3177  0416  0008               	return
  3178  0417                     __end_of_handle_key_pwr:	
  3179                           
  3180                           	psect	text22
  3181  0718                     __ptext22:	
  3182 ;; *************** function _app_process_set_mode_next *****************
  3183 ;; Defined at:
  3184 ;;		line 42 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_motor.c"
  3185 ;; Parameters:    Size  Location     Type
  3186 ;;		None
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;		None
  3189 ;; Return value:  Size  Location     Type
  3190 ;;                  1    wreg      void 
  3191 ;; Registers used:
  3192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3193 ;; Tracked objects:
  3194 ;;		On entry : 100/100
  3195 ;;		On exit  : 100/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMMON   BANK0   BANK1
  3198 ;;      Params:         0       0       0
  3199 ;;      Locals:         0       0       0
  3200 ;;      Temps:          0       0       0
  3201 ;;      Totals:         0       0       0
  3202 ;;Total ram usage:        0 bytes
  3203 ;; Hardware stack levels used:    1
  3204 ;; Hardware stack levels required when called:    5
  3205 ;; This function calls:
  3206 ;;		_app_led_mode_set
  3207 ;;		_app_process_motor_duty
  3208 ;; This function is called by:
  3209 ;;		_handle_key_pwr
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           
  3214                           ;psect for function _app_process_set_mode_next
  3215  0718                     _app_process_set_mode_next:	
  3216  0718  3004               	movlw	4
  3217                           
  3218                           ;app_motor.c: 44: work_mode.mode++;
  3219                           
  3220                           ;incstack = 0
  3221                           ; Regs used in _app_process_set_mode_next: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3222  0719  1283               	bcf	3,5	;RP0=0, select bank0
  3223  071A  0AE6               	incf	_work_mode,f
  3224                           
  3225                           ;app_motor.c: 45: if (work_mode.mode > WORK_MODE_THREE)
  3226  071B  0266               	subwf	_work_mode,w
  3227  071C  1C03               	skipc
  3228  071D  2F20               	goto	l6324
  3229                           
  3230                           ;app_motor.c: 46: {
  3231                           ;app_motor.c: 47: work_mode.mode = WORK_MODE_ONE;
  3232  071E  01E6               	clrf	_work_mode
  3233  071F  0AE6               	incf	_work_mode,f
  3234  0720                     l6324:	
  3235                           
  3236                           ;app_motor.c: 48: }
  3237                           ;app_motor.c: 49: app_timer.work_updown_count = (100UL * (5));
  3238  0720  3001               	movlw	1
  3239  0721  1683               	bsf	3,5	;RP0=1, select bank1
  3240  0722  01B7               	clrf	((_app_timer+3)^(0+128)+2)
  3241  0723  01B6               	clrf	((_app_timer+2)^(0+128)+2)
  3242  0724  00B5               	movwf	((_app_timer+1)^(0+128)+2)
  3243  0725  30F4               	movlw	244
  3244  0726  00B4               	movwf	(_app_timer^(0+128)+2)
  3245                           
  3246                           ;app_motor.c: 50: app_led_mode_set();
  3247  0727  25FA               	fcall	_app_led_mode_set
  3248                           
  3249                           ;app_motor.c: 51: app_process_motor_duty();
  3250  0728  2AF6               	ljmp	l6270
  3251  0729                     __end_of_app_process_set_mode_next:	
  3252                           
  3253                           	psect	text23
  3254  0792                     __ptext23:	
  3255 ;; *************** function _app_process_set_mode_init *****************
  3256 ;; Defined at:
  3257 ;;		line 34 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_motor.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;		None
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;		None
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 100/0
  3268 ;;		On exit  : 100/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMMON   BANK0   BANK1
  3271 ;;      Params:         0       0       0
  3272 ;;      Locals:         0       0       0
  3273 ;;      Temps:          0       0       0
  3274 ;;      Totals:         0       0       0
  3275 ;;Total ram usage:        0 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    5
  3278 ;; This function calls:
  3279 ;;		_app_led_mode_set
  3280 ;;		_app_process_motor_duty
  3281 ;; This function is called by:
  3282 ;;		_handle_key_pwr
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           
  3287                           ;psect for function _app_process_set_mode_init
  3288  0792                     _app_process_set_mode_init:	
  3289                           
  3290                           ;app_motor.c: 36: work_mode.mode_out_put = work_mode.mode;
  3291                           
  3292                           ;incstack = 0
  3293                           ; Regs used in _app_process_set_mode_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3294  0792  0866               	movf	_work_mode,w
  3295  0793  00E7               	movwf	_work_mode+1
  3296                           
  3297                           ;app_motor.c: 37: app_timer.work_updown_count = (100UL * (5));
  3298  0794  3001               	movlw	1
  3299  0795  1683               	bsf	3,5	;RP0=1, select bank1
  3300  0796  01B7               	clrf	((_app_timer+3)^(0+128)+2)
  3301  0797  01B6               	clrf	((_app_timer+2)^(0+128)+2)
  3302  0798  00B5               	movwf	((_app_timer+1)^(0+128)+2)
  3303  0799  30F4               	movlw	244
  3304  079A  00B4               	movwf	(_app_timer^(0+128)+2)
  3305                           
  3306                           ;app_motor.c: 38: app_led_mode_set();
  3307  079B  25FA               	fcall	_app_led_mode_set
  3308                           
  3309                           ;app_motor.c: 39: app_process_motor_duty();
  3310  079C  2AF6               	ljmp	l6270
  3311  079D                     __end_of_app_process_set_mode_init:	
  3312                           
  3313                           	psect	text24
  3314  02F6                     __ptext24:	
  3315 ;; *************** function _app_process_motor_duty *****************
  3316 ;; Defined at:
  3317 ;;		line 54 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_motor.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;		None
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      void 
  3324 ;; Registers used:
  3325 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3326 ;; Tracked objects:
  3327 ;;		On entry : 100/0
  3328 ;;		On exit  : 100/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1
  3331 ;;      Params:         0       0       0
  3332 ;;      Locals:         0       0       0
  3333 ;;      Temps:          0       6       0
  3334 ;;      Totals:         0       6       0
  3335 ;;Total ram usage:        6 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    3
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_app_process_set_mode_init
  3342 ;;		_app_process_set_mode_next
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           
  3347                           ;psect for function _app_process_motor_duty
  3348  02F6                     _app_process_motor_duty:	
  3349  02F6                     l6270:	
  3350                           ;incstack = 0
  3351                           ; Regs used in _app_process_motor_duty: [wreg-fsr0h+status,2+status,0]
  3352                           
  3353                           
  3354                           ;app_motor.c: 56: switch (work_mode.mode)
  3355  02F6  2B0B               	goto	l6280
  3356  02F7                     l6272:	
  3357                           
  3358                           ;app_motor.c: 59: MOTOR_InitStruct.Period = 127;
  3359  02F7  307F               	movlw	127
  3360  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  3361  02F9  00BC               	movwf	_MOTOR_InitStruct^(0+128)
  3362                           
  3363                           ;app_motor.c: 60: MOTOR_InitStruct.DutyLow = 102 / 2;
  3364  02FA  3033               	movlw	51
  3365  02FB  2B05               	goto	L7
  3366  02FC                     l6274:	
  3367                           ;app_motor.c: 63: break;
  3368                           
  3369                           ;app_motor.c: 62: work_mode.mode_out_put = work_mode.mode;
  3370                           
  3371                           ;app_motor.c: 61: MOTOR_InitStruct.DutyHigh = 102 / 2;
  3372                           
  3373                           
  3374                           ;app_motor.c: 65: MOTOR_InitStruct.Period = 98;
  3375  02FC  3062               	movlw	98
  3376  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  3377  02FE  00BC               	movwf	_MOTOR_InitStruct^(0+128)
  3378                           
  3379                           ;app_motor.c: 66: MOTOR_InitStruct.DutyLow = 78 / 2;
  3380  02FF  3027               	movlw	39
  3381  0300  2B05               	goto	L7
  3382  0301                     l6276:	
  3383                           ;app_motor.c: 69: break;
  3384                           
  3385                           ;app_motor.c: 68: work_mode.mode_out_put = work_mode.mode;
  3386                           
  3387                           ;app_motor.c: 67: MOTOR_InitStruct.DutyHigh = 78 / 2;
  3388                           
  3389                           
  3390                           ;app_motor.c: 71: MOTOR_InitStruct.Period = 75;
  3391  0301  304B               	movlw	75
  3392  0302  1683               	bsf	3,5	;RP0=1, select bank1
  3393  0303  00BC               	movwf	_MOTOR_InitStruct^(0+128)
  3394                           
  3395                           ;app_motor.c: 72: MOTOR_InitStruct.DutyLow = 60 /2;
  3396  0304  301E               	movlw	30
  3397  0305                     L7:	
  3398  0305  00BD               	movwf	(_MOTOR_InitStruct^(0+128)+1)
  3399                           
  3400                           ;app_motor.c: 73: MOTOR_InitStruct.DutyHigh = 60 /2;
  3401  0306  00BE               	movwf	(_MOTOR_InitStruct^(0+128)+2)
  3402                           
  3403                           ;app_motor.c: 74: work_mode.mode_out_put = work_mode.mode;
  3404  0307  1283               	bcf	3,5	;RP0=0, select bank0
  3405  0308  0866               	movf	_work_mode,w
  3406  0309  00E7               	movwf	_work_mode+1
  3407                           
  3408                           ;app_motor.c: 75: break;
  3409  030A  2B16               	goto	l6282
  3410  030B                     l6280:	
  3411  030B  0866               	movf	_work_mode,w
  3412                           
  3413                           ; Switch size 1, requested type "space"
  3414                           ; Number of cases is 3, Range of values is 1 to 3
  3415                           ; switch strategies available:
  3416                           ; Name         Instructions Cycles
  3417                           ; simple_byte           10     6 (average)
  3418                           ; direct_byte           12     9 (fixed)
  3419                           ; jumptable            263     9 (fixed)
  3420                           ;	Chosen strategy is simple_byte
  3421  030C  3A01               	xorlw	1	; case 1
  3422  030D  1903               	skipnz
  3423  030E  2AF7               	goto	l6272
  3424  030F  3A03               	xorlw	3	; case 2
  3425  0310  1903               	skipnz
  3426  0311  2AFC               	goto	l6274
  3427  0312  3A01               	xorlw	1	; case 3
  3428  0313  1903               	skipnz
  3429  0314  2B01               	goto	l6276
  3430  0315  2B16               	goto	l6282
  3431  0316                     l6282:	
  3432                           
  3433                           ;app_motor.c: 80: low_a = (MOTOR_InitStruct.DutyLow);
  3434  0316  1683               	bsf	3,5	;RP0=1, select bank1
  3435  0317  083D               	movf	(_MOTOR_InitStruct^(0+128)+1),w
  3436  0318  1283               	bcf	3,5	;RP0=0, select bank0
  3437  0319  00C3               	movwf	_low_a
  3438                           
  3439                           ;app_motor.c: 81: dead_area1 = (MOTOR_InitStruct.Period);
  3440  031A  1683               	bsf	3,5	;RP0=1, select bank1
  3441  031B  083C               	movf	_MOTOR_InitStruct^(0+128),w
  3442  031C  1283               	bcf	3,5	;RP0=0, select bank0
  3443  031D  00C2               	movwf	_dead_area1
  3444                           
  3445                           ;app_motor.c: 83: dead_area_b1 = MOTOR_InitStruct.DutyLow + (((MOTOR_InitStruct.Period -
      +                           MOTOR_InitStruct.DutyLow) - MOTOR_InitStruct.DutyHigh) >> 1);
  3446  031E  1683               	bsf	3,5	;RP0=1, select bank1
  3447  031F  083C               	movf	_MOTOR_InitStruct^(0+128),w
  3448  0320  1283               	bcf	3,5	;RP0=0, select bank0
  3449  0321  00D3               	movwf	??_app_process_motor_duty
  3450  0322  01D4               	clrf	??_app_process_motor_duty+1
  3451  0323  0854               	movf	??_app_process_motor_duty+1,w
  3452  0324  00D6               	movwf	??_app_process_motor_duty+3
  3453  0325  1683               	bsf	3,5	;RP0=1, select bank1
  3454  0326  083D               	movf	(_MOTOR_InitStruct^(0+128)+1),w
  3455  0327  1283               	bcf	3,5	;RP0=0, select bank0
  3456  0328  0253               	subwf	??_app_process_motor_duty,w
  3457  0329  00D5               	movwf	??_app_process_motor_duty+2
  3458  032A  1C03               	skipc
  3459  032B  03D6               	decf	??_app_process_motor_duty+3,f
  3460  032C  0856               	movf	??_app_process_motor_duty+3,w
  3461  032D  00D8               	movwf	??_app_process_motor_duty+5
  3462  032E  1683               	bsf	3,5	;RP0=1, select bank1
  3463  032F  083E               	movf	(_MOTOR_InitStruct^(0+128)+2),w
  3464  0330  1283               	bcf	3,5	;RP0=0, select bank0
  3465  0331  0255               	subwf	??_app_process_motor_duty+2,w
  3466  0332  00D7               	movwf	??_app_process_motor_duty+4
  3467  0333  1C03               	skipc
  3468  0334  03D8               	decf	??_app_process_motor_duty+5,f
  3469  0335  0D58               	rlf	??_app_process_motor_duty+5,w
  3470  0336  0CD8               	rrf	??_app_process_motor_duty+5,f
  3471  0337  0CD7               	rrf	??_app_process_motor_duty+4,f
  3472  0338  1683               	bsf	3,5	;RP0=1, select bank1
  3473  0339  083D               	movf	(_MOTOR_InitStruct^(0+128)+1),w
  3474  033A  1283               	bcf	3,5	;RP0=0, select bank0
  3475  033B  0757               	addwf	??_app_process_motor_duty+4,w
  3476  033C  00C0               	movwf	_dead_area_b1
  3477                           
  3478                           ;app_motor.c: 84: low_b = MOTOR_InitStruct.DutyHigh + dead_area_b1;
  3479  033D  1683               	bsf	3,5	;RP0=1, select bank1
  3480  033E  073E               	addwf	(_MOTOR_InitStruct^(0+128)+2),w
  3481  033F  1283               	bcf	3,5	;RP0=0, select bank0
  3482  0340  00C1               	movwf	_low_b
  3483                           
  3484                           ;app_motor.c: 85: dead_area_b2 = (MOTOR_InitStruct.Period);
  3485  0341  1683               	bsf	3,5	;RP0=1, select bank1
  3486  0342  083C               	movf	_MOTOR_InitStruct^(0+128),w
  3487  0343  1283               	bcf	3,5	;RP0=0, select bank0
  3488  0344  00BF               	movwf	_dead_area_b2
  3489  0345  0008               	return
  3490  0346                     __end_of_app_process_motor_duty:	
  3491                           
  3492                           	psect	text25
  3493  05FA                     __ptext25:	
  3494 ;; *************** function _app_led_mode_set *****************
  3495 ;; Defined at:
  3496 ;;		line 147 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_led.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;		None
  3501 ;; Return value:  Size  Location     Type
  3502 ;;                  1    wreg      void 
  3503 ;; Registers used:
  3504 ;;		wreg, status,2, status,0, pclath, cstack
  3505 ;; Tracked objects:
  3506 ;;		On entry : 100/100
  3507 ;;		On exit  : 100/0
  3508 ;;		Unchanged: 0/0
  3509 ;; Data sizes:     COMMON   BANK0   BANK1
  3510 ;;      Params:         0       0       0
  3511 ;;      Locals:         0       0       0
  3512 ;;      Temps:          0       0       0
  3513 ;;      Totals:         0       0       0
  3514 ;;Total ram usage:        0 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; Hardware stack levels required when called:    4
  3517 ;; This function calls:
  3518 ;;		_set_led_state
  3519 ;; This function is called by:
  3520 ;;		_app_process_set_mode_init
  3521 ;;		_app_process_set_mode_next
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function _app_led_mode_set
  3527  05FA                     _app_led_mode_set:	
  3528                           
  3529                           ;app_led.c: 149: if (work_mode.mode == WORK_MODE_ONE)
  3530                           
  3531                           ;incstack = 0
  3532                           ; Regs used in _app_led_mode_set: [wreg+status,2+status,0+pclath+cstack]
  3533  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  3534  05FB  0B66               	decfsz	_work_mode,w
  3535  05FC  2E08               	goto	l6262
  3536                           
  3537                           ;app_led.c: 150: {
  3538                           ;app_led.c: 151: set_led_state(LED_INDEX_2 | LED_INDEX_3, LED_STATE_OFF);
  3539  05FD  3006               	movlw	6
  3540  05FE  00D3               	movwf	set_led_state@index
  3541  05FF  01D4               	clrf	set_led_state@index+1
  3542  0600  01D5               	clrf	set_led_state@state
  3543  0601  2626               	fcall	_set_led_state
  3544                           
  3545                           ;app_led.c: 152: set_led_state(LED_INDEX_1, LED_STATE_ON);
  3546  0602  01D3               	clrf	set_led_state@index
  3547  0603  0AD3               	incf	set_led_state@index,f
  3548  0604  01D4               	clrf	set_led_state@index+1
  3549  0605  01D5               	clrf	set_led_state@state
  3550  0606  0AD5               	incf	set_led_state@state,f
  3551  0607  2E26               	ljmp	l6232
  3552  0608                     l6262:	
  3553                           ;app_led.c: 153: }
  3554                           
  3555                           
  3556                           ;app_led.c: 154: else if (work_mode.mode == WORK_MODE_TWO)
  3557  0608  3002               	movlw	2
  3558  0609  0666               	xorwf	_work_mode,w
  3559  060A  1D03               	btfss	3,2
  3560  060B  2E17               	goto	l6266
  3561                           
  3562                           ;app_led.c: 155: {
  3563                           ;app_led.c: 156: set_led_state(LED_INDEX_1 | LED_INDEX_3, LED_STATE_OFF);
  3564  060C  3005               	movlw	5
  3565  060D  00D3               	movwf	set_led_state@index
  3566  060E  01D4               	clrf	set_led_state@index+1
  3567  060F  01D5               	clrf	set_led_state@state
  3568  0610  2626               	fcall	_set_led_state
  3569                           
  3570                           ;app_led.c: 157: set_led_state(LED_INDEX_2, LED_STATE_ON);
  3571  0611  3002               	movlw	2
  3572  0612  00D3               	movwf	set_led_state@index
  3573  0613  01D4               	clrf	set_led_state@index+1
  3574  0614  01D5               	clrf	set_led_state@state
  3575  0615  0AD5               	incf	set_led_state@state,f
  3576  0616  2E26               	ljmp	l6232
  3577  0617                     l6266:	
  3578                           ;app_led.c: 158: }
  3579                           
  3580                           
  3581                           ;app_led.c: 159: else if (work_mode.mode == WORK_MODE_THREE)
  3582  0617  3003               	movlw	3
  3583  0618  0666               	xorwf	_work_mode,w
  3584  0619  1D03               	btfss	3,2
  3585  061A  0008               	return
  3586                           
  3587                           ;app_led.c: 160: {
  3588                           ;app_led.c: 161: set_led_state(LED_INDEX_1 | LED_INDEX_2, LED_STATE_OFF);
  3589  061B  3003               	movlw	3
  3590  061C  00D3               	movwf	set_led_state@index
  3591  061D  01D4               	clrf	set_led_state@index+1
  3592  061E  01D5               	clrf	set_led_state@state
  3593  061F  2626               	fcall	_set_led_state
  3594                           
  3595                           ;app_led.c: 162: set_led_state(LED_INDEX_3, LED_STATE_ON);
  3596  0620  3004               	movlw	4
  3597  0621  00D3               	movwf	set_led_state@index
  3598  0622  01D4               	clrf	set_led_state@index+1
  3599  0623  01D5               	clrf	set_led_state@state
  3600  0624  0AD5               	incf	set_led_state@state,f
  3601  0625  2E26               	ljmp	l6232
  3602  0626                     __end_of_app_led_mode_set:	
  3603                           
  3604                           	psect	text26
  3605  06D5                     __ptext26:	
  3606 ;; *************** function _charge_or_lowBat_check *****************
  3607 ;; Defined at:
  3608 ;;		line 141 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_key.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;		None
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;		None
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      void 
  3615 ;; Registers used:
  3616 ;;		wreg, status,2, status,0
  3617 ;; Tracked objects:
  3618 ;;		On entry : 100/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMMON   BANK0   BANK1
  3622 ;;      Params:         0       0       0
  3623 ;;      Locals:         0       0       0
  3624 ;;      Temps:          0       0       0
  3625 ;;      Totals:         0       0       0
  3626 ;;Total ram usage:        0 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    3
  3629 ;; This function calls:
  3630 ;;		Nothing
  3631 ;; This function is called by:
  3632 ;;		_app_process_key
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           
  3637                           ;psect for function _charge_or_lowBat_check
  3638  06D5                     _charge_or_lowBat_check:	
  3639                           
  3640                           ;app_key.c: 143: if (app_charge.Charge)
  3641                           
  3642                           ;incstack = 0
  3643                           ; Regs used in _charge_or_lowBat_check: [wreg+status,2+status,0]
  3644  06D5  1683               	bsf	3,5	;RP0=1, select bank1
  3645  06D6  1C20               	btfss	_app_charge^(0+128),0
  3646  06D7  2ED9               	goto	l6652
  3647                           
  3648                           ;app_key.c: 144: {
  3649                           ;app_key.c: 157: key_brush_pwrtype = KEY_TYPE_IDLE;
  3650                           
  3651                           ;app_key.c: 158: key_water_pwr_type = KEY_TYPE_IDLE;
  3652                           
  3653                           ;app_key.c: 159: key_water_mode_type = KEY_TYPE_IDLE;
  3654                           
  3655                           ;app_key.c: 160: }
  3656  06D8  2EEA               	ljmp	PL8	;call to abstracted procedure
  3657  06D9                     l6652:	
  3658                           
  3659                           ;app_key.c: 161: else if (app_charge.LowPower)
  3660  06D9  0826               	movf	(_app_charge^(0+128)+6),w
  3661  06DA  1903               	btfsc	3,2
  3662  06DB  0008               	return
  3663                           
  3664                           ;app_key.c: 162: {
  3665                           ;app_key.c: 163: if (key_brush_pwrtype || key_water_pwr_type || key_water_mode_type)
  3666  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  3667  06DD  084C               	movf	_key_brush_pwrtype,w
  3668  06DE  1D03               	btfss	3,2
  3669  06DF  2EE5               	goto	l1622
  3670  06E0  084B               	movf	_key_water_pwr_type,w
  3671  06E1  1903               	btfsc	3,2
  3672  06E2  084A               	movf	_key_water_mode_type,w
  3673  06E3  1903               	btfsc	3,2
  3674  06E4  0008               	return
  3675  06E5                     l1622:	
  3676                           
  3677                           ;app_key.c: 164: {
  3678                           ;app_key.c: 165: app_charge.LowLed = 1;
  3679  06E5  1683               	bsf	3,5	;RP0=1, select bank1
  3680  06E6  01A7               	clrf	(_app_charge^(0+128)+7)
  3681  06E7  0AA7               	incf	(_app_charge^(0+128)+7),f
  3682                           
  3683                           ;app_key.c: 166: app_charge.LowLed_cnt = 0;
  3684  06E8  01A8               	clrf	(_app_charge^(0+128)+8)
  3685                           
  3686                           ;app_key.c: 167: key_brush_pwrtype = KEY_TYPE_IDLE;
  3687                           
  3688                           ;app_key.c: 168: key_water_pwr_type = KEY_TYPE_IDLE;
  3689                           
  3690                           ;app_key.c: 169: key_water_mode_type = KEY_TYPE_IDLE;
  3691  06E9  2EEA               	ljmp	PL8	;call to abstracted procedure
  3692  06EA                     __end_of_charge_or_lowBat_check:	
  3693  06EA                     PL8:	
  3694  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  3695  06EB  01CC               	clrf	_key_brush_pwrtype
  3696  06EC  01CB               	clrf	_key_water_pwr_type
  3697  06ED  01CA               	clrf	_key_water_mode_type
  3698  06EE  0008               	return
  3699  06EF                     __end_ofPL8:	
  3700                           
  3701                           	psect	text27
  3702  0729                     __ptext27:	
  3703 ;; *************** function _app_process_go_to_sleep *****************
  3704 ;; Defined at:
  3705 ;;		line 86 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_process.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;		None
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;		None
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  1    wreg      void 
  3712 ;; Registers used:
  3713 ;;		wreg, status,2, status,0, pclath, cstack
  3714 ;; Tracked objects:
  3715 ;;		On entry : 100/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMMON   BANK0   BANK1
  3719 ;;      Params:         0       0       0
  3720 ;;      Locals:         0       0       0
  3721 ;;      Temps:          0       0       0
  3722 ;;      Totals:         0       0       0
  3723 ;;Total ram usage:        0 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    5
  3726 ;; This function calls:
  3727 ;;		_GotoSleep
  3728 ;; This function is called by:
  3729 ;;		_main
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           
  3734                           ;psect for function _app_process_go_to_sleep
  3735  0729                     _app_process_go_to_sleep:	
  3736                           
  3737                           ;app_process.c: 88: if (app_work_state == WORK_STATE_POWEROFF && water_work_state == WAT
      +                          ER_WORK_STATE_POWEROFF && !app_charge.flag_remind_delay_10s && !app_charge.LowLed)
  3738                           
  3739                           ;incstack = 0
  3740                           ; Regs used in _app_process_go_to_sleep: [wreg+status,2+status,0+pclath+cstack]
  3741  0729  086D               	movf	_app_work_state,w	;volatile
  3742  072A  1D03               	btfss	3,2
  3743  072B  2F37               	goto	l7102
  3744  072C  086C               	movf	_water_work_state,w	;volatile
  3745  072D  1D03               	btfss	3,2
  3746  072E  2F37               	goto	l7102
  3747  072F  1683               	bsf	3,5	;RP0=1, select bank1
  3748  0730  0822               	movf	(_app_charge^(0+128)+2),w
  3749  0731  1D03               	btfss	3,2
  3750  0732  2F37               	goto	l7102
  3751  0733  0827               	movf	(_app_charge^(0+128)+7),w
  3752  0734  1D03               	btfss	3,2
  3753  0735  2F37               	goto	l7102
  3754                           
  3755                           ;app_process.c: 89: {
  3756                           ;app_process.c: 90: GotoSleep();
  3757  0736  2C17               	ljmp	l6798
  3758  0737                     l7102:	
  3759                           ;app_process.c: 91: }
  3760                           
  3761                           
  3762                           ;app_process.c: 92: else
  3763                           ;app_process.c: 93: {
  3764                           ;app_process.c: 94: CntSleep = 0;
  3765  0737  1283               	bcf	3,5	;RP0=0, select bank0
  3766  0738  01C5               	clrf	_CntSleep
  3767  0739  0008               	return
  3768  073A                     __end_of_app_process_go_to_sleep:	
  3769                           
  3770                           	psect	text28
  3771  0417                     __ptext28:	
  3772 ;; *************** function _GotoSleep *****************
  3773 ;; Defined at:
  3774 ;;		line 139 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\main.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;		None
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;		None
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0, pclath, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 100/100
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMMON   BANK0   BANK1
  3788 ;;      Params:         0       0       0
  3789 ;;      Locals:         0       0       0
  3790 ;;      Temps:          0       0       0
  3791 ;;      Totals:         0       0       0
  3792 ;;Total ram usage:        0 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    4
  3795 ;; This function calls:
  3796 ;;		_AdcConfig
  3797 ;;		_ChargePwmOut
  3798 ;;		_PortInit
  3799 ;; This function is called by:
  3800 ;;		_app_process_go_to_sleep
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           
  3805                           ;psect for function _GotoSleep
  3806  0417                     _GotoSleep:	
  3807  0417                     l6798:	
  3808                           ;incstack = 0
  3809                           ; Regs used in _GotoSleep: [wreg+status,2+status,0+pclath+cstack]
  3810                           
  3811                           
  3812                           ;main.c: 141: if (RB2 && RB0 && RB1)
  3813  0417  1283               	bcf	3,5	;RP0=0, select bank0
  3814  0418  1906               	btfsc	6,2	;volatile
  3815  0419  1C06               	btfss	6,0	;volatile
  3816  041A  2C52               	goto	l6856
  3817  041B  1C86               	btfss	6,1	;volatile
  3818  041C  2C52               	goto	l6856
  3819  041D  30C8               	movlw	200
  3820                           
  3821                           ;main.c: 142: {
  3822                           ;main.c: 144: CntSleep++;
  3823  041E  0AC5               	incf	_CntSleep,f
  3824                           
  3825                           ;main.c: 145: if (CntSleep >= 200)
  3826  041F  0245               	subwf	_CntSleep,w
  3827  0420  1C03               	skipc
  3828  0421  0008               	return
  3829                           
  3830                           ;main.c: 146: {
  3831                           ;main.c: 147: CntSleep = 0;
  3832  0422  01C5               	clrf	_CntSleep
  3833                           
  3834                           ;main.c: 149: ADCON0 = 0b00000000;
  3835  0423  019F               	clrf	31	;volatile
  3836                           
  3837                           ;main.c: 150: ADCON1 = 0b00000000;
  3838  0424  1683               	bsf	3,5	;RP0=1, select bank1
  3839  0425  019F               	clrf	31	;volatile
  3840                           
  3841                           ;main.c: 152: SWDTEN = 0;
  3842  0426  1008               	bcf	8,0	;volatile
  3843                           
  3844                           ;main.c: 153: WDTCON = 0x00;
  3845  0427  0188               	clrf	8	;volatile
  3846                           
  3847                           ;main.c: 155: GIE = 0;
  3848  0428  138B               	bcf	11,7	;volatile
  3849                           
  3850                           ;main.c: 156: TRISB = 0b00010111;
  3851  0429  3017               	movlw	23
  3852  042A  0086               	movwf	6	;volatile
  3853                           
  3854                           ;main.c: 157: WPUB = 0b00000111;
  3855  042B  3007               	movlw	7
  3856  042C  0095               	movwf	21	;volatile
  3857                           
  3858                           ;main.c: 158: TRISA = 0b00000000;
  3859  042D  0185               	clrf	5	;volatile
  3860                           
  3861                           ;main.c: 159: PORTA = 0b00000000;
  3862  042E  1283               	bcf	3,5	;RP0=0, select bank0
  3863  042F  0185               	clrf	5	;volatile
  3864                           
  3865                           ;main.c: 160: ChargePwmOut(0);
  3866  0430  3000               	movlw	0
  3867  0431  274B               	fcall	_ChargePwmOut
  3868                           
  3869                           ;main.c: 162: ANSELH = 0b00000000;
  3870  0432  1683               	bsf	3,5	;RP0=1, select bank1
  3871  0433  0194               	clrf	20	;volatile
  3872                           
  3873                           ;main.c: 165: IOCA = 0b00000000;
  3874  0434  1283               	bcf	3,5	;RP0=0, select bank0
  3875  0435  0189               	clrf	9	;volatile
  3876                           
  3877                           ;main.c: 166: IOCB = 0b00010111;
  3878  0436  3017               	movlw	23
  3879  0437  1683               	bsf	3,5	;RP0=1, select bank1
  3880  0438  0096               	movwf	22	;volatile
  3881                           
  3882                           ;main.c: 168: RAIE = 1;
  3883  0439  158C               	bsf	12,3	;volatile
  3884                           
  3885                           ;main.c: 169: RBIE = 1;
  3886  043A  158B               	bsf	11,3	;volatile
  3887                           
  3888                           ;main.c: 170: PEIE = 1;
  3889  043B  170B               	bsf	11,6	;volatile
  3890                           
  3891                           ;main.c: 172: RAIF = 0;
  3892  043C  1283               	bcf	3,5	;RP0=0, select bank0
  3893  043D  118C               	bcf	12,3	;volatile
  3894                           
  3895                           ;main.c: 173: PORTA;
  3896  043E  0805               	movf	5,w	;volatile
  3897                           
  3898                           ;main.c: 174: RBIF = 0;
  3899  043F  100B               	bcf	11,0	;volatile
  3900                           
  3901                           ;main.c: 175: PORTB;
  3902  0440  0806               	movf	6,w	;volatile
  3903  0441  0064               	clrwdt	;# 
  3904  0442  0063               	sleep	;# 
  3905  0443  0000               	nop	;# 
  3906  0444  0000               	nop	;# 
  3907  0445  0000               	nop	;# 
  3908                           
  3909                           ;main.c: 184: ADON = 1;
  3910  0446  1283               	bcf	3,5	;RP0=0, select bank0
  3911  0447  141F               	bsf	31,0	;volatile
  3912                           
  3913                           ;main.c: 186: SWDTEN = 1;
  3914  0448  1683               	bsf	3,5	;RP0=1, select bank1
  3915  0449  1408               	bsf	8,0	;volatile
  3916                           
  3917                           ;main.c: 188: IOCB = 0x00;
  3918  044A  0196               	clrf	22	;volatile
  3919                           
  3920                           ;main.c: 189: IOCA = 0x00;
  3921  044B  1283               	bcf	3,5	;RP0=0, select bank0
  3922  044C  0189               	clrf	9	;volatile
  3923                           
  3924                           ;main.c: 191: GIE = 1;
  3925  044D  178B               	bsf	11,7	;volatile
  3926                           
  3927                           ;main.c: 193: SWDTEN = 1;
  3928  044E  1683               	bsf	3,5	;RP0=1, select bank1
  3929  044F  1408               	bsf	8,0	;volatile
  3930                           
  3931                           ;main.c: 194: AdcConfig();
  3932  0450  27E5               	fcall	_AdcConfig
  3933                           
  3934                           ;main.c: 195: PortInit();
  3935  0451  2F3A               	ljmp	l6384
  3936  0452                     l6856:	
  3937                           
  3938                           ;main.c: 198: else
  3939                           ;main.c: 199: {
  3940                           ;main.c: 200: CntSleep = 0;
  3941  0452  01C5               	clrf	_CntSleep
  3942  0453  0008               	return
  3943  0454                     __end_of_GotoSleep:	
  3944                           
  3945                           	psect	text29
  3946  073A                     __ptext29:	
  3947 ;; *************** function _PortInit *****************
  3948 ;; Defined at:
  3949 ;;		line 25 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\main.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;		None
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;		None
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      void 
  3956 ;; Registers used:
  3957 ;;		wreg, status,2
  3958 ;; Tracked objects:
  3959 ;;		On entry : 100/100
  3960 ;;		On exit  : 100/100
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMMON   BANK0   BANK1
  3963 ;;      Params:         0       0       0
  3964 ;;      Locals:         0       0       0
  3965 ;;      Temps:          0       0       0
  3966 ;;      Totals:         0       0       0
  3967 ;;Total ram usage:        0 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    3
  3970 ;; This function calls:
  3971 ;;		Nothing
  3972 ;; This function is called by:
  3973 ;;		_main
  3974 ;;		_GotoSleep
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           
  3979                           ;psect for function _PortInit
  3980  073A                     _PortInit:	
  3981  073A                     l6384:	
  3982                           ;incstack = 0
  3983                           ; Regs used in _PortInit: [wreg+status,2]
  3984                           
  3985                           
  3986                           ;main.c: 27: TRISA = 0b00000000;
  3987  073A  0185               	clrf	5	;volatile
  3988                           
  3989                           ;main.c: 28: PORTA = 0b00000000;
  3990  073B  1283               	bcf	3,5	;RP0=0, select bank0
  3991  073C  0185               	clrf	5	;volatile
  3992                           
  3993                           ;main.c: 29: WPUA = 0b00000000;
  3994  073D  0187               	clrf	7	;volatile
  3995                           
  3996                           ;main.c: 30: IOCA = 0b00000000;
  3997  073E  0189               	clrf	9	;volatile
  3998                           
  3999                           ;main.c: 32: TRISB = 0b00010111;
  4000  073F  3017               	movlw	23
  4001  0740  1683               	bsf	3,5	;RP0=1, select bank1
  4002  0741  0086               	movwf	6	;volatile
  4003                           
  4004                           ;main.c: 33: PORTB = 0b00000000;
  4005  0742  1283               	bcf	3,5	;RP0=0, select bank0
  4006  0743  0186               	clrf	6	;volatile
  4007                           
  4008                           ;main.c: 34: ANSELH = 0b00010000;
  4009  0744  3010               	movlw	16
  4010  0745  1683               	bsf	3,5	;RP0=1, select bank1
  4011  0746  0094               	movwf	20	;volatile
  4012                           
  4013                           ;main.c: 35: WPUB = 0b00000111;
  4014  0747  3007               	movlw	7
  4015  0748  0095               	movwf	21	;volatile
  4016                           
  4017                           ;main.c: 36: IOCB = 0b00000000;
  4018  0749  0196               	clrf	22	;volatile
  4019  074A  0008               	return
  4020  074B                     __end_of_PortInit:	
  4021                           
  4022                           	psect	text30
  4023  07E5                     __ptext30:	
  4024 ;; *************** function _AdcConfig *****************
  4025 ;; Defined at:
  4026 ;;		line 69 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\main.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;		None
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      void 
  4033 ;; Registers used:
  4034 ;;		wreg, status,2
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 100/100
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMMON   BANK0   BANK1
  4040 ;;      Params:         0       0       0
  4041 ;;      Locals:         0       0       0
  4042 ;;      Temps:          0       0       0
  4043 ;;      Totals:         0       0       0
  4044 ;;Total ram usage:        0 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    3
  4047 ;; This function calls:
  4048 ;;		Nothing
  4049 ;; This function is called by:
  4050 ;;		_main
  4051 ;;		_GotoSleep
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           
  4056                           ;psect for function _AdcConfig
  4057  07E5                     _AdcConfig:	
  4058                           
  4059                           ;main.c: 71: ADCON0 = 0b00111101;
  4060                           
  4061                           ;incstack = 0
  4062                           ; Regs used in _AdcConfig: [wreg+status,2]
  4063  07E5  303D               	movlw	61
  4064  07E6  1283               	bcf	3,5	;RP0=0, select bank0
  4065  07E7  009F               	movwf	31	;volatile
  4066                           
  4067                           ;main.c: 72: ADCON1 = 0b00000000;
  4068  07E8  1683               	bsf	3,5	;RP0=1, select bank1
  4069  07E9  019F               	clrf	31	;volatile
  4070  07EA  0008               	return
  4071  07EB                     __end_of_AdcConfig:	
  4072                           
  4073                           	psect	text31
  4074  07FA                     __ptext31:	
  4075 ;; *************** function _app_process_charge *****************
  4076 ;; Defined at:
  4077 ;;		line 244 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_charge.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;		None
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;		None
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  1    wreg      void 
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0, pclath, cstack
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMMON   BANK0   BANK1
  4091 ;;      Params:         0       0       0
  4092 ;;      Locals:         0       0       0
  4093 ;;      Temps:          0       0       0
  4094 ;;      Totals:         0       0       0
  4095 ;;Total ram usage:        0 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    6
  4098 ;; This function calls:
  4099 ;;		_Charge_Check
  4100 ;; This function is called by:
  4101 ;;		_main
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           
  4106                           ;psect for function _app_process_charge
  4107  07FA                     _app_process_charge:	
  4108                           
  4109                           ;app_charge.c: 246: Charge_Check();
  4110                           
  4111                           ;incstack = 0
  4112                           ; Regs used in _app_process_charge: [wreg+status,2+status,0+pclath+cstack]
  4113  07FA  282E               	ljmp	l6456
  4114  07FB                     __end_of_app_process_charge:	
  4115                           
  4116                           	psect	text32
  4117  002E                     __ptext32:	
  4118 ;; *************** function _Charge_Check *****************
  4119 ;; Defined at:
  4120 ;;		line 56 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_charge.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;		None
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;		None
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  1    wreg      void 
  4127 ;; Registers used:
  4128 ;;		wreg, status,2, status,0, pclath, cstack
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMMON   BANK0   BANK1
  4134 ;;      Params:         0       0       0
  4135 ;;      Locals:         0       0       0
  4136 ;;      Temps:          0       1       0
  4137 ;;      Totals:         0       1       0
  4138 ;;Total ram usage:        1 bytes
  4139 ;; Hardware stack levels used:    1
  4140 ;; Hardware stack levels required when called:    5
  4141 ;; This function calls:
  4142 ;;		_AdcResultChk
  4143 ;;		_ChargePwmOut
  4144 ;;		_app_process_set_work_state
  4145 ;;		_set_led_state
  4146 ;; This function is called by:
  4147 ;;		_app_process_charge
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           
  4152                           ;psect for function _Charge_Check
  4153  002E                     _Charge_Check:	
  4154  002E                     l6456:	
  4155                           ;incstack = 0
  4156                           ; Regs used in _Charge_Check: [wreg+status,2+status,0+pclath+cstack]
  4157                           
  4158                           
  4159                           ;app_charge.c: 58: ADCON0 = 0b00110001;
  4160  002E  3031               	movlw	49
  4161  002F  1283               	bcf	3,5	;RP0=0, select bank0
  4162  0030  009F               	movwf	31	;volatile
  4163                           
  4164                           ;app_charge.c: 59: _delay((unsigned long)((20)*(16000000UL/4000000.0)));
  4165  0031  301A               	movlw	26
  4166  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4167  0033  00E0               	movwf	??_Charge_Check
  4168  0034                     u3137:	
  4169  0034  0BE0               	decfsz	??_Charge_Check,f
  4170  0035  2834               	goto	u3137
  4171                           
  4172                           ;app_charge.c: 60: ADCON1 = 0b00000100;
  4173  0036  3004               	movlw	4
  4174  0037  1683               	bsf	3,5	;RP0=1, select bank1
  4175  0038  009F               	movwf	31	;volatile
  4176                           
  4177                           ;app_charge.c: 61: _delay((unsigned long)((20)*(16000000UL/4000000.0)));
  4178  0039  301A               	movlw	26
  4179  003A  1283               	bcf	3,5	;RP0=0, select bank0
  4180  003B  00E0               	movwf	??_Charge_Check
  4181  003C                     u3147:	
  4182  003C  0BE0               	decfsz	??_Charge_Check,f
  4183  003D  283C               	goto	u3147
  4184                           
  4185                           ;app_charge.c: 62: adresult_chagrge_vdd = AdcResultChk(4,12);
  4186  003E  300C               	movlw	12
  4187  003F  1283               	bcf	3,5	;RP0=0, select bank0
  4188  0040  00D9               	movwf	AdcResultChk@adldo
  4189  0041  3004               	movlw	4
  4190  0042  2778               	fcall	_AdcResultChk
  4191  0043  085A               	movf	?_AdcResultChk+1,w
  4192  0044  00B7               	movwf	_adresult_chagrge_vdd+1	;volatile
  4193  0045  0859               	movf	?_AdcResultChk,w
  4194  0046  00B6               	movwf	_adresult_chagrge_vdd	;volatile
  4195                           
  4196                           ;app_charge.c: 75: if (adresult_chagrge_vdd < 1300)
  4197  0047  3005               	movlw	5
  4198  0048  0237               	subwf	_adresult_chagrge_vdd+1,w	;volatile
  4199  0049  3014               	movlw	20
  4200  004A  1903               	skipnz
  4201  004B  0236               	subwf	_adresult_chagrge_vdd,w	;volatile
  4202  004C  1803               	skipnc
  4203  004D  2869               	goto	l6482
  4204                           
  4205                           ;app_charge.c: 76: {
  4206                           ;app_charge.c: 77: if (!flag_charge_once)
  4207  004E  1B7B               	btfsc	_flag_charge_once/(0+8),_flag_charge_once& (0+7)
  4208  004F  286C               	goto	l6484
  4209                           
  4210                           ;app_charge.c: 78: {
  4211                           ;app_charge.c: 79: app_charge.DisChargeCnt++;
  4212  0050  1683               	bsf	3,5	;RP0=1, select bank1
  4213  0051  0AAB               	incf	(_app_charge^(0+128)+11),f
  4214  0052  1903               	skipnz
  4215  0053  0AAC               	incf	((_app_charge+1)^(0+128)+11),f
  4216                           
  4217                           ;app_charge.c: 80: if(app_charge.DisChargeCnt >= ((500) / 10))
  4218  0054  3000               	movlw	0
  4219  0055  022C               	subwf	((_app_charge+1)^(0+128)+11),w
  4220  0056  3032               	movlw	50
  4221  0057  1903               	skipnz
  4222  0058  022B               	subwf	(_app_charge^(0+128)+11),w
  4223  0059  1C03               	skipc
  4224  005A  286C               	goto	l6484
  4225  005B  3003               	movlw	3
  4226                           
  4227                           ;app_charge.c: 81: {
  4228                           ;app_charge.c: 82: flag_charge_once = 1;
  4229  005C  177B               	bsf	_flag_charge_once/(0+8),_flag_charge_once& (0+7)
  4230                           
  4231                           ;app_charge.c: 83: flag_discharge_once = 0;
  4232  005D  12FB               	bcf	_flag_discharge_once/(0+8),_flag_discharge_once& (0+7)
  4233                           
  4234                           ;app_charge.c: 85: app_charge.DisChargeCnt = 0;
  4235  005E  01AB               	clrf	(_app_charge^(0+128)+11)
  4236  005F  01AC               	clrf	((_app_charge+1)^(0+128)+11)
  4237                           
  4238                           ;app_charge.c: 86: app_charge.Charge = 0;
  4239  0060  1020               	bcf	_app_charge^(0+128),0
  4240                           
  4241                           ;app_charge.c: 87: app_charge.FullCharge = 0;
  4242  0061  10A0               	bcf	_app_charge^(0+128),1
  4243                           
  4244                           ;app_charge.c: 88: set_led_state(LED_INDEX_9 | LED_INDEX_10,LED_STATE_OFF);
  4245  0062  2134               	fcall	PL12	;call to abstracted procedure
  4246  0063  2626               	fcall	_set_led_state
  4247                           
  4248                           ;app_charge.c: 89: ChargePwmOut(0);
  4249  0064  3000               	movlw	0
  4250  0065  274B               	fcall	_ChargePwmOut
  4251                           
  4252                           ;app_charge.c: 90: app_process_set_work_state(WORK_STATE_POWEROFF);
  4253  0066  3000               	movlw	0
  4254  0067  27EB               	fcall	_app_process_set_work_state
  4255  0068  286C               	goto	l6484
  4256  0069                     l6482:	
  4257                           
  4258                           ;app_charge.c: 94: else
  4259                           ;app_charge.c: 95: {
  4260                           ;app_charge.c: 96: app_charge.DisChargeCnt = 0;
  4261  0069  1683               	bsf	3,5	;RP0=1, select bank1
  4262  006A  01AB               	clrf	(_app_charge^(0+128)+11)
  4263  006B  01AC               	clrf	((_app_charge+1)^(0+128)+11)
  4264  006C                     l6484:	
  4265                           
  4266                           ;app_charge.c: 97: }
  4267                           ;app_charge.c: 98: if (adresult_chagrge_vdd > 1700)
  4268  006C  3006               	movlw	6
  4269  006D  1283               	bcf	3,5	;RP0=0, select bank0
  4270  006E  0237               	subwf	_adresult_chagrge_vdd+1,w	;volatile
  4271  006F  30A5               	movlw	165
  4272  0070  1903               	skipnz
  4273  0071  0236               	subwf	_adresult_chagrge_vdd,w	;volatile
  4274  0072  1C03               	skipc
  4275  0073  2891               	goto	l6502
  4276                           
  4277                           ;app_charge.c: 99: {
  4278                           ;app_charge.c: 100: if (!flag_discharge_once)
  4279  0074  1AFB               	btfsc	_flag_discharge_once/(0+8),_flag_discharge_once& (0+7)
  4280  0075  2894               	goto	l6504
  4281                           
  4282                           ;app_charge.c: 101: {
  4283                           ;app_charge.c: 102: if (app_charge.ChargeCnt <= ((100) / 10))
  4284  0076  3000               	movlw	0
  4285  0077  1683               	bsf	3,5	;RP0=1, select bank1
  4286  0078  022A               	subwf	((_app_charge+1)^(0+128)+9),w
  4287  0079  300B               	movlw	11
  4288  007A  1903               	skipnz
  4289  007B  0229               	subwf	(_app_charge^(0+128)+9),w
  4290  007C  1803               	skipnc
  4291  007D  2882               	goto	l1046
  4292                           
  4293                           ;app_charge.c: 103: {
  4294                           ;app_charge.c: 104: app_charge.ChargeCnt++;
  4295  007E  0AA9               	incf	(_app_charge^(0+128)+9),f
  4296  007F  1903               	skipnz
  4297  0080  0AAA               	incf	((_app_charge+1)^(0+128)+9),f
  4298                           
  4299                           ;app_charge.c: 105: }
  4300  0081  2894               	goto	l6504
  4301  0082                     l1046:	
  4302                           
  4303                           ;app_charge.c: 106: else
  4304                           ;app_charge.c: 107: {
  4305                           ;app_charge.c: 108: flag_charge_once = 0;
  4306  0082  137B               	bcf	_flag_charge_once/(0+8),_flag_charge_once& (0+7)
  4307                           
  4308                           ;app_charge.c: 109: flag_discharge_once = 1;
  4309  0083  16FB               	bsf	_flag_discharge_once/(0+8),_flag_discharge_once& (0+7)
  4310                           
  4311                           ;app_charge.c: 111: app_charge.ChargeFullCnt = 0;
  4312  0084  01AD               	clrf	(_app_charge^(0+128)+13)
  4313  0085  01AE               	clrf	((_app_charge+1)^(0+128)+13)
  4314                           
  4315                           ;app_charge.c: 112: app_charge.ChargeCnt = 0;
  4316  0086  01A9               	clrf	(_app_charge^(0+128)+9)
  4317  0087  01AA               	clrf	((_app_charge+1)^(0+128)+9)
  4318                           
  4319                           ;app_charge.c: 113: app_charge.Charge = 1;
  4320  0088  1420               	bsf	_app_charge^(0+128),0
  4321                           
  4322                           ;app_charge.c: 114: app_charge.FullCharge = 0;
  4323  0089  10A0               	bcf	_app_charge^(0+128),1
  4324                           
  4325                           ;app_charge.c: 116: adresultvdd_back = 4096;
  4326  008A  1283               	bcf	3,5	;RP0=0, select bank0
  4327  008B  01B8               	clrf	_adresultvdd_back	;volatile
  4328  008C  3010               	movlw	16
  4329  008D  00B9               	movwf	_adresultvdd_back+1	;volatile
  4330                           
  4331                           ;app_charge.c: 117: app_process_set_work_state(WORK_STATE_CHARGING);
  4332  008E  3002               	movlw	2
  4333  008F  27EB               	fcall	_app_process_set_work_state
  4334  0090  2894               	goto	l6504
  4335  0091                     l6502:	
  4336                           
  4337                           ;app_charge.c: 121: else
  4338                           ;app_charge.c: 122: {
  4339                           ;app_charge.c: 123: app_charge.ChargeCnt = 0;
  4340  0091  1683               	bsf	3,5	;RP0=1, select bank1
  4341  0092  01A9               	clrf	(_app_charge^(0+128)+9)
  4342  0093  01AA               	clrf	((_app_charge+1)^(0+128)+9)
  4343  0094                     l6504:	
  4344                           
  4345                           ;app_charge.c: 124: }
  4346                           ;app_charge.c: 125: if(app_charge.Charge)
  4347  0094  1683               	bsf	3,5	;RP0=1, select bank1
  4348  0095  1C20               	btfss	_app_charge^(0+128),0
  4349  0096  2921               	goto	l6560
  4350                           
  4351                           ;app_charge.c: 126: {
  4352                           ;app_charge.c: 127: if(app_charge.FullCharge || app_charge.ForceFullCharge)
  4353  0097  18A0               	btfsc	_app_charge^(0+128),1
  4354  0098  289B               	goto	l6510
  4355  0099  1D20               	btfss	_app_charge^(0+128),2
  4356  009A  28CC               	goto	l6532
  4357  009B                     l6510:	
  4358                           
  4359                           ;app_charge.c: 128: {
  4360                           ;app_charge.c: 129: if (charge_force_full_cnt <= (100UL * 3600 *15 + 100UL * 3600 *9))
  4361  009B  0846               	movf	(_charge_force_full_cnt+3)^(0+128),w
  4362  009C  1D03               	btfss	3,2
  4363  009D  28B2               	goto	l1053
  4364  009E  3083               	movlw	131
  4365  009F  0245               	subwf	(_charge_force_full_cnt+2)^(0+128),w
  4366  00A0  1D03               	skipz
  4367  00A1  28A8               	goto	u1693
  4368  00A2  30D6               	movlw	214
  4369  00A3  0244               	subwf	(_charge_force_full_cnt+1)^(0+128),w
  4370  00A4  1D03               	skipz
  4371  00A5  28A8               	goto	u1693
  4372  00A6  3001               	movlw	1
  4373  00A7  0243               	subwf	_charge_force_full_cnt^(0+128),w
  4374  00A8                     u1693:	
  4375  00A8  1803               	btfsc	3,0
  4376  00A9  28B2               	goto	l1053
  4377                           
  4378                           ;app_charge.c: 131: {
  4379                           ;app_charge.c: 132: charge_force_full_cnt++;
  4380  00AA  0AC3               	incf	_charge_force_full_cnt^(0+128),f
  4381  00AB  1903               	skipnz
  4382  00AC  0AC4               	incf	(_charge_force_full_cnt+1)^(0+128),f
  4383  00AD  1903               	skipnz
  4384  00AE  0AC5               	incf	(_charge_force_full_cnt+2)^(0+128),f
  4385  00AF  1903               	skipnz
  4386  00B0  0AC6               	incf	(_charge_force_full_cnt+3)^(0+128),f
  4387                           
  4388                           ;app_charge.c: 133: }
  4389  00B1  28B3               	goto	l1054
  4390  00B2                     l1053:	
  4391                           
  4392                           ;app_charge.c: 134: else
  4393                           ;app_charge.c: 135: {
  4394                           ;app_charge.c: 136: app_charge.flag_charge_force_full_24hour = 1;
  4395  00B2  15A0               	bsf	_app_charge^(0+128),3
  4396  00B3                     l1054:	
  4397                           
  4398                           ;app_charge.c: 137: }
  4399                           ;app_charge.c: 138: if (app_charge.flag_charge_force_full_24hour)
  4400  00B3  1DA0               	btfss	_app_charge^(0+128),3
  4401  00B4  28B8               	goto	l1055
  4402  00B5                     l6514:	
  4403                           
  4404                           ;app_charge.c: 139: {
  4405                           ;app_charge.c: 140: {PWM0EN = 0;TRISB3 = 0;RB3 = 0;};
  4406  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  4407  00B6  212E               	fcall	PL4	;call to abstracted procedure
  4408                           
  4409                           ;app_charge.c: 141: }
  4410  00B7  0008               	return
  4411  00B8                     l1055:	
  4412                           
  4413                           ;app_charge.c: 142: else
  4414                           ;app_charge.c: 143: {
  4415                           ;app_charge.c: 144: if (app_charge.ForceFullCharge)
  4416  00B8  1920               	btfsc	_app_charge^(0+128),2
  4417  00B9  28B5               	goto	l6514
  4418                           
  4419                           ;app_charge.c: 148: else
  4420                           ;app_charge.c: 149: {
  4421                           ;app_charge.c: 150: if (adresultvdd > 1213)
  4422  00BA  3004               	movlw	4
  4423  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  4424  00BC  023B               	subwf	_adresultvdd+1,w	;volatile
  4425  00BD  30BE               	movlw	190
  4426  00BE  1903               	skipnz
  4427  00BF  023A               	subwf	_adresultvdd,w	;volatile
  4428  00C0  1C03               	skipc
  4429  00C1  28C4               	goto	l6522
  4430                           
  4431                           ;app_charge.c: 151: {
  4432                           ;app_charge.c: 152: ChargePwmOut(60);
  4433  00C2  303C               	movlw	60
  4434  00C3  2F4B               	ljmp	_ChargePwmOut
  4435  00C4                     l6522:	
  4436                           ;app_charge.c: 153: }
  4437                           
  4438                           
  4439                           ;app_charge.c: 154: else if(adresultvdd <= 1180)
  4440  00C4  3004               	movlw	4
  4441  00C5  023B               	subwf	_adresultvdd+1,w	;volatile
  4442  00C6  309D               	movlw	157
  4443  00C7  1903               	skipnz
  4444  00C8  023A               	subwf	_adresultvdd,w	;volatile
  4445  00C9  1803               	skipnc
  4446  00CA  0008               	return
  4447  00CB  28B5               	goto	l6514
  4448  00CC                     l6532:	
  4449                           ;app_charge.c: 157: }
  4450                           ;app_charge.c: 158: }
  4451                           ;app_charge.c: 159: }
  4452                           ;app_charge.c: 161: }
  4453                           
  4454                           
  4455                           ;app_charge.c: 183: }
  4456                           ;app_charge.c: 184: }
  4457                           ;app_charge.c: 185: if (adresultvdd <= 1170)
  4458  00CC  3004               	movlw	4
  4459  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  4460  00CE  023B               	subwf	_adresultvdd+1,w	;volatile
  4461  00CF  3093               	movlw	147
  4462  00D0  1903               	skipnz
  4463  00D1  023A               	subwf	_adresultvdd,w	;volatile
  4464  00D2  1803               	skipnc
  4465  00D3  28DD               	goto	l6538
  4466                           
  4467                           ;app_charge.c: 186: {
  4468                           ;app_charge.c: 187: if (++charge_full_cnt >= 100)
  4469  00D4  3064               	movlw	100
  4470  00D5  0ACD               	incf	_charge_full_cnt,f
  4471  00D6  024D               	subwf	_charge_full_cnt,w
  4472  00D7  1C03               	skipc
  4473  00D8  28DE               	goto	l6540
  4474                           
  4475                           ;app_charge.c: 188: {
  4476                           ;app_charge.c: 189: {PWM0EN = 0;TRISB3 = 0;RB3 = 0;};
  4477  00D9  212E               	fcall	PL4	;call to abstracted procedure
  4478                           
  4479                           ;app_charge.c: 190: app_charge.FullCharge = 1;
  4480  00DA  1683               	bsf	3,5	;RP0=1, select bank1
  4481  00DB  14A0               	bsf	_app_charge^(0+128),1
  4482  00DC  28DE               	goto	l6540
  4483  00DD                     l6538:	
  4484                           
  4485                           ;app_charge.c: 193: else
  4486                           ;app_charge.c: 194: {
  4487                           ;app_charge.c: 195: charge_full_cnt = 0;
  4488  00DD  01CD               	clrf	_charge_full_cnt
  4489  00DE                     l6540:	
  4490                           
  4491                           ;app_charge.c: 196: }
  4492                           ;app_charge.c: 198: if (charge_force_full_cnt <= 100UL * 3600 *15)
  4493  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  4494  00DF  0846               	movf	(_charge_force_full_cnt+3)^(0+128),w
  4495  00E0  1D03               	btfss	3,2
  4496  00E1  28F6               	goto	l1068
  4497  00E2  3052               	movlw	82
  4498  00E3  0245               	subwf	(_charge_force_full_cnt+2)^(0+128),w
  4499  00E4  1D03               	skipz
  4500  00E5  28EC               	goto	u1763
  4501  00E6  3065               	movlw	101
  4502  00E7  0244               	subwf	(_charge_force_full_cnt+1)^(0+128),w
  4503  00E8  1D03               	skipz
  4504  00E9  28EC               	goto	u1763
  4505  00EA  30C1               	movlw	193
  4506  00EB  0243               	subwf	_charge_force_full_cnt^(0+128),w
  4507  00EC                     u1763:	
  4508  00EC  1803               	btfsc	3,0
  4509  00ED  28F6               	goto	l1068
  4510                           
  4511                           ;app_charge.c: 200: {
  4512                           ;app_charge.c: 201: charge_force_full_cnt++;
  4513  00EE  0AC3               	incf	_charge_force_full_cnt^(0+128),f
  4514  00EF  1903               	skipnz
  4515  00F0  0AC4               	incf	(_charge_force_full_cnt+1)^(0+128),f
  4516  00F1  1903               	skipnz
  4517  00F2  0AC5               	incf	(_charge_force_full_cnt+2)^(0+128),f
  4518  00F3  1903               	skipnz
  4519  00F4  0AC6               	incf	(_charge_force_full_cnt+3)^(0+128),f
  4520                           
  4521                           ;app_charge.c: 202: }
  4522  00F5  28F7               	goto	l6544
  4523  00F6                     l1068:	
  4524                           
  4525                           ;app_charge.c: 203: else
  4526                           ;app_charge.c: 204: {
  4527                           ;app_charge.c: 205: app_charge.ForceFullCharge = 1;
  4528  00F6  1520               	bsf	_app_charge^(0+128),2
  4529  00F7                     l6544:	
  4530                           
  4531                           ;app_charge.c: 206: }
  4532                           ;app_charge.c: 208: if (adresultvdd_back >= adresultvdd)
  4533  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  4534  00F8  083B               	movf	_adresultvdd+1,w	;volatile
  4535  00F9  0239               	subwf	_adresultvdd_back+1,w	;volatile
  4536  00FA  1D03               	skipz
  4537  00FB  28FE               	goto	u1775
  4538  00FC  083A               	movf	_adresultvdd,w	;volatile
  4539  00FD  0238               	subwf	_adresultvdd_back,w	;volatile
  4540  00FE                     u1775:	
  4541  00FE  1C03               	skipc
  4542  00FF  2904               	goto	l1070
  4543                           
  4544                           ;app_charge.c: 209: {
  4545                           ;app_charge.c: 210: adresultvdd_back = adresultvdd;
  4546  0100  083B               	movf	_adresultvdd+1,w	;volatile
  4547  0101  00B9               	movwf	_adresultvdd_back+1	;volatile
  4548  0102  083A               	movf	_adresultvdd,w	;volatile
  4549  0103  00B8               	movwf	_adresultvdd_back	;volatile
  4550  0104                     l1070:	
  4551                           
  4552                           ;app_charge.c: 211: }
  4553                           ;app_charge.c: 214: if(adresultvdd_back < 1199)
  4554  0104  3004               	movlw	4
  4555  0105  0239               	subwf	_adresultvdd_back+1,w	;volatile
  4556  0106  30AF               	movlw	175
  4557  0107  1903               	skipnz
  4558  0108  0238               	subwf	_adresultvdd_back,w	;volatile
  4559  0109  1803               	skipnc
  4560  010A  290D               	goto	l6550
  4561                           
  4562                           ;app_charge.c: 215: {
  4563                           ;app_charge.c: 216: ChargePwmOut(60);
  4564  010B  303C               	movlw	60
  4565  010C  2F4B               	ljmp	_ChargePwmOut
  4566  010D                     l6550:	
  4567                           ;app_charge.c: 217: }
  4568                           
  4569                           
  4570                           ;app_charge.c: 218: else if(adresultvdd_back < 1228)
  4571  010D  3004               	movlw	4
  4572  010E  0239               	subwf	_adresultvdd_back+1,w	;volatile
  4573  010F  30CC               	movlw	204
  4574  0110  1903               	skipnz
  4575  0111  0238               	subwf	_adresultvdd_back,w	;volatile
  4576  0112  1803               	skipnc
  4577  0113  2916               	goto	l6554
  4578                           
  4579                           ;app_charge.c: 219: {
  4580                           ;app_charge.c: 220: ChargePwmOut(60);
  4581  0114  303C               	movlw	60
  4582  0115  2F4B               	ljmp	_ChargePwmOut
  4583  0116                     l6554:	
  4584                           ;app_charge.c: 221: }
  4585                           
  4586                           
  4587                           ;app_charge.c: 222: else if(adresultvdd_back < 1445)
  4588  0116  3005               	movlw	5
  4589  0117  0239               	subwf	_adresultvdd_back+1,w	;volatile
  4590  0118  30A5               	movlw	165
  4591  0119  1903               	skipnz
  4592  011A  0238               	subwf	_adresultvdd_back,w	;volatile
  4593  011B  1803               	skipnc
  4594  011C  291F               	goto	l6558
  4595                           
  4596                           ;app_charge.c: 223: {
  4597                           ;app_charge.c: 224: ChargePwmOut(80);
  4598  011D  3050               	movlw	80
  4599  011E  2F4B               	ljmp	_ChargePwmOut
  4600  011F                     l6558:	
  4601                           ;app_charge.c: 225: }
  4602                           
  4603                           
  4604                           ;app_charge.c: 226: else
  4605                           ;app_charge.c: 227: {
  4606                           ;app_charge.c: 228: ChargePwmOut(60);
  4607  011F  303C               	movlw	60
  4608  0120  2F4B               	ljmp	_ChargePwmOut
  4609  0121                     l6560:	
  4610                           
  4611                           ;app_charge.c: 235: charge_full_cnt = 0;
  4612  0121  1283               	bcf	3,5	;RP0=0, select bank0
  4613  0122  01CD               	clrf	_charge_full_cnt
  4614                           
  4615                           ;app_charge.c: 236: charge_force_full_cnt = 0;
  4616  0123  1683               	bsf	3,5	;RP0=1, select bank1
  4617  0124  01C3               	clrf	_charge_force_full_cnt^(0+128)
  4618  0125  01C4               	clrf	(_charge_force_full_cnt+1)^(0+128)
  4619  0126  01C5               	clrf	(_charge_force_full_cnt+2)^(0+128)
  4620  0127  01C6               	clrf	(_charge_force_full_cnt+3)^(0+128)
  4621                           
  4622                           ;app_charge.c: 237: app_charge.flag_charge_force_full_24hour = 0;
  4623  0128  11A0               	bcf	_app_charge^(0+128),3
  4624                           
  4625                           ;app_charge.c: 238: app_charge.FullCharge = 0;
  4626  0129  10A0               	bcf	_app_charge^(0+128),1
  4627                           
  4628                           ;app_charge.c: 239: app_charge.ForceFullCharge = 0;
  4629  012A  1120               	bcf	_app_charge^(0+128),2
  4630                           
  4631                           ;app_charge.c: 240: app_charge.ChargeFullCnt = 0;
  4632  012B  01AD               	clrf	(_app_charge^(0+128)+13)
  4633  012C  01AE               	clrf	((_app_charge+1)^(0+128)+13)
  4634  012D  0008               	return
  4635  012E                     __end_of_Charge_Check:	
  4636  012E                     PL4:	
  4637  012E  101B               	bcf	27,0	;volatile
  4638  012F  1683               	bsf	3,5	;RP0=1, select bank1
  4639  0130  1186               	bcf	6,3	;volatile
  4640  0131  1283               	bcf	3,5	;RP0=0, select bank0
  4641  0132  1186               	bcf	6,3	;volatile
  4642  0133  0008               	return
  4643  0134                     __end_ofPL4:	
  4644  0134                     PL12:	
  4645  0134  1283               	bcf	3,5	;RP0=0, select bank0
  4646  0135  01D3               	clrf	set_led_state@index
  4647  0136  00D4               	movwf	set_led_state@index+1
  4648  0137  01D5               	clrf	set_led_state@state
  4649  0138  0008               	return
  4650  0139                     __end_ofPL12:	
  4651                           
  4652                           	psect	text33
  4653  0626                     __ptext33:	
  4654 ;; *************** function _set_led_state *****************
  4655 ;; Defined at:
  4656 ;;		line 269 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_led.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;  index           2    0[BANK0 ] enum E591
  4659 ;;  state           1    2[BANK0 ] enum E587
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;		None
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  1    wreg      void 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0
  4666 ;; Tracked objects:
  4667 ;;		On entry : 100/0
  4668 ;;		On exit  : 100/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1
  4671 ;;      Params:         0       3       0
  4672 ;;      Locals:         0       0       0
  4673 ;;      Temps:          0       6       0
  4674 ;;      Totals:         0       9       0
  4675 ;;Total ram usage:        9 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    3
  4678 ;; This function calls:
  4679 ;;		Nothing
  4680 ;; This function is called by:
  4681 ;;		_Charge_Check
  4682 ;;		_app_led_mode_set
  4683 ;;		_app_led_water_mode_set
  4684 ;;		_process_led_remind_low_power
  4685 ;;		_app_process_power_off
  4686 ;;		_water_turn_off
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           
  4691                           ;psect for function _set_led_state
  4692  0626                     _set_led_state:	
  4693  0626                     l6232:	
  4694                           ;incstack = 0
  4695                           ; Regs used in _set_led_state: [wreg+status,2+status,0]
  4696                           
  4697                           
  4698                           ;app_led.c: 271: if (LED_STATE_ON == state)
  4699  0626  0B55               	decfsz	set_led_state@state,w
  4700  0627  2E37               	goto	l6236
  4701                           
  4702                           ;app_led.c: 272: {
  4703                           ;app_led.c: 273: led_index |= index;
  4704  0628  0853               	movf	set_led_state@index,w
  4705  0629  00D6               	movwf	??_set_led_state
  4706  062A  0854               	movf	set_led_state@index+1,w
  4707  062B  00D7               	movwf	??_set_led_state+1
  4708  062C  01D8               	clrf	??_set_led_state+2
  4709  062D  01D9               	clrf	??_set_led_state+3
  4710  062E  0856               	movf	??_set_led_state,w
  4711  062F  04A0               	iorwf	_led_index,f
  4712  0630  0857               	movf	??_set_led_state+1,w
  4713  0631  04A1               	iorwf	_led_index+1,f
  4714  0632  0858               	movf	??_set_led_state+2,w
  4715  0633  04A2               	iorwf	_led_index+2,f
  4716  0634  0859               	movf	??_set_led_state+3,w
  4717  0635  04A3               	iorwf	_led_index+3,f
  4718                           
  4719                           ;app_led.c: 274: }
  4720  0636  0008               	return
  4721  0637                     l6236:	
  4722                           
  4723                           ;app_led.c: 275: else if (LED_STATE_OFF == state)
  4724  0637  0855               	movf	set_led_state@state,w
  4725  0638  1D03               	btfss	3,2
  4726  0639  0008               	return
  4727                           
  4728                           ;app_led.c: 276: {
  4729                           ;app_led.c: 277: led_index &= ~index;
  4730  063A  0854               	movf	set_led_state@index+1,w
  4731  063B  00D7               	movwf	??_set_led_state+1
  4732  063C  0853               	movf	set_led_state@index,w
  4733  063D  00D6               	movwf	??_set_led_state
  4734  063E  09D6               	comf	??_set_led_state,f
  4735  063F  09D7               	comf	??_set_led_state+1,f
  4736  0640  0856               	movf	??_set_led_state,w
  4737  0641  00D8               	movwf	??_set_led_state+2
  4738  0642  0857               	movf	??_set_led_state+1,w
  4739  0643  00D9               	movwf	??_set_led_state+3
  4740  0644  3000               	movlw	0
  4741  0645  1BD9               	btfsc	??_set_led_state+3,7
  4742  0646  30FF               	movlw	255
  4743  0647  00DA               	movwf	??_set_led_state+4
  4744  0648  00DB               	movwf	??_set_led_state+5
  4745  0649  0858               	movf	??_set_led_state+2,w
  4746  064A  05A0               	andwf	_led_index,f
  4747  064B  0859               	movf	??_set_led_state+3,w
  4748  064C  05A1               	andwf	_led_index+1,f
  4749  064D  085A               	movf	??_set_led_state+4,w
  4750  064E  05A2               	andwf	_led_index+2,f
  4751  064F  085B               	movf	??_set_led_state+5,w
  4752  0650  05A3               	andwf	_led_index+3,f
  4753  0651  0008               	return
  4754  0652                     __end_of_set_led_state:	
  4755                           
  4756                           	psect	text34
  4757  074B                     __ptext34:	
  4758 ;; *************** function _ChargePwmOut *****************
  4759 ;; Defined at:
  4760 ;;		line 38 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_charge.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;  Duty            1    wreg     unsigned char 
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;  Duty            1    0[BANK0 ] unsigned char 
  4765 ;; Return value:  Size  Location     Type
  4766 ;;                  1    wreg      void 
  4767 ;; Registers used:
  4768 ;;		wreg, status,2, status,0
  4769 ;; Tracked objects:
  4770 ;;		On entry : 100/0
  4771 ;;		On exit  : 0/0
  4772 ;;		Unchanged: 0/0
  4773 ;; Data sizes:     COMMON   BANK0   BANK1
  4774 ;;      Params:         0       0       0
  4775 ;;      Locals:         0       1       0
  4776 ;;      Temps:          0       0       0
  4777 ;;      Totals:         0       1       0
  4778 ;;Total ram usage:        1 bytes
  4779 ;; Hardware stack levels used:    1
  4780 ;; Hardware stack levels required when called:    3
  4781 ;; This function calls:
  4782 ;;		Nothing
  4783 ;; This function is called by:
  4784 ;;		_Charge_Check
  4785 ;;		_GotoSleep
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           
  4790                           ;psect for function _ChargePwmOut
  4791  074B                     _ChargePwmOut:	
  4792                           
  4793                           ;incstack = 0
  4794                           ; Regs used in _ChargePwmOut: [wreg+status,2+status,0]
  4795                           ;ChargePwmOut@Duty stored from wreg
  4796  074B  00D3               	movwf	ChargePwmOut@Duty
  4797                           
  4798                           ;app_charge.c: 40: if(Duty == 0)
  4799  074C  0853               	movf	ChargePwmOut@Duty,w
  4800  074D  1D03               	btfss	3,2
  4801  074E  2F53               	goto	l1034
  4802                           
  4803                           ;app_charge.c: 41: {
  4804                           ;app_charge.c: 42: PWM0EN = 0;
  4805  074F  101B               	bcf	27,0	;volatile
  4806                           
  4807                           ;app_charge.c: 43: TRISB3 = 1;
  4808  0750  1683               	bsf	3,5	;RP0=1, select bank1
  4809  0751  1586               	bsf	6,3	;volatile
  4810                           
  4811                           ;app_charge.c: 44: }
  4812  0752  0008               	return
  4813  0753                     l1034:	
  4814                           
  4815                           ;app_charge.c: 45: else
  4816                           ;app_charge.c: 46: {
  4817                           ;app_charge.c: 47: if(!PWM0EN)
  4818  0753  1C1B               	btfss	27,0	;volatile
  4819                           
  4820                           ;app_charge.c: 48: {
  4821                           ;app_charge.c: 49: PWM0EN = 1;
  4822  0754  141B               	bsf	27,0	;volatile
  4823                           
  4824                           ;app_charge.c: 50: }
  4825                           ;app_charge.c: 51: {TRISB3 = 0;};
  4826  0755  1683               	bsf	3,5	;RP0=1, select bank1
  4827  0756  1186               	bcf	6,3	;volatile
  4828                           
  4829                           ;app_charge.c: 52: PWMD0L = Duty;
  4830  0757  1283               	bcf	3,5	;RP0=0, select bank0
  4831  0758  0853               	movf	ChargePwmOut@Duty,w
  4832  0759  0096               	movwf	22	;volatile
  4833  075A  0008               	return
  4834  075B                     __end_of_ChargePwmOut:	
  4835                           
  4836                           	psect	text35
  4837  07FB                     __ptext35:	
  4838 ;; *************** function _app_adc_process *****************
  4839 ;; Defined at:
  4840 ;;		line 213 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_adc.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;		None
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;		None
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  1    wreg      void 
  4847 ;; Registers used:
  4848 ;;		wreg, status,2, status,0, pclath, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMMON   BANK0   BANK1
  4854 ;;      Params:         0       0       0
  4855 ;;      Locals:         0       0       0
  4856 ;;      Temps:          0       0       0
  4857 ;;      Totals:         0       0       0
  4858 ;;Total ram usage:        0 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    6
  4861 ;; This function calls:
  4862 ;;		_app_adc_bat_voltage_check
  4863 ;; This function is called by:
  4864 ;;		_main
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           
  4869                           ;psect for function _app_adc_process
  4870  07FB                     _app_adc_process:	
  4871                           
  4872                           ;app_adc.c: 216: app_adc_bat_voltage_check();
  4873                           
  4874                           ;incstack = 0
  4875                           ; Regs used in _app_adc_process: [wreg+status,2+status,0+pclath+cstack]
  4876  07FB  2A95               	ljmp	l6400
  4877  07FC                     __end_of_app_adc_process:	
  4878                           
  4879                           	psect	text36
  4880  0295                     __ptext36:	
  4881 ;; *************** function _app_adc_bat_voltage_check *****************
  4882 ;; Defined at:
  4883 ;;		line 98 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_adc.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;		None
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;		None
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, status,2, status,0, pclath, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMMON   BANK0   BANK1
  4897 ;;      Params:         0       0       0
  4898 ;;      Locals:         0       0       0
  4899 ;;      Temps:          0       1       0
  4900 ;;      Totals:         0       1       0
  4901 ;;Total ram usage:        1 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    5
  4904 ;; This function calls:
  4905 ;;		_AdcResultChk
  4906 ;;		_app_process_set_water_state
  4907 ;;		_app_process_set_work_state
  4908 ;; This function is called by:
  4909 ;;		_app_adc_process
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           
  4914                           ;psect for function _app_adc_bat_voltage_check
  4915  0295                     _app_adc_bat_voltage_check:	
  4916  0295                     l6400:	
  4917                           ;incstack = 0
  4918                           ; Regs used in _app_adc_bat_voltage_check: [wreg+status,2+status,0+pclath+cstack]
  4919                           
  4920                           
  4921                           ;app_adc.c: 100: ADCON0 = 0b00111101;
  4922  0295  303D               	movlw	61
  4923  0296  1283               	bcf	3,5	;RP0=0, select bank0
  4924  0297  009F               	movwf	31	;volatile
  4925                           
  4926                           ;app_adc.c: 101: _delay((unsigned long)((20)*(16000000UL/4000000.0)));
  4927  0298  301A               	movlw	26
  4928  0299  1283               	bcf	3,5	;RP0=0, select bank0
  4929  029A  00E0               	movwf	??_app_adc_bat_voltage_check
  4930  029B                     u3157:	
  4931  029B  0BE0               	decfsz	??_app_adc_bat_voltage_check,f
  4932  029C  2A9B               	goto	u3157
  4933                           
  4934                           ;app_adc.c: 102: ADCON1 = 0b00000000;
  4935  029D  1683               	bsf	3,5	;RP0=1, select bank1
  4936  029E  019F               	clrf	31	;volatile
  4937                           
  4938                           ;app_adc.c: 103: _delay((unsigned long)((20)*(16000000UL/4000000.0)));
  4939  029F  301A               	movlw	26
  4940  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  4941  02A1  00E0               	movwf	??_app_adc_bat_voltage_check
  4942  02A2                     u3167:	
  4943  02A2  0BE0               	decfsz	??_app_adc_bat_voltage_check,f
  4944  02A3  2AA2               	goto	u3167
  4945  02A4  300F               	movlw	15
  4946                           
  4947                           ;app_adc.c: 105: adresultvdd = AdcResultChk(15,0);
  4948  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  4949  02A6  01D9               	clrf	AdcResultChk@adldo
  4950  02A7  2778               	fcall	_AdcResultChk
  4951  02A8  085A               	movf	?_AdcResultChk+1,w
  4952  02A9  00BB               	movwf	_adresultvdd+1	;volatile
  4953  02AA  0859               	movf	?_AdcResultChk,w
  4954  02AB  00BA               	movwf	_adresultvdd	;volatile
  4955                           
  4956                           ;app_adc.c: 120: if(app_charge.Charge)
  4957  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  4958  02AD  1C20               	btfss	_app_charge^(0+128),0
  4959  02AE  2AC4               	goto	l6422
  4960                           
  4961                           ;app_adc.c: 121: {
  4962                           ;app_adc.c: 122: if(adresultvdd < 1535)
  4963  02AF  3005               	movlw	5
  4964  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  4965  02B1  023B               	subwf	_adresultvdd+1,w	;volatile
  4966  02B2  30FF               	movlw	255
  4967  02B3  1903               	skipnz
  4968  02B4  023A               	subwf	_adresultvdd,w	;volatile
  4969  02B5  1803               	skipnc
  4970  02B6  2AC2               	goto	l6420
  4971                           
  4972                           ;app_adc.c: 123: {
  4973                           ;app_adc.c: 124: CntLowPowerOff++;
  4974  02B7  0AD0               	incf	_CntLowPowerOff,f	;volatile
  4975                           
  4976                           ;app_adc.c: 125: if(CntLowPowerOff > 250)
  4977  02B8  30FB               	movlw	251
  4978  02B9  0250               	subwf	_CntLowPowerOff,w	;volatile
  4979  02BA  1C03               	skipc
  4980  02BB  0008               	return
  4981                           
  4982                           ;app_adc.c: 126: {
  4983                           ;app_adc.c: 127: CntLowPowerOff = 0;
  4984  02BC  01D0               	clrf	_CntLowPowerOff	;volatile
  4985                           
  4986                           ;app_adc.c: 128: app_charge.Remind = 0;
  4987  02BD  1683               	bsf	3,5	;RP0=1, select bank1
  4988  02BE  1220               	bcf	_app_charge^(0+128),4
  4989                           
  4990                           ;app_adc.c: 129: app_charge.LowLed = 0;
  4991  02BF  01A7               	clrf	(_app_charge^(0+128)+7)
  4992                           
  4993                           ;app_adc.c: 130: app_charge.LowPower = 0;
  4994  02C0  01A6               	clrf	(_app_charge^(0+128)+6)
  4995  02C1  0008               	return
  4996  02C2                     l6420:	
  4997                           
  4998                           ;app_adc.c: 133: else
  4999                           ;app_adc.c: 134: {
  5000                           ;app_adc.c: 135: CntLowPowerOff = 0;
  5001  02C2  01D0               	clrf	_CntLowPowerOff	;volatile
  5002  02C3  0008               	return
  5003  02C4                     l6422:	
  5004                           
  5005                           ;app_adc.c: 138: else
  5006                           ;app_adc.c: 139: {
  5007                           ;app_adc.c: 140: if(adresultvdd > 1694 - 20)
  5008  02C4  3006               	movlw	6
  5009  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  5010  02C6  023B               	subwf	_adresultvdd+1,w	;volatile
  5011  02C7  308B               	movlw	139
  5012  02C8  1903               	skipnz
  5013  02C9  023A               	subwf	_adresultvdd,w	;volatile
  5014  02CA  1C03               	skipc
  5015  02CB  2AE2               	goto	l6442
  5016                           
  5017                           ;app_adc.c: 141: {
  5018                           ;app_adc.c: 142: CntLowPowerOff++;
  5019  02CC  0AD0               	incf	_CntLowPowerOff,f	;volatile
  5020                           
  5021                           ;app_adc.c: 143: if(CntLowPowerOff > 100)
  5022  02CD  3065               	movlw	101
  5023  02CE  0250               	subwf	_CntLowPowerOff,w	;volatile
  5024  02CF  1C03               	skipc
  5025  02D0  2AE3               	goto	l6444
  5026                           
  5027                           ;app_adc.c: 144: {
  5028                           ;app_adc.c: 145: CntLowPowerOff = 0;
  5029  02D1  01D0               	clrf	_CntLowPowerOff	;volatile
  5030                           
  5031                           ;app_adc.c: 146: app_charge.Remind = 0;
  5032  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  5033  02D3  1220               	bcf	_app_charge^(0+128),4
  5034                           
  5035                           ;app_adc.c: 148: if (!app_charge.LowPower)
  5036  02D4  0826               	movf	(_app_charge^(0+128)+6),w
  5037  02D5  1D03               	btfss	3,2
  5038  02D6  2AE3               	goto	l6444
  5039                           
  5040                           ;app_adc.c: 149: {
  5041                           ;app_adc.c: 150: app_process_set_work_state(WORK_STATE_POWEROFF);
  5042  02D7  3000               	movlw	0
  5043  02D8  27EB               	fcall	_app_process_set_work_state
  5044                           
  5045                           ;app_adc.c: 151: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
  5046  02D9  3000               	movlw	0
  5047  02DA  27F0               	fcall	_app_process_set_water_state
  5048                           
  5049                           ;app_adc.c: 152: app_charge.LowPower = 1;
  5050  02DB  1683               	bsf	3,5	;RP0=1, select bank1
  5051  02DC  01A6               	clrf	(_app_charge^(0+128)+6)
  5052  02DD  0AA6               	incf	(_app_charge^(0+128)+6),f
  5053                           
  5054                           ;app_adc.c: 153: app_charge.LowLed = 1;
  5055  02DE  01A7               	clrf	(_app_charge^(0+128)+7)
  5056  02DF  0AA7               	incf	(_app_charge^(0+128)+7),f
  5057                           
  5058                           ;app_adc.c: 154: app_charge.LowLed_cnt = 0;
  5059  02E0  01A8               	clrf	(_app_charge^(0+128)+8)
  5060  02E1  2AE3               	goto	l6444
  5061  02E2                     l6442:	
  5062                           
  5063                           ;app_adc.c: 158: else
  5064                           ;app_adc.c: 159: {
  5065                           ;app_adc.c: 160: CntLowPowerOff = 0;
  5066  02E2  01D0               	clrf	_CntLowPowerOff	;volatile
  5067  02E3                     l6444:	
  5068                           
  5069                           ;app_adc.c: 161: }
  5070                           ;app_adc.c: 163: if(adresultvdd > 1445 -15)
  5071  02E3  3005               	movlw	5
  5072  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  5073  02E5  023B               	subwf	_adresultvdd+1,w	;volatile
  5074  02E6  3097               	movlw	151
  5075  02E7  1903               	skipnz
  5076  02E8  023A               	subwf	_adresultvdd,w	;volatile
  5077  02E9  1C03               	skipc
  5078  02EA  2AF4               	goto	l6454
  5079  02EB  3065               	movlw	101
  5080                           
  5081                           ;app_adc.c: 164: {
  5082                           ;app_adc.c: 165: bat_remind_delay++;
  5083  02EC  0ACE               	incf	_bat_remind_delay,f
  5084                           
  5085                           ;app_adc.c: 166: if(bat_remind_delay > 100)
  5086  02ED  024E               	subwf	_bat_remind_delay,w
  5087  02EE  1C03               	skipc
  5088  02EF  0008               	return
  5089                           
  5090                           ;app_adc.c: 167: {
  5091                           ;app_adc.c: 168: bat_remind_delay = 0;
  5092  02F0  01CE               	clrf	_bat_remind_delay
  5093                           
  5094                           ;app_adc.c: 169: app_charge.Remind = 1;
  5095  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  5096  02F2  1620               	bsf	_app_charge^(0+128),4
  5097  02F3  0008               	return
  5098  02F4                     l6454:	
  5099                           
  5100                           ;app_adc.c: 172: else
  5101                           ;app_adc.c: 173: {
  5102                           ;app_adc.c: 174: bat_remind_delay = 0;
  5103  02F4  01CE               	clrf	_bat_remind_delay
  5104  02F5  0008               	return
  5105  02F6                     __end_of_app_adc_bat_voltage_check:	
  5106                           
  5107                           	psect	text37
  5108  07EB                     __ptext37:	
  5109 ;; *************** function _app_process_set_work_state *****************
  5110 ;; Defined at:
  5111 ;;		line 34 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_process.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;  states          1    wreg     enum E511
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;  states          1    0[BANK0 ] enum E511
  5116 ;; Return value:  Size  Location     Type
  5117 ;;                  1    wreg      void 
  5118 ;; Registers used:
  5119 ;;		wreg, status,2
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/100
  5122 ;;		On exit  : 100/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMMON   BANK0   BANK1
  5125 ;;      Params:         0       0       0
  5126 ;;      Locals:         0       1       0
  5127 ;;      Temps:          0       0       0
  5128 ;;      Totals:         0       1       0
  5129 ;;Total ram usage:        1 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    3
  5132 ;; This function calls:
  5133 ;;		Nothing
  5134 ;; This function is called by:
  5135 ;;		_app_adc_bat_voltage_check
  5136 ;;		_Charge_Check
  5137 ;;		_handle_key_pwr
  5138 ;;		_process_led_remind_low_power
  5139 ;;		_app_process_working
  5140 ;;		_main
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           
  5145                           ;psect for function _app_process_set_work_state
  5146  07EB                     _app_process_set_work_state:	
  5147                           
  5148                           ;incstack = 0
  5149                           ; Regs used in _app_process_set_work_state: [wreg+status,2]
  5150                           ;app_process_set_work_state@states stored from wreg
  5151  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  5152  07EC  00D3               	movwf	app_process_set_work_state@states
  5153                           
  5154                           ;app_process.c: 36: app_work_state = states;
  5155  07ED  00ED               	movwf	_app_work_state	;volatile
  5156                           
  5157                           ;app_process.c: 37: work_step = 0;
  5158  07EE  01C4               	clrf	_work_step
  5159  07EF  0008               	return
  5160  07F0                     __end_of_app_process_set_work_state:	
  5161                           
  5162                           	psect	text38
  5163  07F0                     __ptext38:	
  5164 ;; *************** function _app_process_set_water_state *****************
  5165 ;; Defined at:
  5166 ;;		line 17 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_water_process.
      +c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;  states          1    wreg     enum E551
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  states          1    0[BANK0 ] enum E551
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      void 
  5173 ;; Registers used:
  5174 ;;		wreg, status,2
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 100/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMMON   BANK0   BANK1
  5180 ;;      Params:         0       0       0
  5181 ;;      Locals:         0       1       0
  5182 ;;      Temps:          0       0       0
  5183 ;;      Totals:         0       1       0
  5184 ;;Total ram usage:        1 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; Hardware stack levels required when called:    3
  5187 ;; This function calls:
  5188 ;;		Nothing
  5189 ;; This function is called by:
  5190 ;;		_app_adc_bat_voltage_check
  5191 ;;		_handle_key_water
  5192 ;;		_process_led_remind_low_power
  5193 ;;		_app_process_charing
  5194 ;;		_main
  5195 ;;		_app_process_water_working
  5196 ;;		_app_process_water_mdoe_led
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           
  5201                           ;psect for function _app_process_set_water_state
  5202  07F0                     _app_process_set_water_state:	
  5203                           
  5204                           ;incstack = 0
  5205                           ; Regs used in _app_process_set_water_state: [wreg+status,2]
  5206                           ;app_process_set_water_state@states stored from wreg
  5207  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  5208  07F1  00D3               	movwf	app_process_set_water_state@states
  5209                           
  5210                           ;app_water_process.c: 19: water_work_state = states;
  5211  07F2  00EC               	movwf	_water_work_state	;volatile
  5212                           
  5213                           ;app_water_process.c: 20: water_work_step = 0;
  5214  07F3  01BE               	clrf	_water_work_step
  5215  07F4  0008               	return
  5216  07F5                     __end_of_app_process_set_water_state:	
  5217                           
  5218                           	psect	text39
  5219  0778                     __ptext39:	
  5220 ;; *************** function _AdcResultChk *****************
  5221 ;; Defined at:
  5222 ;;		line 54 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_adc.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  adch            1    wreg     unsigned char 
  5225 ;;  adldo           1    6[BANK0 ] unsigned char 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  adch            1    9[BANK0 ] unsigned char 
  5228 ;;  ad_value        2   11[BANK0 ] volatile unsigned int 
  5229 ;;  ad_temp         2    0        volatile unsigned int 
  5230 ;;  ad_value_min    2    0        volatile unsigned int 
  5231 ;;  ad_value_max    2    0        volatile unsigned int 
  5232 ;;  i               1   10[BANK0 ] volatile unsigned char 
  5233 ;; Return value:  Size  Location     Type
  5234 ;;                  2    6[BANK0 ] unsigned int 
  5235 ;; Registers used:
  5236 ;;		wreg, status,2, status,0, pclath, cstack
  5237 ;; Tracked objects:
  5238 ;;		On entry : 100/0
  5239 ;;		On exit  : 100/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMMON   BANK0   BANK1
  5242 ;;      Params:         0       3       0
  5243 ;;      Locals:         0       4       0
  5244 ;;      Temps:          0       0       0
  5245 ;;      Totals:         0       7       0
  5246 ;;Total ram usage:        7 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; Hardware stack levels required when called:    4
  5249 ;; This function calls:
  5250 ;;		_AdcOneChk
  5251 ;; This function is called by:
  5252 ;;		_app_adc_bat_voltage_check
  5253 ;;		_Charge_Check
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           
  5258                           ;psect for function _AdcResultChk
  5259  0778                     _AdcResultChk:	
  5260                           
  5261                           ;incstack = 0
  5262                           ; Regs used in _AdcResultChk: [wreg+status,2+status,0+pclath+cstack]
  5263                           ;AdcResultChk@adch stored from wreg
  5264  0778  00DC               	movwf	AdcResultChk@adch
  5265                           
  5266                           ;app_adc.c: 56: volatile unsigned char i = 0;
  5267  0779  01DD               	clrf	AdcResultChk@i	;volatile
  5268                           
  5269                           ;app_adc.c: 57: volatile unsigned int ad_value;
  5270                           ;app_adc.c: 58: volatile unsigned int ad_value_max;
  5271                           ;app_adc.c: 59: volatile unsigned int ad_value_min;
  5272                           ;app_adc.c: 61: volatile unsigned int ad_temp;
  5273                           ;app_adc.c: 63: ad_value = AdcOneChk(adch,adldo);
  5274  077A  0859               	movf	AdcResultChk@adldo,w
  5275  077B  00D3               	movwf	AdcOneChk@adldo
  5276  077C  25CD               	fcall	_AdcOneChk
  5277  077D  0854               	movf	?_AdcOneChk+1,w
  5278  077E  00DF               	movwf	AdcResultChk@ad_value+1	;volatile
  5279  077F  0853               	movf	?_AdcOneChk,w
  5280  0780  00DE               	movwf	AdcResultChk@ad_value	;volatile
  5281                           
  5282                           ;app_adc.c: 64: return ad_value;
  5283  0781  085F               	movf	AdcResultChk@ad_value+1,w	;volatile
  5284  0782  00DA               	movwf	?_AdcResultChk+1
  5285  0783  085E               	movf	AdcResultChk@ad_value,w	;volatile
  5286  0784  00D9               	movwf	?_AdcResultChk
  5287  0785  0008               	return
  5288  0786                     __end_of_AdcResultChk:	
  5289                           
  5290                           	psect	text40
  5291  05CD                     __ptext40:	
  5292 ;; *************** function _AdcOneChk *****************
  5293 ;; Defined at:
  5294 ;;		line 27 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_adc.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;  adch            1    wreg     unsigned char 
  5297 ;;  adldo           1    0[BANK0 ] unsigned char 
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;  adch            1    0[COMMON] unsigned char 
  5300 ;;  ad_result       2    4[BANK0 ] volatile unsigned int 
  5301 ;;  i               1    3[BANK0 ] volatile unsigned char 
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  2    0[BANK0 ] unsigned int 
  5304 ;; Registers used:
  5305 ;;		wreg, status,2, status,0
  5306 ;; Tracked objects:
  5307 ;;		On entry : 100/0
  5308 ;;		On exit  : 100/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMMON   BANK0   BANK1
  5311 ;;      Params:         0       2       0
  5312 ;;      Locals:         0       3       0
  5313 ;;      Temps:          0       1       0
  5314 ;;      Totals:         0       6       0
  5315 ;;Total ram usage:        6 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:    3
  5318 ;; This function calls:
  5319 ;;		Nothing
  5320 ;; This function is called by:
  5321 ;;		_AdcResultChk
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           
  5326                           ;psect for function _AdcOneChk
  5327  05CD                     _AdcOneChk:	
  5328                           
  5329                           ;app_adc.c: 29: volatile unsigned char i = 0;
  5330                           
  5331                           ;incstack = 0
  5332                           ; Regs used in _AdcOneChk: [wreg+status,2+status,0]
  5333  05CD  01D6               	clrf	AdcOneChk@i	;volatile
  5334                           
  5335                           ;app_adc.c: 30: volatile unsigned int ad_result;
  5336                           ;app_adc.c: 33: _delay((unsigned long)((20)*(16000000UL/4000000.0)));
  5337  05CE  301A               	movlw	26
  5338  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  5339  05D0  00D5               	movwf	??_AdcOneChk
  5340  05D1                     u3177:	
  5341  05D1  0BD5               	decfsz	??_AdcOneChk,f
  5342  05D2  2DD1               	goto	u3177
  5343  05D3  0000               	nop	;# 
  5344  05D4  0000               	nop	;# 
  5345  05D5  0000               	nop	;# 
  5346  05D6  0000               	nop	;# 
  5347                           
  5348                           ;app_adc.c: 39: GODONE = 1;
  5349  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  5350  05D8  149F               	bsf	31,1	;volatile
  5351  05D9                     l503:	
  5352                           ;app_adc.c: 41: while(GODONE)
  5353                           
  5354  05D9  1C9F               	btfss	31,1	;volatile
  5355  05DA  2DE2               	goto	l6250
  5356  05DB  0064               	clrwdt	;# 
  5357                           
  5358                           ;app_adc.c: 44: if(0 == (--i))
  5359  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  5360  05DD  0BD6               	decfsz	AdcOneChk@i,f	;volatile
  5361  05DE  2DD9               	goto	l503
  5362                           
  5363                           ;app_adc.c: 45: return 0;
  5364  05DF  01D3               	clrf	?_AdcOneChk
  5365  05E0  01D4               	clrf	?_AdcOneChk+1
  5366  05E1  0008               	return
  5367  05E2                     l6250:	
  5368                           
  5369                           ;app_adc.c: 46: }
  5370                           ;app_adc.c: 47: ad_result=ADRESH;
  5371  05E2  081E               	movf	30,w	;volatile
  5372  05E3  00D7               	movwf	AdcOneChk@ad_result	;volatile
  5373  05E4  01D8               	clrf	AdcOneChk@ad_result+1	;volatile
  5374                           
  5375                           ;app_adc.c: 48: ad_result= (ad_result<<4);
  5376  05E5  0ED7               	swapf	AdcOneChk@ad_result,f	;volatile
  5377  05E6  0ED8               	swapf	AdcOneChk@ad_result+1,f	;volatile
  5378  05E7  30F0               	movlw	240
  5379  05E8  05D8               	andwf	AdcOneChk@ad_result+1,f	;volatile
  5380  05E9  0857               	movf	AdcOneChk@ad_result,w	;volatile
  5381  05EA  390F               	andlw	15
  5382  05EB  04D8               	iorwf	AdcOneChk@ad_result+1,f	;volatile
  5383  05EC  30F0               	movlw	240
  5384  05ED  05D7               	andwf	AdcOneChk@ad_result,f	;volatile
  5385                           
  5386                           ;app_adc.c: 49: ad_result +=(ADRESL>>4);
  5387  05EE  1683               	bsf	3,5	;RP0=1, select bank1
  5388  05EF  0E1E               	swapf	30,w	;volatile
  5389  05F0  390F               	andlw	15
  5390  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  5391  05F2  07D7               	addwf	AdcOneChk@ad_result,f	;volatile
  5392  05F3  1803               	skipnc
  5393  05F4  0AD8               	incf	AdcOneChk@ad_result+1,f	;volatile
  5394                           
  5395                           ;app_adc.c: 51: return ad_result;
  5396  05F5  0858               	movf	AdcOneChk@ad_result+1,w	;volatile
  5397  05F6  00D4               	movwf	?_AdcOneChk+1
  5398  05F7  0857               	movf	AdcOneChk@ad_result,w	;volatile
  5399  05F8  00D3               	movwf	?_AdcOneChk
  5400  05F9  0008               	return
  5401  05FA                     __end_of_AdcOneChk:	
  5402                           
  5403                           	psect	text41
  5404  079D                     __ptext41:	
  5405 ;; *************** function _Timer2Config *****************
  5406 ;; Defined at:
  5407 ;;		line 52 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\main.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;		None
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;		None
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  1    wreg      void 
  5414 ;; Registers used:
  5415 ;;		wreg
  5416 ;; Tracked objects:
  5417 ;;		On entry : 100/0
  5418 ;;		On exit  : 100/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMMON   BANK0   BANK1
  5421 ;;      Params:         0       0       0
  5422 ;;      Locals:         0       0       0
  5423 ;;      Temps:          0       0       0
  5424 ;;      Totals:         0       0       0
  5425 ;;Total ram usage:        0 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    3
  5428 ;; This function calls:
  5429 ;;		Nothing
  5430 ;; This function is called by:
  5431 ;;		_main
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           
  5436                           ;psect for function _Timer2Config
  5437  079D                     _Timer2Config:	
  5438                           
  5439                           ;main.c: 62: PR2 = 250;
  5440                           
  5441                           ;incstack = 0
  5442                           ; Regs used in _Timer2Config: [wreg]
  5443  079D  30FA               	movlw	250
  5444  079E  1683               	bsf	3,5	;RP0=1, select bank1
  5445  079F  0092               	movwf	18	;volatile
  5446                           
  5447                           ;main.c: 63: TMR2IF = 0;
  5448  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  5449  07A1  108C               	bcf	12,1	;volatile
  5450                           
  5451                           ;main.c: 64: TMR2IE = 1;
  5452  07A2  1683               	bsf	3,5	;RP0=1, select bank1
  5453  07A3  148C               	bsf	12,1	;volatile
  5454                           
  5455                           ;main.c: 65: T2CON = 0B00011100;
  5456  07A4  301C               	movlw	28
  5457  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  5458  07A6  0092               	movwf	18	;volatile
  5459  07A7  0008               	return
  5460  07A8                     __end_of_Timer2Config:	
  5461                           
  5462                           	psect	text42
  5463  07D1                     __ptext42:	
  5464 ;; *************** function _Timer0Cofng *****************
  5465 ;; Defined at:
  5466 ;;		line 40 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\main.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;		None
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, status,2
  5475 ;; Tracked objects:
  5476 ;;		On entry : 100/100
  5477 ;;		On exit  : 100/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1
  5480 ;;      Params:         0       0       0
  5481 ;;      Locals:         0       0       0
  5482 ;;      Temps:          0       0       0
  5483 ;;      Totals:         0       0       0
  5484 ;;Total ram usage:        0 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    3
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_main
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           
  5495                           ;psect for function _Timer0Cofng
  5496  07D1                     _Timer0Cofng:	
  5497                           
  5498                           ;main.c: 42: OPTION_REG = 0B00000000;
  5499                           
  5500                           ;incstack = 0
  5501                           ; Regs used in _Timer0Cofng: [wreg+status,2]
  5502  07D1  0181               	clrf	1	;volatile
  5503                           
  5504                           ;main.c: 45: TMR0 = 165;
  5505  07D2  30A5               	movlw	165
  5506  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  5507  07D4  0081               	movwf	1	;volatile
  5508                           
  5509                           ;main.c: 47: T0IF = 0;
  5510  07D5  110B               	bcf	11,2	;volatile
  5511                           
  5512                           ;main.c: 48: T0IE = 1;
  5513  07D6  168B               	bsf	11,5	;volatile
  5514  07D7  0008               	return
  5515  07D8                     __end_of_Timer0Cofng:	
  5516                           
  5517                           	psect	text43
  5518  07D8                     __ptext43:	
  5519 ;; *************** function _PwmConfig *****************
  5520 ;; Defined at:
  5521 ;;		line 76 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\main.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;		None
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;		None
  5526 ;; Return value:  Size  Location     Type
  5527 ;;                  1    wreg      void 
  5528 ;; Registers used:
  5529 ;;		wreg, status,2
  5530 ;; Tracked objects:
  5531 ;;		On entry : 100/100
  5532 ;;		On exit  : 100/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMMON   BANK0   BANK1
  5535 ;;      Params:         0       0       0
  5536 ;;      Locals:         0       0       0
  5537 ;;      Temps:          0       0       0
  5538 ;;      Totals:         0       0       0
  5539 ;;Total ram usage:        0 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; Hardware stack levels required when called:    3
  5542 ;; This function calls:
  5543 ;;		Nothing
  5544 ;; This function is called by:
  5545 ;;		_main
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           
  5550                           ;psect for function _PwmConfig
  5551  07D8                     _PwmConfig:	
  5552                           
  5553                           ;main.c: 78: PWMCON = 0B01100000;
  5554                           
  5555                           ;incstack = 0
  5556                           ; Regs used in _PwmConfig: [wreg+status,2]
  5557  07D8  3060               	movlw	96
  5558  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  5559  07DA  009B               	movwf	27	;volatile
  5560                           
  5561                           ;main.c: 79: PWMTH = 0B00000000;
  5562  07DB  019A               	clrf	26	;volatile
  5563                           
  5564                           ;main.c: 80: PWMTL = 99;
  5565  07DC  3063               	movlw	99
  5566  07DD  0099               	movwf	25	;volatile
  5567  07DE  0008               	return
  5568  07DF                     __end_of_PwmConfig:	
  5569                           
  5570                           	psect	text44
  5571  048F                     __ptext44:	
  5572 ;; *************** function _Timer2_Isr *****************
  5573 ;; Defined at:
  5574 ;;		line 207 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\main.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;		None
  5577 ;; Auto vars:     Size  Location     Type
  5578 ;;		None
  5579 ;; Return value:  Size  Location     Type
  5580 ;;                  1    wreg      void 
  5581 ;; Registers used:
  5582 ;;		wreg, status,2, status,0, pclath, cstack
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 100/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMMON   BANK0   BANK1
  5588 ;;      Params:         0       0       0
  5589 ;;      Locals:         0       0       0
  5590 ;;      Temps:          2       0       0
  5591 ;;      Totals:         2       0       0
  5592 ;;Total ram usage:        2 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; Hardware stack levels required when called:    2
  5595 ;; This function calls:
  5596 ;;		_Mode_control
  5597 ;;		_MotorWaterDrive
  5598 ;;		_led_charge_pwm
  5599 ;;		_process_led
  5600 ;; This function is called by:
  5601 ;;		Interrupt level 1
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           
  5606                           ;psect for function _Timer2_Isr
  5607  048F                     _Timer2_Isr:	
  5608                           
  5609                           ;main.c: 221: if (PWMIF)
  5610  048F  1283               	bcf	3,5	;RP0=0, select bank0
  5611  0490  190C               	btfsc	12,2	;volatile
  5612                           
  5613                           ;main.c: 222: {
  5614                           ;main.c: 223: PWMIF = 0;
  5615  0491  110C               	bcf	12,2	;volatile
  5616                           
  5617                           ;main.c: 224: }
  5618                           ;main.c: 226: if (T0IF)
  5619  0492  1D0B               	btfss	11,2	;volatile
  5620  0493  2C99               	goto	i1l7246
  5621                           
  5622                           ;main.c: 227: {
  5623                           ;main.c: 228: TMR0 = 165;
  5624  0494  30A5               	movlw	165
  5625  0495  0081               	movwf	1	;volatile
  5626                           
  5627                           ;main.c: 229: T0IF = 0;
  5628  0496  110B               	bcf	11,2	;volatile
  5629                           
  5630                           ;main.c: 230: Mode_control();
  5631  0497  2346               	fcall	_Mode_control
  5632                           
  5633                           ;main.c: 231: led_charge_pwm();
  5634  0498  2139               	fcall	_led_charge_pwm
  5635  0499                     i1l7246:	
  5636                           
  5637                           ;main.c: 239: }
  5638                           ;main.c: 240: if (TMR2IF)
  5639  0499  1283               	bcf	3,5	;RP0=0, select bank0
  5640  049A  1C8C               	btfss	12,1	;volatile
  5641  049B  2CB9               	goto	i1l7266
  5642                           
  5643                           ;main.c: 241: {
  5644                           ;main.c: 242: TMR2IF = 0;
  5645  049C  108C               	bcf	12,1	;volatile
  5646                           
  5647                           ;main.c: 243: Cnt10ms++;
  5648  049D  1683               	bsf	3,5	;RP0=1, select bank1
  5649  049E  0ACD               	incf	_Cnt10ms^(0+128),f
  5650  049F  1903               	skipnz
  5651  04A0  0ACE               	incf	(_Cnt10ms+1)^(0+128),f
  5652                           
  5653                           ;main.c: 244: Cnt1ms++;
  5654  04A1  0ACB               	incf	_Cnt1ms^(0+128),f
  5655  04A2  1903               	skipnz
  5656  04A3  0ACC               	incf	(_Cnt1ms+1)^(0+128),f
  5657                           
  5658                           ;main.c: 245: MotorWaterDrive();
  5659  04A4  2705               	fcall	_MotorWaterDrive
  5660                           
  5661                           ;main.c: 246: if (Cnt1ms == 4)
  5662  04A5  3004               	movlw	4
  5663  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  5664  04A7  064B               	xorwf	_Cnt1ms^(0+128),w
  5665  04A8  044C               	iorwf	(_Cnt1ms+1)^(0+128),w
  5666  04A9  1D03               	btfss	3,2
  5667  04AA  2CAE               	goto	i1l7260
  5668                           
  5669                           ;main.c: 247: {
  5670                           ;main.c: 248: Cnt1ms = 0;
  5671  04AB  01CB               	clrf	_Cnt1ms^(0+128)
  5672  04AC  01CC               	clrf	(_Cnt1ms+1)^(0+128)
  5673                           
  5674                           ;main.c: 249: process_led();
  5675  04AD  2232               	fcall	_process_led
  5676  04AE                     i1l7260:	
  5677                           
  5678                           ;main.c: 250: }
  5679                           ;main.c: 251: if (Cnt10ms >= 40)
  5680  04AE  3000               	movlw	0
  5681  04AF  1683               	bsf	3,5	;RP0=1, select bank1
  5682  04B0  024E               	subwf	(_Cnt10ms+1)^(0+128),w
  5683  04B1  3028               	movlw	40
  5684  04B2  1903               	skipnz
  5685  04B3  024D               	subwf	_Cnt10ms^(0+128),w
  5686  04B4  1C03               	skipc
  5687  04B5  2CB9               	goto	i1l7266
  5688                           
  5689                           ;main.c: 252: {
  5690                           ;main.c: 253: Cnt10ms = 0;
  5691  04B6  01CD               	clrf	_Cnt10ms^(0+128)
  5692  04B7  01CE               	clrf	(_Cnt10ms+1)^(0+128)
  5693                           
  5694                           ;main.c: 254: Flag_10ms = 1;
  5695  04B8  147B               	bsf	_Flag_10ms/(0+8),_Flag_10ms& (0+7)	;volatile
  5696  04B9                     i1l7266:	
  5697                           
  5698                           ;main.c: 255: }
  5699                           ;main.c: 256: }
  5700                           ;main.c: 257: if (RAIF)
  5701  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  5702  04BA  1D8C               	btfss	12,3	;volatile
  5703  04BB  2CBE               	goto	i1l7272
  5704                           
  5705                           ;main.c: 258: {
  5706                           ;main.c: 259: RAIF = 0;
  5707  04BC  118C               	bcf	12,3	;volatile
  5708                           
  5709                           ;main.c: 260: PORTA;
  5710  04BD  0805               	movf	5,w	;volatile
  5711  04BE                     i1l7272:	
  5712                           
  5713                           ;main.c: 261: }
  5714                           ;main.c: 262: if (RBIF)
  5715  04BE  1C0B               	btfss	11,0	;volatile
  5716  04BF  2CC2               	goto	i1l3811
  5717                           
  5718                           ;main.c: 263: {
  5719                           ;main.c: 264: RBIF = 0;
  5720  04C0  100B               	bcf	11,0	;volatile
  5721                           
  5722                           ;main.c: 265: PORTB;
  5723  04C1  0806               	movf	6,w	;volatile
  5724  04C2                     i1l3811:	
  5725  04C2  087A               	movf	??_Timer2_Isr+1,w
  5726  04C3  008A               	movwf	10
  5727  04C4  0E79               	swapf	??_Timer2_Isr^(0+-128),w
  5728  04C5  0083               	movwf	3
  5729  04C6  0EFE               	swapf	126,f
  5730  04C7  0E7E               	swapf	126,w
  5731  04C8  0009               	retfie
  5732  04C9                     __end_of_Timer2_Isr:	
  5733                           
  5734                           	psect	intentry
  5735  0004                     __pintentry:	
  5736                           ;incstack = 0
  5737                           ; Regs used in _Timer2_Isr: [wreg+status,2+status,0+pclath+cstack]
  5738                           
  5739  0004                     interrupt_function:	
  5740  007E                     saved_w	set	btemp
  5741  0004  00FE               	movwf	btemp
  5742  0005  0E03               	swapf	3,w
  5743  0006  00F9               	movwf	??_Timer2_Isr
  5744  0007  080A               	movf	10,w
  5745  0008  00FA               	movwf	??_Timer2_Isr+1
  5746  0009  2C8F               	ljmp	_Timer2_Isr
  5747                           
  5748                           	psect	text45
  5749  0232                     __ptext45:	
  5750 ;; *************** function _process_led *****************
  5751 ;; Defined at:
  5752 ;;		line 286 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_led.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;		None
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;		None
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  1    wreg      void 
  5759 ;; Registers used:
  5760 ;;		wreg, status,2, status,0
  5761 ;; Tracked objects:
  5762 ;;		On entry : 100/100
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMMON   BANK0   BANK1
  5766 ;;      Params:         0       0       0
  5767 ;;      Locals:         0       0       0
  5768 ;;      Temps:          0       0       0
  5769 ;;      Totals:         0       0       0
  5770 ;;Total ram usage:        0 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_Timer2_Isr
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           
  5780                           ;psect for function _process_led
  5781  0232                     _process_led:	
  5782                           
  5783                           ;app_led.c: 288: if (is_charge_pwm)
  5784                           
  5785                           ;incstack = 0
  5786                           ; Regs used in _process_led: [wreg+status,2+status,0]
  5787  0232  19FB               	btfsc	_is_charge_pwm/(0+8),_is_charge_pwm& (0+7)
  5788  0233  0008               	return
  5789                           
  5790                           ;app_led.c: 291: }
  5791                           ;app_led.c: 292: TRISA = 0b01011111;
  5792  0234  305F               	movlw	95
  5793  0235  0085               	movwf	5	;volatile
  5794                           
  5795                           ;app_led.c: 294: if (step == 0)
  5796  0236  1283               	bcf	3,5	;RP0=0, select bank0
  5797  0237  0846               	movf	_step,w	;volatile
  5798  0238  1D03               	btfss	3,2
  5799  0239  2A5B               	goto	i1l7064
  5800                           
  5801                           ;app_led.c: 295: {
  5802                           ;app_led.c: 296: if (led_index & LED_INDEX_1)
  5803  023A  1C20               	btfss	_led_index,0
  5804  023B  2A3F               	goto	i1l2255
  5805                           
  5806                           ;app_led.c: 297: {
  5807                           ;app_led.c: 298: RA1 = 0;
  5808  023C  1085               	bcf	5,1	;volatile
  5809                           
  5810                           ;app_led.c: 299: TRISA &= ~(1 << (1));
  5811  023D  1683               	bsf	3,5	;RP0=1, select bank1
  5812  023E  1085               	bcf	5,1	;volatile
  5813  023F                     i1l2255:	
  5814                           
  5815                           ;app_led.c: 300: }
  5816                           ;app_led.c: 301: if (led_index & LED_INDEX_2)
  5817  023F  1283               	bcf	3,5	;RP0=0, select bank0
  5818  0240  1CA0               	btfss	_led_index,1
  5819  0241  2A45               	goto	i1l2256
  5820                           
  5821                           ;app_led.c: 302: {
  5822                           ;app_led.c: 303: RA2 = 0;
  5823  0242  1105               	bcf	5,2	;volatile
  5824                           
  5825                           ;app_led.c: 304: TRISA &= ~(1 << (2));
  5826  0243  1683               	bsf	3,5	;RP0=1, select bank1
  5827  0244  1105               	bcf	5,2	;volatile
  5828  0245                     i1l2256:	
  5829                           
  5830                           ;app_led.c: 305: }
  5831                           ;app_led.c: 306: if (led_index & LED_INDEX_3)
  5832  0245  1283               	bcf	3,5	;RP0=0, select bank0
  5833  0246  1D20               	btfss	_led_index,2
  5834  0247  2A4B               	goto	i1l2257
  5835                           
  5836                           ;app_led.c: 307: {
  5837                           ;app_led.c: 308: RA3 = 0;
  5838  0248  1185               	bcf	5,3	;volatile
  5839                           
  5840                           ;app_led.c: 309: TRISA &= ~(1 << (3));
  5841  0249  1683               	bsf	3,5	;RP0=1, select bank1
  5842  024A  1185               	bcf	5,3	;volatile
  5843  024B                     i1l2257:	
  5844                           
  5845                           ;app_led.c: 310: }
  5846                           ;app_led.c: 311: if (led_index & LED_INDEX_4)
  5847  024B  1283               	bcf	3,5	;RP0=0, select bank0
  5848  024C  1DA0               	btfss	_led_index,3
  5849  024D  2A51               	goto	i1l2258
  5850                           
  5851                           ;app_led.c: 312: {
  5852                           ;app_led.c: 313: RA4 = 0;
  5853  024E  1205               	bcf	5,4	;volatile
  5854                           
  5855                           ;app_led.c: 314: TRISA &= ~(1 << (4));
  5856  024F  1683               	bsf	3,5	;RP0=1, select bank1
  5857  0250  1205               	bcf	5,4	;volatile
  5858  0251                     i1l2258:	
  5859                           
  5860                           ;app_led.c: 315: }
  5861                           ;app_led.c: 316: if (led_index & LED_INDEX_5)
  5862  0251  1283               	bcf	3,5	;RP0=0, select bank0
  5863  0252  1E20               	btfss	_led_index,4
  5864  0253  2A57               	goto	i1l2259
  5865                           
  5866                           ;app_led.c: 317: {
  5867                           ;app_led.c: 318: RA6 = 0;
  5868  0254  1305               	bcf	5,6	;volatile
  5869                           
  5870                           ;app_led.c: 319: TRISA &= ~(1 << (6));
  5871  0255  1683               	bsf	3,5	;RP0=1, select bank1
  5872  0256  1305               	bcf	5,6	;volatile
  5873  0257                     i1l2259:	
  5874                           
  5875                           ;app_led.c: 320: }
  5876                           ;app_led.c: 321: RA0 = 1;
  5877  0257  1283               	bcf	3,5	;RP0=0, select bank0
  5878  0258  1405               	bsf	5,0	;volatile
  5879                           
  5880                           ;app_led.c: 322: TRISA &= ~(1 << (0));
  5881  0259  1683               	bsf	3,5	;RP0=1, select bank1
  5882  025A  1005               	bcf	5,0	;volatile
  5883  025B                     i1l7064:	
  5884                           
  5885                           ;app_led.c: 323: }
  5886                           ;app_led.c: 324: if (step == 1)
  5887  025B  1283               	bcf	3,5	;RP0=0, select bank0
  5888  025C  0B46               	decfsz	_step,w	;volatile
  5889  025D  2A73               	goto	i1l7074
  5890                           
  5891                           ;app_led.c: 325: {
  5892                           ;app_led.c: 326: if (led_index & LED_INDEX_6)
  5893  025E  1EA0               	btfss	_led_index,5
  5894  025F  2A63               	goto	i1l2261
  5895                           
  5896                           ;app_led.c: 327: {
  5897                           ;app_led.c: 328: RA3 = 0;
  5898  0260  1185               	bcf	5,3	;volatile
  5899                           
  5900                           ;app_led.c: 329: TRISA &= ~(1 << (3));
  5901  0261  1683               	bsf	3,5	;RP0=1, select bank1
  5902  0262  1185               	bcf	5,3	;volatile
  5903  0263                     i1l2261:	
  5904                           
  5905                           ;app_led.c: 330: }
  5906                           ;app_led.c: 331: if (led_index & LED_INDEX_7)
  5907  0263  1283               	bcf	3,5	;RP0=0, select bank0
  5908  0264  1F20               	btfss	_led_index,6
  5909  0265  2A69               	goto	i1l2262
  5910                           
  5911                           ;app_led.c: 332: {
  5912                           ;app_led.c: 333: RA6 = 0;
  5913  0266  1305               	bcf	5,6	;volatile
  5914                           
  5915                           ;app_led.c: 334: TRISA &= ~(1 << (6));
  5916  0267  1683               	bsf	3,5	;RP0=1, select bank1
  5917  0268  1305               	bcf	5,6	;volatile
  5918  0269                     i1l2262:	
  5919                           
  5920                           ;app_led.c: 335: }
  5921                           ;app_led.c: 336: if (led_index & LED_INDEX_8)
  5922  0269  1283               	bcf	3,5	;RP0=0, select bank0
  5923  026A  1FA0               	btfss	_led_index,7
  5924  026B  2A6F               	goto	i1l2263
  5925                           
  5926                           ;app_led.c: 337: {
  5927                           ;app_led.c: 338: RA4 = 0;
  5928  026C  1205               	bcf	5,4	;volatile
  5929                           
  5930                           ;app_led.c: 339: TRISA &= ~(1 << (4));
  5931  026D  1683               	bsf	3,5	;RP0=1, select bank1
  5932  026E  1205               	bcf	5,4	;volatile
  5933  026F                     i1l2263:	
  5934                           
  5935                           ;app_led.c: 340: }
  5936                           ;app_led.c: 341: RA1 = 1;
  5937  026F  1283               	bcf	3,5	;RP0=0, select bank0
  5938  0270  1485               	bsf	5,1	;volatile
  5939                           
  5940                           ;app_led.c: 342: TRISA &= ~(1 << (1));
  5941  0271  1683               	bsf	3,5	;RP0=1, select bank1
  5942  0272  1085               	bcf	5,1	;volatile
  5943  0273                     i1l7074:	
  5944                           
  5945                           ;app_led.c: 343: }
  5946                           ;app_led.c: 344: if (step == 2)
  5947  0273  3002               	movlw	2
  5948  0274  1283               	bcf	3,5	;RP0=0, select bank0
  5949  0275  0646               	xorwf	_step,w	;volatile
  5950  0276  1D03               	btfss	3,2
  5951  0277  2A7E               	goto	i1l7080
  5952                           
  5953                           ;app_led.c: 345: {
  5954                           ;app_led.c: 346: if (led_index & LED_INDEX_9)
  5955  0278  1C21               	btfss	_led_index+1,0
  5956  0279  2A7D               	goto	i1l2265
  5957                           
  5958                           ;app_led.c: 347: {
  5959                           ;app_led.c: 348: RA3 = 0;
  5960  027A  1185               	bcf	5,3	;volatile
  5961                           
  5962                           ;app_led.c: 349: TRISA &= ~(1 << (3));
  5963  027B  1683               	bsf	3,5	;RP0=1, select bank1
  5964  027C  1185               	bcf	5,3	;volatile
  5965  027D                     i1l2265:	
  5966                           
  5967                           ;app_led.c: 350: }
  5968                           ;app_led.c: 351: RA2 = 1;
  5969                           
  5970                           ;app_led.c: 352: TRISA &= ~(1 << (2));
  5971  027D  2290               	fcall	PL14	;call to abstracted procedure
  5972  027E                     i1l7080:	
  5973                           
  5974                           ;app_led.c: 353: }
  5975                           ;app_led.c: 354: if (step == 3)
  5976  027E  3003               	movlw	3
  5977  027F  1283               	bcf	3,5	;RP0=0, select bank0
  5978  0280  0646               	xorwf	_step,w	;volatile
  5979  0281  1D03               	btfss	3,2
  5980  0282  2A89               	goto	i1l7086
  5981                           
  5982                           ;app_led.c: 355: {
  5983                           ;app_led.c: 356: if (led_index & LED_INDEX_10)
  5984  0283  1CA1               	btfss	_led_index+1,1
  5985  0284  2A88               	goto	i1l2267
  5986                           
  5987                           ;app_led.c: 357: {
  5988                           ;app_led.c: 358: RA4 = 0;
  5989  0285  1205               	bcf	5,4	;volatile
  5990                           
  5991                           ;app_led.c: 359: TRISA &= ~(1 << (4));
  5992  0286  1683               	bsf	3,5	;RP0=1, select bank1
  5993  0287  1205               	bcf	5,4	;volatile
  5994  0288                     i1l2267:	
  5995                           
  5996                           ;app_led.c: 360: }
  5997                           ;app_led.c: 361: RA2 = 1;
  5998                           
  5999                           ;app_led.c: 362: TRISA &= ~(1 << (2));
  6000  0288  2290               	fcall	PL14	;call to abstracted procedure
  6001  0289                     i1l7086:	
  6002                           
  6003                           ;app_led.c: 363: }
  6004                           ;app_led.c: 364: step++;
  6005  0289  1283               	bcf	3,5	;RP0=0, select bank0
  6006  028A  0AC6               	incf	_step,f	;volatile
  6007                           
  6008                           ;app_led.c: 365: if (step > 3)
  6009  028B  3004               	movlw	4
  6010  028C  0246               	subwf	_step,w	;volatile
  6011  028D  1803               	btfsc	3,0
  6012                           
  6013                           ;app_led.c: 366: {
  6014                           ;app_led.c: 367: step = 0;
  6015  028E  01C6               	clrf	_step	;volatile
  6016  028F  0008               	return
  6017  0290                     __end_of_process_led:	
  6018  0290                     PL14:	
  6019  0290  1283               	bcf	3,5	;RP0=0, select bank0
  6020  0291  1505               	bsf	5,2	;volatile
  6021  0292  1683               	bsf	3,5	;RP0=1, select bank1
  6022  0293  1105               	bcf	5,2	;volatile
  6023  0294  0008               	return
  6024  0295                     __end_ofPL14:	
  6025                           
  6026                           	psect	text46
  6027  0139                     __ptext46:	
  6028 ;; *************** function _led_charge_pwm *****************
  6029 ;; Defined at:
  6030 ;;		line 58 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_led.c"
  6031 ;; Parameters:    Size  Location     Type
  6032 ;;		None
  6033 ;; Auto vars:     Size  Location     Type
  6034 ;;		None
  6035 ;; Return value:  Size  Location     Type
  6036 ;;                  1    wreg      void 
  6037 ;; Registers used:
  6038 ;;		wreg, status,2, status,0, pclath, cstack
  6039 ;; Tracked objects:
  6040 ;;		On entry : 100/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMMON   BANK0   BANK1
  6044 ;;      Params:         0       0       0
  6045 ;;      Locals:         0       0       0
  6046 ;;      Temps:          0       0       0
  6047 ;;      Totals:         0       0       0
  6048 ;;Total ram usage:        0 bytes
  6049 ;; Hardware stack levels used:    1
  6050 ;; Hardware stack levels required when called:    1
  6051 ;; This function calls:
  6052 ;;		i1_set_led_state
  6053 ;; This function is called by:
  6054 ;;		_Timer2_Isr
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           
  6059                           ;psect for function _led_charge_pwm
  6060  0139                     _led_charge_pwm:	
  6061                           
  6062                           ;app_led.c: 60: if (WORK_STATE_CHARGING == app_work_state)
  6063                           
  6064                           ;incstack = 0
  6065                           ; Regs used in _led_charge_pwm: [wreg+status,2+status,0+pclath+cstack]
  6066  0139  3002               	movlw	2
  6067  013A  066D               	xorwf	_app_work_state,w	;volatile
  6068  013B  1D03               	btfss	3,2
  6069  013C  29BD               	goto	i1l2175
  6070                           
  6071                           ;app_led.c: 61: {
  6072                           ;app_led.c: 62: if (app_charge.Charge)
  6073  013D  1683               	bsf	3,5	;RP0=1, select bank1
  6074  013E  1C20               	btfss	_app_charge^(0+128),0
  6075  013F  0008               	return
  6076                           
  6077                           ;app_led.c: 63: {
  6078                           ;app_led.c: 64: RA0 = 0;
  6079  0140  1283               	bcf	3,5	;RP0=0, select bank0
  6080  0141  1005               	bcf	5,0	;volatile
  6081                           
  6082                           ;app_led.c: 65: TRISA &= ~(1 << (0));
  6083  0142  1683               	bsf	3,5	;RP0=1, select bank1
  6084  0143  1005               	bcf	5,0	;volatile
  6085                           
  6086                           ;app_led.c: 66: RA1 = 0;
  6087  0144  1283               	bcf	3,5	;RP0=0, select bank0
  6088  0145  1085               	bcf	5,1	;volatile
  6089                           
  6090                           ;app_led.c: 67: TRISA &= ~(1 << (1));
  6091  0146  1683               	bsf	3,5	;RP0=1, select bank1
  6092  0147  1085               	bcf	5,1	;volatile
  6093                           
  6094                           ;app_led.c: 68: RA6 = 0;
  6095  0148  1283               	bcf	3,5	;RP0=0, select bank0
  6096  0149  1305               	bcf	5,6	;volatile
  6097                           
  6098                           ;app_led.c: 69: TRISA &= ~(1 << (6));
  6099  014A  1683               	bsf	3,5	;RP0=1, select bank1
  6100  014B  1305               	bcf	5,6	;volatile
  6101                           
  6102                           ;app_led.c: 70: if (app_charge.flag_charge_force_full_24hour)
  6103  014C  1DA0               	btfss	_app_charge^(0+128),3
  6104  014D  2955               	goto	i1l2177
  6105  014E  3003               	movlw	3
  6106                           
  6107                           ;app_led.c: 71: {
  6108                           ;app_led.c: 72: is_charge_pwm = 0;
  6109  014F  11FB               	bcf	_is_charge_pwm/(0+8),_is_charge_pwm& (0+7)
  6110                           
  6111                           ;app_led.c: 73: set_led_state(LED_INDEX_9 | LED_INDEX_10, LED_STATE_OFF);
  6112  0150  01F0               	clrf	i1set_led_state@index
  6113  0151  00F1               	movwf	i1set_led_state@index+1
  6114  0152  01F2               	clrf	i1set_led_state@state
  6115  0153  259F               	fcall	i1_set_led_state
  6116                           
  6117                           ;app_led.c: 74: }
  6118  0154  0008               	return
  6119  0155                     i1l2177:	
  6120                           
  6121                           ;app_led.c: 75: else if (app_charge.FullCharge || app_charge.ForceFullCharge)
  6122  0155  18A0               	btfsc	_app_charge^(0+128),1
  6123  0156  2959               	goto	i1l2181
  6124  0157  1D20               	btfss	_app_charge^(0+128),2
  6125  0158  2966               	goto	i1l2179
  6126  0159                     i1l2181:	
  6127  0159  3001               	movlw	1
  6128                           
  6129                           ;app_led.c: 76: {
  6130                           ;app_led.c: 77: is_charge_pwm = 0;
  6131  015A  11FB               	bcf	_is_charge_pwm/(0+8),_is_charge_pwm& (0+7)
  6132                           
  6133                           ;app_led.c: 78: set_led_state(LED_INDEX_9, LED_STATE_ON);
  6134  015B  01F0               	clrf	i1set_led_state@index
  6135  015C  00F1               	movwf	i1set_led_state@index+1
  6136  015D  01F2               	clrf	i1set_led_state@state
  6137  015E  0AF2               	incf	i1set_led_state@state,f
  6138  015F  259F               	fcall	i1_set_led_state
  6139                           
  6140                           ;app_led.c: 79: set_led_state(LED_INDEX_10, LED_STATE_OFF);
  6141  0160  3002               	movlw	2
  6142  0161  01F0               	clrf	i1set_led_state@index
  6143  0162  00F1               	movwf	i1set_led_state@index+1
  6144  0163  01F2               	clrf	i1set_led_state@state
  6145  0164  259F               	fcall	i1_set_led_state
  6146                           
  6147                           ;app_led.c: 80: }
  6148  0165  0008               	return
  6149  0166                     i1l2179:	
  6150                           
  6151                           ;app_led.c: 81: else
  6152                           ;app_led.c: 82: {
  6153                           ;app_led.c: 83: is_charge_pwm = 1;
  6154  0166  15FB               	bsf	_is_charge_pwm/(0+8),_is_charge_pwm& (0+7)
  6155                           
  6156                           ;app_led.c: 84: PWM_Cnt++;
  6157  0167  1283               	bcf	3,5	;RP0=0, select bank0
  6158  0168  0AAA               	incf	_PWM_Cnt,f
  6159  0169  1903               	skipnz
  6160  016A  0AAB               	incf	_PWM_Cnt+1,f
  6161                           
  6162                           ;app_led.c: 87: if (PWM_Duty >= PWM_Cnt)
  6163  016B  082B               	movf	_PWM_Cnt+1,w
  6164  016C  022D               	subwf	_PWM_Duty+1,w
  6165  016D  1D03               	skipz
  6166  016E  2971               	goto	u250_25
  6167  016F  082A               	movf	_PWM_Cnt,w
  6168  0170  022C               	subwf	_PWM_Duty,w
  6169  0171                     u250_25:	
  6170  0171  1C03               	skipc
  6171  0172  297F               	goto	i1l2183
  6172                           
  6173                           ;app_led.c: 88: {
  6174                           ;app_led.c: 89: RA2 = 1;
  6175  0173  1505               	bsf	5,2	;volatile
  6176                           
  6177                           ;app_led.c: 90: TRISA &= ~(1 << (2));
  6178  0174  1683               	bsf	3,5	;RP0=1, select bank1
  6179  0175  1105               	bcf	5,2	;volatile
  6180                           
  6181                           ;app_led.c: 91: RA4 = 0;
  6182  0176  1283               	bcf	3,5	;RP0=0, select bank0
  6183  0177  1205               	bcf	5,4	;volatile
  6184                           
  6185                           ;app_led.c: 92: TRISA &= ~(1 << (4));
  6186  0178  1683               	bsf	3,5	;RP0=1, select bank1
  6187  0179  1205               	bcf	5,4	;volatile
  6188                           
  6189                           ;app_led.c: 93: RA3 = 1;
  6190  017A  1283               	bcf	3,5	;RP0=0, select bank0
  6191  017B  1585               	bsf	5,3	;volatile
  6192                           
  6193                           ;app_led.c: 94: TRISA &= ~(1 << (3));
  6194  017C  1683               	bsf	3,5	;RP0=1, select bank1
  6195  017D  1185               	bcf	5,3	;volatile
  6196                           
  6197                           ;app_led.c: 95: }
  6198  017E  2986               	goto	i1l6952
  6199  017F                     i1l2183:	
  6200                           
  6201                           ;app_led.c: 96: else
  6202                           ;app_led.c: 97: {
  6203                           ;app_led.c: 98: RA2 = 0;
  6204  017F  1105               	bcf	5,2	;volatile
  6205                           
  6206                           ;app_led.c: 99: TRISA &= ~(1 << (2));
  6207  0180  1683               	bsf	3,5	;RP0=1, select bank1
  6208  0181  1105               	bcf	5,2	;volatile
  6209                           
  6210                           ;app_led.c: 100: RA4 = 0;
  6211  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6212  0183  1205               	bcf	5,4	;volatile
  6213                           
  6214                           ;app_led.c: 101: TRISA &= ~(1 << (4));
  6215  0184  1683               	bsf	3,5	;RP0=1, select bank1
  6216  0185  1205               	bcf	5,4	;volatile
  6217  0186                     i1l6952:	
  6218                           
  6219                           ;app_led.c: 102: }
  6220                           ;app_led.c: 103: if (PWM_Cnt >= 199)
  6221  0186  3000               	movlw	0
  6222  0187  1283               	bcf	3,5	;RP0=0, select bank0
  6223  0188  022B               	subwf	_PWM_Cnt+1,w
  6224  0189  30C7               	movlw	199
  6225  018A  1903               	skipnz
  6226  018B  022A               	subwf	_PWM_Cnt,w
  6227  018C  1C03               	skipc
  6228  018D  2990               	goto	i1l6956
  6229                           
  6230                           ;app_led.c: 104: {
  6231                           ;app_led.c: 105: PWM_Cnt = 0;
  6232  018E  01AA               	clrf	_PWM_Cnt
  6233  018F  01AB               	clrf	_PWM_Cnt+1
  6234  0190                     i1l6956:	
  6235                           
  6236                           ;app_led.c: 106: }
  6237                           ;app_led.c: 107: pwm_timer++;
  6238  0190  0AA8               	incf	_pwm_timer,f
  6239  0191  1903               	skipnz
  6240  0192  0AA9               	incf	_pwm_timer+1,f
  6241                           
  6242                           ;app_led.c: 108: if (!PWM_dir)
  6243  0193  1A7B               	btfsc	_PWM_dir/(0+8),_PWM_dir& (0+7)
  6244  0194  29A9               	goto	i1l6970
  6245                           
  6246                           ;app_led.c: 109: {
  6247                           ;app_led.c: 110: if (pwm_timer >= 200)
  6248  0195  3000               	movlw	0
  6249  0196  0229               	subwf	_pwm_timer+1,w
  6250  0197  30C8               	movlw	200
  6251  0198  1903               	skipnz
  6252  0199  0228               	subwf	_pwm_timer,w
  6253  019A  1C03               	skipc
  6254  019B  0008               	return
  6255  019C  3000               	movlw	0
  6256                           
  6257                           ;app_led.c: 111: {
  6258                           ;app_led.c: 112: pwm_timer = 0;
  6259  019D  01A8               	clrf	_pwm_timer
  6260  019E  01A9               	clrf	_pwm_timer+1
  6261                           
  6262                           ;app_led.c: 114: if (PWM_Duty >= 199)
  6263  019F  022D               	subwf	_PWM_Duty+1,w
  6264  01A0  30C7               	movlw	199
  6265  01A1  1903               	skipnz
  6266  01A2  022C               	subwf	_PWM_Duty,w
  6267  01A3  1803               	btfsc	3,0
  6268                           
  6269                           ;app_led.c: 115: {
  6270                           ;app_led.c: 116: PWM_dir = 1;
  6271  01A4  167B               	bsf	_PWM_dir/(0+8),_PWM_dir& (0+7)
  6272                           
  6273                           ;app_led.c: 117: }
  6274                           ;app_led.c: 118: PWM_Duty++;
  6275  01A5  0AAC               	incf	_PWM_Duty,f
  6276  01A6  1903               	skipnz
  6277  01A7  0AAD               	incf	_PWM_Duty+1,f
  6278  01A8  0008               	return
  6279  01A9                     i1l6970:	
  6280                           
  6281                           ;app_led.c: 121: else
  6282                           ;app_led.c: 122: {
  6283                           ;app_led.c: 123: if (pwm_timer >= 200)
  6284  01A9  3000               	movlw	0
  6285  01AA  0229               	subwf	_pwm_timer+1,w
  6286  01AB  30C8               	movlw	200
  6287  01AC  1903               	skipnz
  6288  01AD  0228               	subwf	_pwm_timer,w
  6289  01AE  1C03               	skipc
  6290  01AF  0008               	return
  6291  01B0  3001               	movlw	1
  6292                           
  6293                           ;app_led.c: 124: {
  6294                           ;app_led.c: 126: pwm_timer = 0;
  6295  01B1  01A8               	clrf	_pwm_timer
  6296  01B2  01A9               	clrf	_pwm_timer+1
  6297                           
  6298                           ;app_led.c: 129: PWM_Duty--;
  6299  01B3  02AC               	subwf	_PWM_Duty,f
  6300  01B4  3000               	movlw	0
  6301  01B5  1C03               	skipc
  6302  01B6  03AD               	decf	_PWM_Duty+1,f
  6303  01B7  02AD               	subwf	_PWM_Duty+1,f
  6304                           
  6305                           ;app_led.c: 130: if (!PWM_Duty)
  6306  01B8  082C               	movf	_PWM_Duty,w
  6307  01B9  042D               	iorwf	_PWM_Duty+1,w
  6308  01BA  1903               	btfsc	3,2
  6309                           
  6310                           ;app_led.c: 131: {
  6311                           ;app_led.c: 132: PWM_dir = 0;
  6312  01BB  127B               	bcf	_PWM_dir/(0+8),_PWM_dir& (0+7)
  6313  01BC  0008               	return
  6314  01BD                     i1l2175:	
  6315                           
  6316                           ;app_led.c: 139: else
  6317                           ;app_led.c: 140: {
  6318                           ;app_led.c: 141: is_charge_pwm = 0;
  6319  01BD  11FB               	bcf	_is_charge_pwm/(0+8),_is_charge_pwm& (0+7)
  6320                           
  6321                           ;app_led.c: 142: PWM_Cnt = 0;
  6322  01BE  01AA               	clrf	_PWM_Cnt
  6323  01BF  01AB               	clrf	_PWM_Cnt+1
  6324                           
  6325                           ;app_led.c: 143: pwm_timer = 0;
  6326  01C0  01A8               	clrf	_pwm_timer
  6327  01C1  01A9               	clrf	_pwm_timer+1
  6328  01C2  0008               	return
  6329  01C3                     __end_of_led_charge_pwm:	
  6330                           
  6331                           	psect	text47
  6332  059F                     __ptext47:	
  6333 ;; *************** function i1_set_led_state *****************
  6334 ;; Defined at:
  6335 ;;		line 269 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_led.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;  index           2    0[COMMON] enum E591
  6338 ;;  state           1    2[COMMON] enum E587
  6339 ;; Auto vars:     Size  Location     Type
  6340 ;;		None
  6341 ;; Return value:  Size  Location     Type
  6342 ;;                  1    wreg      void 
  6343 ;; Registers used:
  6344 ;;		wreg, status,2, status,0
  6345 ;; Tracked objects:
  6346 ;;		On entry : 0/100
  6347 ;;		On exit  : 0/0
  6348 ;;		Unchanged: 0/0
  6349 ;; Data sizes:     COMMON   BANK0   BANK1
  6350 ;;      Params:         3       0       0
  6351 ;;      Locals:         0       0       0
  6352 ;;      Temps:          6       0       0
  6353 ;;      Totals:         9       0       0
  6354 ;;Total ram usage:        9 bytes
  6355 ;; Hardware stack levels used:    1
  6356 ;; This function calls:
  6357 ;;		Nothing
  6358 ;; This function is called by:
  6359 ;;		_led_charge_pwm
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           
  6364                           ;psect for function i1_set_led_state
  6365  059F                     i1_set_led_state:	
  6366                           
  6367                           ;app_led.c: 271: if (LED_STATE_ON == state)
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in i1_set_led_state: [wreg+status,2+status,0]
  6371  059F  0B72               	decfsz	i1set_led_state@state,w
  6372  05A0  2DB1               	goto	i1l6918
  6373                           
  6374                           ;app_led.c: 272: {
  6375                           ;app_led.c: 273: led_index |= index;
  6376  05A1  0870               	movf	i1set_led_state@index,w
  6377  05A2  00F3               	movwf	??i1_set_led_state
  6378  05A3  0871               	movf	i1set_led_state@index+1,w
  6379  05A4  00F4               	movwf	??i1_set_led_state+1
  6380  05A5  01F5               	clrf	??i1_set_led_state+2
  6381  05A6  01F6               	clrf	??i1_set_led_state+3
  6382  05A7  0873               	movf	??i1_set_led_state,w
  6383  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  6384  05A9  04A0               	iorwf	_led_index,f
  6385  05AA  0874               	movf	??i1_set_led_state+1,w
  6386  05AB  04A1               	iorwf	_led_index+1,f
  6387  05AC  0875               	movf	??i1_set_led_state+2,w
  6388  05AD  04A2               	iorwf	_led_index+2,f
  6389  05AE  0876               	movf	??i1_set_led_state+3,w
  6390  05AF  04A3               	iorwf	_led_index+3,f
  6391                           
  6392                           ;app_led.c: 274: }
  6393  05B0  0008               	return
  6394  05B1                     i1l6918:	
  6395                           
  6396                           ;app_led.c: 275: else if (LED_STATE_OFF == state)
  6397  05B1  0872               	movf	i1set_led_state@state,w
  6398  05B2  1D03               	btfss	3,2
  6399  05B3  0008               	return
  6400                           
  6401                           ;app_led.c: 276: {
  6402                           ;app_led.c: 277: led_index &= ~index;
  6403  05B4  0871               	movf	i1set_led_state@index+1,w
  6404  05B5  00F4               	movwf	??i1_set_led_state+1
  6405  05B6  0870               	movf	i1set_led_state@index,w
  6406  05B7  00F3               	movwf	??i1_set_led_state
  6407  05B8  09F3               	comf	??i1_set_led_state,f
  6408  05B9  09F4               	comf	??i1_set_led_state+1,f
  6409  05BA  0873               	movf	??i1_set_led_state,w
  6410  05BB  00F5               	movwf	??i1_set_led_state+2
  6411  05BC  0874               	movf	??i1_set_led_state+1,w
  6412  05BD  00F6               	movwf	??i1_set_led_state+3
  6413  05BE  3000               	movlw	0
  6414  05BF  1BF6               	btfsc	??i1_set_led_state+3,7
  6415  05C0  30FF               	movlw	255
  6416  05C1  00F7               	movwf	??i1_set_led_state+4
  6417  05C2  00F8               	movwf	??i1_set_led_state+5
  6418  05C3  0875               	movf	??i1_set_led_state+2,w
  6419  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  6420  05C5  05A0               	andwf	_led_index,f
  6421  05C6  0876               	movf	??i1_set_led_state+3,w
  6422  05C7  05A1               	andwf	_led_index+1,f
  6423  05C8  0877               	movf	??i1_set_led_state+4,w
  6424  05C9  05A2               	andwf	_led_index+2,f
  6425  05CA  0878               	movf	??i1_set_led_state+5,w
  6426  05CB  05A3               	andwf	_led_index+3,f
  6427  05CC  0008               	return
  6428  05CD                     __end_ofi1_set_led_state:	
  6429                           
  6430                           	psect	text48
  6431  0705                     __ptext48:	
  6432 ;; *************** function _MotorWaterDrive *****************
  6433 ;; Defined at:
  6434 ;;		line 73 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_water_process.
      +c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;		None
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;		None
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      void 
  6441 ;; Registers used:
  6442 ;;		wreg, status,2, status,0
  6443 ;; Tracked objects:
  6444 ;;		On entry : 100/100
  6445 ;;		On exit  : 100/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1
  6448 ;;      Params:         0       0       0
  6449 ;;      Locals:         0       0       0
  6450 ;;      Temps:          0       0       0
  6451 ;;      Totals:         0       0       0
  6452 ;;Total ram usage:        0 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; This function calls:
  6455 ;;		Nothing
  6456 ;; This function is called by:
  6457 ;;		_Timer2_Isr
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           
  6462                           ;psect for function _MotorWaterDrive
  6463  0705                     _MotorWaterDrive:	
  6464                           
  6465                           ;app_water_process.c: 75: if(water_work_mode.water_mode_out_put == WATER_WORK_MODE_IDEL)
  6466                           
  6467                           ;incstack = 0
  6468                           ; Regs used in _MotorWaterDrive: [wreg+status,2+status,0]
  6469  0705  1283               	bcf	3,5	;RP0=0, select bank0
  6470  0706  0862               	movf	_water_work_mode+1,w
  6471  0707  1D03               	btfss	3,2
  6472  0708  2F0B               	goto	i1l7184
  6473                           
  6474                           ;app_water_process.c: 76: {
  6475                           ;app_water_process.c: 77: (RA5=0);
  6476  0709  1285               	bcf	5,5	;volatile
  6477                           
  6478                           ;app_water_process.c: 78: return;
  6479  070A  0008               	return
  6480  070B                     i1l7184:	
  6481                           
  6482                           ;app_water_process.c: 79: }
  6483                           ;app_water_process.c: 80: CntWaterDrive++;
  6484  070B  0ABD               	incf	_CntWaterDrive,f
  6485                           
  6486                           ;app_water_process.c: 81: if(CntWaterDrive==1)
  6487  070C  0B3D               	decfsz	_CntWaterDrive,w
  6488  070D  2F0F               	goto	i1l7190
  6489                           
  6490                           ;app_water_process.c: 82: {
  6491                           ;app_water_process.c: 83: (RA5=1);
  6492  070E  1685               	bsf	5,5	;volatile
  6493  070F                     i1l7190:	
  6494                           
  6495                           ;app_water_process.c: 84: }
  6496                           ;app_water_process.c: 85: if(CntWaterDrive==MotorWaterDuty)
  6497  070F  083D               	movf	_CntWaterDrive,w
  6498  0710  063C               	xorwf	_MotorWaterDuty,w
  6499  0711  1903               	btfsc	3,2
  6500                           
  6501                           ;app_water_process.c: 86: {
  6502                           ;app_water_process.c: 87: (RA5=0);
  6503  0712  1285               	bcf	5,5	;volatile
  6504                           
  6505                           ;app_water_process.c: 88: }
  6506                           ;app_water_process.c: 89: if(CntWaterDrive>99)
  6507  0713  3064               	movlw	100
  6508  0714  023D               	subwf	_CntWaterDrive,w
  6509  0715  1803               	btfsc	3,0
  6510                           
  6511                           ;app_water_process.c: 90: {
  6512                           ;app_water_process.c: 91: CntWaterDrive=0;
  6513  0716  01BD               	clrf	_CntWaterDrive
  6514  0717  0008               	return
  6515  0718                     __end_of_MotorWaterDrive:	
  6516                           
  6517                           	psect	text49
  6518  0346                     __ptext49:	
  6519 ;; *************** function _Mode_control *****************
  6520 ;; Defined at:
  6521 ;;		line 89 in file "Z:\ÕýÔÚÑÐ·¢\37-°¬çê¶û\4-ABB868\CODE\ABB868_V3_SC8P1712E_20241223_0x¸ÄºôÎüµÆ°æ±¾2\app_motor.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;		None
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;		None
  6526 ;; Return value:  Size  Location     Type
  6527 ;;                  1    wreg      void 
  6528 ;; Registers used:
  6529 ;;		wreg, status,2, status,0
  6530 ;; Tracked objects:
  6531 ;;		On entry : 100/0
  6532 ;;		On exit  : 100/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1
  6535 ;;      Params:         0       0       0
  6536 ;;      Locals:         0       0       0
  6537 ;;      Temps:          2       0       0
  6538 ;;      Totals:         2       0       0
  6539 ;;Total ram usage:        2 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; This function calls:
  6542 ;;		Nothing
  6543 ;; This function is called by:
  6544 ;;		_Timer2_Isr
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           
  6549                           ;psect for function _Mode_control
  6550  0346                     _Mode_control:	
  6551                           
  6552                           ;app_motor.c: 94: if(WORK_MODE_IDEL == work_mode.mode_out_put)
  6553                           
  6554                           ;incstack = 0
  6555                           ; Regs used in _Mode_control: [wreg+status,2+status,0]
  6556  0346  0867               	movf	_work_mode+1,w
  6557  0347  1D03               	btfss	3,2
  6558  0348  2B4C               	goto	i1l7156
  6559                           
  6560                           ;app_motor.c: 95: {
  6561                           ;app_motor.c: 96: RB5 = 0;
  6562  0349  1286               	bcf	6,5	;volatile
  6563                           
  6564                           ;app_motor.c: 97: RB6 = 0;
  6565  034A  1306               	bcf	6,6	;volatile
  6566                           
  6567                           ;app_motor.c: 98: return;
  6568  034B  0008               	return
  6569  034C                     i1l7156:	
  6570                           
  6571                           ;app_motor.c: 99: }
  6572                           ;app_motor.c: 101: motor_fix_cnt++;
  6573  034C  0AA6               	incf	_motor_fix_cnt,f	;volatile
  6574  034D  1903               	skipnz
  6575  034E  0AA7               	incf	_motor_fix_cnt+1,f	;volatile
  6576                           
  6577                           ;app_motor.c: 102: if (motor_fix_cnt <= low_a)
  6578  034F  0843               	movf	_low_a,w
  6579  0350  00F0               	movwf	??_Mode_control
  6580  0351  01F1               	clrf	??_Mode_control+1
  6581  0352  0827               	movf	_motor_fix_cnt+1,w	;volatile
  6582  0353  0271               	subwf	??_Mode_control+1,w
  6583  0354  1D03               	skipz
  6584  0355  2B58               	goto	u296_25
  6585  0356  0826               	movf	_motor_fix_cnt,w	;volatile
  6586  0357  0270               	subwf	??_Mode_control,w
  6587  0358                     u296_25:	
  6588  0358  1C03               	skipc
  6589  0359  2B5C               	goto	i1l7162
  6590                           
  6591                           ;app_motor.c: 103: {
  6592                           ;app_motor.c: 104: RB5 = 0;
  6593  035A  1286               	bcf	6,5	;volatile
  6594                           
  6595                           ;app_motor.c: 106: }
  6596  035B  2B67               	goto	i1l7166
  6597  035C                     i1l7162:	
  6598                           
  6599                           ;app_motor.c: 107: else if (motor_fix_cnt <= dead_area1)
  6600  035C  0842               	movf	_dead_area1,w
  6601  035D  00F0               	movwf	??_Mode_control
  6602  035E  01F1               	clrf	??_Mode_control+1
  6603  035F  0827               	movf	_motor_fix_cnt+1,w	;volatile
  6604  0360  0271               	subwf	??_Mode_control+1,w
  6605  0361  1D03               	skipz
  6606  0362  2B65               	goto	u297_25
  6607  0363  0826               	movf	_motor_fix_cnt,w	;volatile
  6608  0364  0270               	subwf	??_Mode_control,w
  6609  0365                     u297_25:	
  6610  0365  1803               	btfsc	3,0
  6611                           
  6612                           ;app_motor.c: 108: {
  6613                           ;app_motor.c: 109: RB5 = 1;
  6614  0366  1686               	bsf	6,5	;volatile
  6615  0367                     i1l7166:	
  6616                           ;app_motor.c: 111: }
  6617                           
  6618                           
  6619                           ;app_motor.c: 115: }
  6620                           ;app_motor.c: 117: if (motor_fix_cnt <= dead_area_b1)
  6621  0367  0840               	movf	_dead_area_b1,w
  6622  0368  00F0               	movwf	??_Mode_control
  6623  0369  01F1               	clrf	??_Mode_control+1
  6624  036A  0827               	movf	_motor_fix_cnt+1,w	;volatile
  6625  036B  0271               	subwf	??_Mode_control+1,w
  6626  036C  1D03               	skipz
  6627  036D  2B70               	goto	u298_25
  6628  036E  0826               	movf	_motor_fix_cnt,w	;volatile
  6629  036F  0270               	subwf	??_Mode_control,w
  6630  0370                     u298_25:	
  6631  0370  1C03               	skipc
  6632  0371  2B74               	goto	i1l7170
  6633  0372                     i1l7168:	
  6634                           
  6635                           ;app_motor.c: 118: {
  6636                           ;app_motor.c: 119: RB6 = 1;
  6637  0372  1706               	bsf	6,6	;volatile
  6638                           
  6639                           ;app_motor.c: 121: }
  6640  0373  0008               	return
  6641  0374                     i1l7170:	
  6642                           
  6643                           ;app_motor.c: 122: else if (motor_fix_cnt <= low_b)
  6644  0374  0841               	movf	_low_b,w
  6645  0375  00F0               	movwf	??_Mode_control
  6646  0376  01F1               	clrf	??_Mode_control+1
  6647  0377  0827               	movf	_motor_fix_cnt+1,w	;volatile
  6648  0378  0271               	subwf	??_Mode_control+1,w
  6649  0379  1D03               	skipz
  6650  037A  2B7D               	goto	u299_25
  6651  037B  0826               	movf	_motor_fix_cnt,w	;volatile
  6652  037C  0270               	subwf	??_Mode_control,w
  6653  037D                     u299_25:	
  6654  037D  1C03               	skipc
  6655  037E  2B81               	goto	i1l7174
  6656                           
  6657                           ;app_motor.c: 123: {
  6658                           ;app_motor.c: 124: RB6 = 0;
  6659  037F  1306               	bcf	6,6	;volatile
  6660                           
  6661                           ;app_motor.c: 126: }
  6662  0380  0008               	return
  6663  0381                     i1l7174:	
  6664                           
  6665                           ;app_motor.c: 127: else if (motor_fix_cnt <= dead_area_b2)
  6666  0381  083F               	movf	_dead_area_b2,w
  6667  0382  00F0               	movwf	??_Mode_control
  6668  0383  01F1               	clrf	??_Mode_control+1
  6669  0384  0827               	movf	_motor_fix_cnt+1,w	;volatile
  6670  0385  0271               	subwf	??_Mode_control+1,w
  6671  0386  1D03               	skipz
  6672  0387  2B8A               	goto	u300_25
  6673  0388  0826               	movf	_motor_fix_cnt,w	;volatile
  6674  0389  0270               	subwf	??_Mode_control,w
  6675  038A                     u300_25:	
  6676  038A  1803               	btfsc	3,0
  6677  038B  2B72               	goto	i1l7168
  6678                           
  6679                           ;app_motor.c: 132: else
  6680                           ;app_motor.c: 133: {
  6681                           ;app_motor.c: 134: motor_fix_cnt = 0;
  6682  038C  01A6               	clrf	_motor_fix_cnt	;volatile
  6683  038D  01A7               	clrf	_motor_fix_cnt+1	;volatile
  6684  038E  0008               	return
  6685  038F                     __end_of_Mode_control:	
  6686  0003                     
  6687                           	psect	functab
  6688  0025                     __pfunctab:	
  6689  0025                     __fptable:	
  6690  0025                     fptable:	
  6691  0025  00FF               	movwf	(btemp+1)& (0+127)
  6692  0026  3000               	movlw	high fptable
  6693  0027  008A               	movwf	10
  6694  0028  087F               	movf	(btemp+1)& (0+127),w
  6695  0029  0782               	addwf	2,f
  6696  002A                     fpbase:	
  6697  002A  282A               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  6698  002B                     fp__app_process_power_off:	
  6699  002B                     entry__app_process_power_off:	
  6700  002B  2FB1               	ljmp	_app_process_power_off
  6701  002C                     fp__app_process_charing:	
  6702  002C                     entry__app_process_charing:	
  6703  002C  2F6A               	ljmp	_app_process_charing
  6704  002D                     fp__app_process_working:	
  6705  002D                     entry__app_process_working:	
  6706  002D  2D6F               	ljmp	_app_process_working
  6707  002E                     __end_of__fptable:	
  6708  007E                     btemp	set	126	;btemp
  6709  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         106
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     14      78
    BANK1            80      0      55

Pointer List with Targets:

    S1436$cb	PTR FTN()void  size(1) Largest target is 1
		 -> app_process_charing(), app_process_power_off(), app_process_working(), 

    work_state_action_tab.cb	PTR FTN()void  size(1) Largest target is 1
		 -> app_process_charing(), app_process_power_off(), app_process_working(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Timer2_Isr in COMMON

    _led_charge_pwm->i1_set_led_state

Critical Paths under _main in BANK0

    _process_led_remind_low_power->_set_led_state
    _water_turn_off->_set_led_state
    _app_process_water_working->_app_process_set_water_state
    _app_process_water_mdoe_led->_app_process_set_water_state
    _app_process_working->_app_process_set_work_state
    _app_process_power_off->_set_led_state
    _app_led_water_mode_set->_set_led_state
    _app_led_mode_set->_set_led_state
    _GotoSleep->_ChargePwmOut
    _app_process_charge->_Charge_Check
    _Charge_Check->_AdcResultChk
    _app_adc_process->_app_adc_bat_voltage_check
    _app_adc_bat_voltage_check->_AdcResultChk
    _AdcResultChk->_AdcOneChk

Critical Paths under _Timer2_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer2_Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   23223
                          _AdcConfig
                           _PortInit
                          _PwmConfig
                        _Timer0Cofng
                       _Timer2Config
                    _app_adc_process
                 _app_process_charge
            _app_process_go_to_sleep
                    _app_process_key
        _app_process_set_water_state
         _app_process_set_work_state
                   _app_process_work
             _app_water_process_work
       _process_led_remind_low_power
 ---------------------------------------------------------------------------------
 (1) _process_led_remind_low_power                         0     0      0    2887
        _app_process_set_water_state
         _app_process_set_work_state
                _set_led_dirct_state
                      _set_led_state
 ---------------------------------------------------------------------------------
 (2) _set_led_dirct_state                                  2     0      2      75
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _app_water_process_work                               0     0      0    2812
         _app_process_water_mdoe_led
          _app_process_water_working
          _app_process_water_workoff
 ---------------------------------------------------------------------------------
 (2) _app_process_water_workoff                            0     0      0    2768
                     _water_turn_off
 ---------------------------------------------------------------------------------
 (3) _water_turn_off                                       0     0      0    2768
                      _set_led_state
 ---------------------------------------------------------------------------------
 (2) _app_process_water_working                            0     0      0      22
        _app_process_set_water_state
 ---------------------------------------------------------------------------------
 (2) _app_process_water_mdoe_led                           0     0      0      22
        _app_process_set_water_state
 ---------------------------------------------------------------------------------
 (1) _app_process_work                                     0     0      0    5580
                _app_process_charing
              _app_process_power_off
                _app_process_working
 ---------------------------------------------------------------------------------
 (2) _app_process_working                                  0     0      0      22
         _app_process_set_work_state
                  _work_chang_timing
 ---------------------------------------------------------------------------------
 (3) _work_chang_timing                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _app_process_charing                                  0     0      0    2790
              _app_process_power_off
        _app_process_set_water_state
 ---------------------------------------------------------------------------------
 (2) _app_process_power_off                                0     0      0    2768
                      _set_led_state
 ---------------------------------------------------------------------------------
 (1) _app_process_key                                      0     0      0    8348
             _charge_or_lowBat_check
                     _handle_key_pwr
                   _handle_key_water
                _key_brush_pwr_check
               _key_water_mode_check
                _key_water_pwr_check
 ---------------------------------------------------------------------------------
 (2) _key_water_pwr_check                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _key_water_mode_check                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _key_brush_pwr_check                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _handle_key_water                                     0     0      0    2790
             _app_led_water_mode_set
    _app_process_set_water_mode_next
        _app_process_set_water_state
                        _water_motor
 ---------------------------------------------------------------------------------
 (3) _water_motor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _app_process_set_water_mode_next                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _app_led_water_mode_set                               0     0      0    2768
                      _set_led_state
 ---------------------------------------------------------------------------------
 (2) _handle_key_pwr                                       0     0      0    5558
          _app_process_set_mode_init
          _app_process_set_mode_next
         _app_process_set_work_state
 ---------------------------------------------------------------------------------
 (3) _app_process_set_mode_next                            0     0      0    2768
                   _app_led_mode_set
             _app_process_motor_duty
 ---------------------------------------------------------------------------------
 (3) _app_process_set_mode_init                            0     0      0    2768
                   _app_led_mode_set
             _app_process_motor_duty
 ---------------------------------------------------------------------------------
 (4) _app_process_motor_duty                               6     6      0       0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (4) _app_led_mode_set                                     0     0      0    2768
                      _set_led_state
 ---------------------------------------------------------------------------------
 (2) _charge_or_lowBat_check                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _app_process_go_to_sleep                              0     0      0      44
                          _GotoSleep
 ---------------------------------------------------------------------------------
 (2) _GotoSleep                                            0     0      0      44
                          _AdcConfig
                       _ChargePwmOut
                           _PortInit
 ---------------------------------------------------------------------------------
 (3) _PortInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcConfig                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _app_process_charge                                   0     0      0    3149
                       _Charge_Check
 ---------------------------------------------------------------------------------
 (2) _Charge_Check                                         1     1      0    3149
                                             13 BANK0      1     1      0
                       _AdcResultChk
                       _ChargePwmOut
         _app_process_set_work_state
                      _set_led_state
 ---------------------------------------------------------------------------------
 (2) _set_led_state                                        9     6      3    2768
                                              0 BANK0      9     6      3
 ---------------------------------------------------------------------------------
 (3) _ChargePwmOut                                         1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _app_adc_process                                      0     0      0     359
          _app_adc_bat_voltage_check
 ---------------------------------------------------------------------------------
 (2) _app_adc_bat_voltage_check                            1     1      0     359
                                             13 BANK0      1     1      0
                       _AdcResultChk
        _app_process_set_water_state
         _app_process_set_work_state
 ---------------------------------------------------------------------------------
 (2) _app_process_set_work_state                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _app_process_set_water_state                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _AdcResultChk                                        13    10      3     315
                                              6 BANK0      7     4      3
                          _AdcOneChk
 ---------------------------------------------------------------------------------
 (4) _AdcOneChk                                            7     5      2     101
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _Timer2Config                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0Cofng                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwmConfig                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Timer2_Isr                                           2     2      0     244
                                              9 COMMON     2     2      0
                       _Mode_control
                    _MotorWaterDrive
                     _led_charge_pwm
                        _process_led
 ---------------------------------------------------------------------------------
 (7) _process_led                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _led_charge_pwm                                       0     0      0     244
                    i1_set_led_state
 ---------------------------------------------------------------------------------
 (8) i1_set_led_state                                      9     6      3     244
                                              0 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (7) _MotorWaterDrive                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Mode_control                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConfig
   _PortInit
   _PwmConfig
   _Timer0Cofng
   _Timer2Config
   _app_adc_process
     _app_adc_bat_voltage_check
       _AdcResultChk
         _AdcOneChk
       _app_process_set_water_state
       _app_process_set_work_state
   _app_process_charge
     _Charge_Check
       _AdcResultChk
         _AdcOneChk
       _ChargePwmOut
       _app_process_set_work_state
       _set_led_state
   _app_process_go_to_sleep
     _GotoSleep
       _AdcConfig
       _ChargePwmOut
       _PortInit
   _app_process_key
     _charge_or_lowBat_check
     _handle_key_pwr
       _app_process_set_mode_init
         _app_led_mode_set
           _set_led_state
         _app_process_motor_duty
       _app_process_set_mode_next
         _app_led_mode_set
           _set_led_state
         _app_process_motor_duty
       _app_process_set_work_state
     _handle_key_water
       _app_led_water_mode_set
         _set_led_state
       _app_process_set_water_mode_next
       _app_process_set_water_state
       _water_motor
     _key_brush_pwr_check
     _key_water_mode_check
     _key_water_pwr_check
   _app_process_set_water_state
   _app_process_set_work_state
   _app_process_work
     _app_process_charing
       _app_process_power_off
         _set_led_state
       _app_process_set_water_state
     _app_process_power_off
       _set_led_state
     _app_process_working
       _app_process_set_work_state
       _work_chang_timing
   _app_water_process_work
     _app_process_water_mdoe_led
       _app_process_set_water_state
     _app_process_water_working
       _app_process_set_water_state
     _app_process_water_workoff
       _water_turn_off
         _set_led_state
   _process_led_remind_low_power
     _app_process_set_water_state
     _app_process_set_work_state
     _set_led_dirct_state
     _set_led_state

 _Timer2_Isr (ROOT)
   _Mode_control
   _MotorWaterDrive
   _led_charge_pwm
     i1_set_led_state
   _process_led

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               50      0      37       6       68.8%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      E      4E       4       97.5%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       C       1       85.7%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      91       8        0.0%
ABS                  0      0      91       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 08 14:32:07 2025

            ??_app_process_set_work_state 0053                                         pc 0002  
                ?_app_process_go_to_sleep 0070                                        PL2 048A  
                                      PL4 012E                                        PL6 022C  
                                      PL8 06EA                                        fsr 0004  
               _app_adc_bat_voltage_check 0295                        set_led_state@index 0053  
                      set_led_state@state 0055                                       PL10 059A  
                                     PL12 0134                                       PL14 0290  
                                     l503 05D9                                       _GIE 005F  
                                     _RA0 0028                                       _RA1 0029  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RB2 0032  
                                     _RA5 002D                                       _RB3 0033  
                                     _RA6 002E                                       _RB5 0035  
                                     _RB6 0036                                       _PR2 0092  
                         ?_led_charge_pwm 0070                                       indf 0000  
                         ?_water_turn_off 0070                                      S7298 07F5  
                         _app_adc_process 07FB                                      l1034 0753  
                                    l1053 00B2                                      l1070 0104  
                                    l1054 00B3                                      l1046 0082  
                                    l1055 00B8                                      l1068 00F6  
                                    l2216 01ED                                      l1622 06E5  
                                    l7000 01E1                                      l7002 01E5  
                                    l7004 01E7                                      l7102 0737  
                                    l6400 0295                                      l6232 0626  
                                    l7112 078D                                      l6250 05E2  
                                    l7018 01FA                                      l7042 0228  
                                    l4811 06B6                                      l6420 02C2  
                                    l6236 0637                                      l6324 0720  
                                    l7108 078A                                      l7140 0768  
                                    l6422 02C4                                      l6510 009B  
                                    l6502 0091                                      l6262 0608  
                                    l6270 02F6                                      l6342 0477  
                                    l6334 045F                                      l7142 0769  
                                    l6504 0094                                      l6272 02F7  
                                    l6280 030B                                      l6442 02E2  
                                    l6522 00C4                                      l6514 00B5  
                                    l6266 0617                                      l6274 02FC  
                                    l6282 0316                                      l6346 0483  
                                    l6338 046B                                      l6362 06AA  
                                    l6354 069E                                      l6602 050D  
                                    l6610 051F                                      l7138 0767  
                                    l6444 02E3                                      l6540 00DE  
                                    l6532 00CC                                      l6276 0301  
                                    l6700 0409                                      l6620 0535  
                                    l3789 068E                                      l6454 02F4  
                                    l6550 010D                                      l6366 06B0  
                                    l6358 06A4                                      l6710 0390  
                                    l6614 0525                                      l6544 00F7  
                                    l6560 0121                                      l6456 002E  
                                    l6384 073A                                      l6704 040C  
                                    l6720 0399                                      l6640 055C  
                                    l6554 0116                                      l6538 00DD  
                                    l6482 0069                                      l6706 0415  
                                    l6722 039B                                      l4858 0766  
                                    l6484 006C                                      l6652 06D9  
                                    l6740 03AF                                      l6708 038F  
                                    l6628 0544                                      l6636 0556  
                                    l6396 07A8                                      l6558 011F  
                                    l6742 03B4                                      l6646 056C  
                                    l6680 03EF                                      l6664 03D6  
                                    l6744 03B6                                      l6760 03CB  
                                    l6728 03A7                                      l6736 03AD  
                                    l6576 04D6                                      l6584 04E8  
                                    l6904 06C2                                      l6690 03FD  
                                    l6674 03E3                                      l6762 03D3  
                                    l6594 04FE                                      l6770 0574  
                                    l6756 03C9                                      l6748 03BC  
                                    l6588 04EE                                      l6764 07CA  
                                    l6870 0657                                      l6856 0452  
                                    l6688 03FA                                      l6858 076A  
                                    l6794 0595                                      l6778 0582  
                                    l6866 0652                                      l6796 0597  
                                    l6892 0676                                      l6876 0663  
                                    _ADON 00F8                                      l6798 0417  
                                    l6894 0678                                      l6898 06B9  
                                    l6996 01DA                                      l6998 01DE  
                                    _T0IE 005D                                      _T0IF 005A  
                                    _IOCA 0009                                      _IOCB 0096  
                                    u3137 0034                                      u3147 003C  
                                    u3157 029B                                      u3167 02A2  
                                    u3177 05D1                                      u1763 00EC  
                                    u1693 00A8                                      u1775 00FE  
                                    _RAIE 0463                                      _PEIE 005E  
                                    _RAIF 0063                                      _RBIE 005B  
                                    _RBIF 0058                                      _TMR0 0001  
                                    _WPUA 0007                                      _WPUB 0095  
     __size_of_app_process_set_work_state 0005                                      _main 067B  
                              _Flag_250us 03DA                                      _step 0046  
                                    btemp 007E                 entry__app_process_charing 002C  
                                    start 000A                   ??_app_process_power_off 005C  
               __size_of_handle_key_water 0046                  __size_of_app_process_key 0006  
              ?_app_process_water_working 0070                ?_app_process_water_workoff 0070  
             __size_of_app_process_charge 0001                                     ?_main 0070  
               entry__app_process_working 002D                                     _T2CON 0012  
                                   _PORTA 0005                                     _PORTB 0006  
                                   _PWMIF 0062                                     _TRISA 0085  
                                   _TRISB 0086                                     _PWMTH 001A  
                                   _PWMTL 0019                       _set_led_dirct_state 07CA  
                  fp__app_process_charing 002C                  __size_of_MotorWaterDrive 0013  
                                   _admax 00D1                                     _admin 00D3  
                                   _adsum 00C7                  ??_app_process_motor_duty 0053  
                      __size_of_AdcConfig 0006                                     _low_a 0043  
                                   _low_b 0041                        __size_of_AdcOneChk 002D  
                                   fpbase 002A                   ?_app_led_water_mode_set 0070  
                          __pbitbssCOMMON 03D8                                     pclath 000A  
                      AdcOneChk@ad_result 0057                                     status 0003  
                                   wtemp0 007E                             AdcResultChk@i 005D  
                        ?i1_set_led_state 0070                      ?_set_led_dirct_state 0053  
                  fp__app_process_working 002D                           __initialization 000B  
                   __size_of_Charge_Check 0100                              __end_of_main 069A  
                             _CntLedFlash 002E                     __size_of_ChargePwmOut 0010  
             ??_app_process_set_mode_init 005C               ??_app_process_set_mode_next 005C  
                           ?_Mode_control 0070               __end_of_key_brush_pwr_check 0501  
                                  ??_main 0061                   __end_of_app_adc_process 07FC  
             __end_of_key_water_pwr_check 0538                  __end_of_app_process_work 0792  
                 ?_app_water_process_work 0070                          __end_of_PortInit 074B  
            __size_of_app_process_charing 000E            __end_of_app_led_water_mode_set 048A  
                                  _ADCON0 001F                                    _ADCON1 009F  
                        _flag_charge_once 03DE                                    _ADRESH 001E  
                                  _ADRESL 009E                                    _ANSELH 0094  
                                  _GODONE 00F9                                    i1l2181 0159  
                                  i1l2261 0263                                    i1l2262 0269  
                                  i1l2183 017F                                    i1l2175 01BD  
                                  i1l2263 026F                                    i1l2255 023F  
                                  i1l2256 0245                                    i1l2177 0155  
                                  i1l2265 027D                                    i1l2257 024B  
                                  i1l2258 0251                                    i1l2179 0166  
                                  i1l2267 0288                                    i1l2259 0257  
                                  i1l3811 04C2                                    u300_25 038A  
                                  i1l7080 027E                                    i1l7064 025B  
                                  i1l7170 0374                                    i1l7162 035C  
                                  i1l7074 0273                                    i1l7156 034C  
                                  i1l7260 04AE                                    i1l7174 0381  
                                  i1l7166 0367                                    i1l7190 070F  
                                  i1l7086 0289                                    i1l7246 0499  
                                  i1l7168 0372                                    i1l7184 070B  
                                  i1l7272 04BE                                    i1l7266 04B9  
                                  i1l6918 05B1                                    i1l6952 0186  
                                  i1l6970 01A9                                    i1l6956 0190  
                                  _INTCON 000B                                    u250_25 0171  
                                  u296_25 0358                                    u297_25 0365  
                                  _OSCCON 008F                                    u298_25 0370  
                                  u299_25 037D                                    _PWM0EN 00D8  
                            _Charge_Check 002E                                    _TMR2IE 0461  
                                  _TMR2IF 0061                                    _PWMD0L 0016  
                                  _WDTCON 0088                                    _PWMCON 001B  
                                  _TRISB3 0433                                    _SWDTEN 0440  
                            _dead_area_b1 0040                              _dead_area_b2 003F  
                        __end_of__fptable 002E                             _is_charge_pwm 03DB  
                      __size_of_GotoSleep 003D                              _ChargePwmOut 074B  
                                  _Cnt1ms 00CB                             ??_Timer0Cofng 0053  
                   ??_set_led_dirct_state 0055              __size_of_app_process_working 002B  
      __end_of_app_process_set_work_state 07F0                _app_process_set_work_state 07EB  
                              _Timer2_Isr 048F                         __end_of_AdcConfig 07EB  
                          ??_Mode_control 0070                         __end_of_AdcOneChk 05FA  
                       ??_app_process_key 005C                        __size_of_PwmConfig 0007  
          __end_of_app_water_process_work 076A                                    fptable 0025  
                                  fptotal 0003                                    saved_w 007E  
      __size_of_app_adc_bat_voltage_check 0061                           _charge_full_cnt 004D  
            __end_of_key_water_mode_check 056F                          ChargePwmOut@Duty 0053  
               _app_process_set_mode_init 0792           __size_of_app_process_motor_duty 0050  
               _app_process_set_mode_next 0718                              ?_process_led 0070  
                          _MotorWaterDuty 003C              ??_app_process_water_mdoe_led 0054  
                 __end_of__initialization 0023                         ??_MotorWaterDrive 0070  
                            ?_water_motor 0070                     __end_of_set_led_state 0652  
               __size_of_app_led_mode_set 002C                          _handle_key_water 038F  
                          __pcstackCOMMON 0070                      _adresult_chagrge_vdd 0036  
                            __pidataBANK0 0000                       __end_of_Timer0Cofng 07D8  
                        ??_led_charge_pwm 0079                          ??_water_turn_off 005C  
                              __end_ofPL2 048F                                __end_ofPL4 0134  
                              __end_ofPL6 0232                                __end_ofPL8 06EF  
     __end_of_app_process_set_water_state 07F5               _app_process_set_water_state 07F0  
                set_led_dirct_state@index 0053                         __end_of_GotoSleep 0454  
                        ?_app_adc_process 0070                                _dead_area1 0042  
     __size_of_app_process_water_mdoe_led 001C          __size_of_app_process_go_to_sleep 0011  
 __end_of_app_process_set_water_mode_next 07CA  __size_of_app_process_set_water_mode_next 0008  
       ??_app_process_set_water_mode_next 0053          ?_app_process_set_water_mode_next 0070  
         _app_process_set_water_mode_next 07C2         __end_of_app_adc_bat_voltage_check 02F6  
                          _CntLowPowerOff 0050                                __pbssBANK0 0020  
                              __pbssBANK1 00A0                             ?_Timer2Config 0070  
                       __end_of_PwmConfig 07DF                               ?_Timer2_Isr 0070  
                              __pmaintext 067B            __size_of_app_process_power_off 0009  
                               ?_PortInit 0070             __end_of_app_process_power_off 07BA  
                  _app_process_motor_duty 02F6                                __pintentry 0004  
                              _app_charge 00A0               ??_app_process_water_working 0054  
             ??_app_process_water_workoff 005C         app_process_set_water_state@states 0053  
                 __size_of_handle_key_pwr 0042                                   _PWM_Cnt 002A  
                                 _Cnt10ms 00CD                        _key_water_pwr_type 004B  
                                 _PWM_dir 03DC                      __end_of_Mode_control 038F  
                          ??_Timer2Config 0053                  ??_charge_or_lowBat_check 0053  
                             _Timer0Cofng 07D1                       _app_process_charing 076A  
                              ??_PortInit 0053                __end_of_app_process_charge 07FB  
                    _key_water_mode_check 0538                                   _adtimes 0052  
                                 __ptext1 01C3                                   __ptext2 07CA  
                                 __ptext3 075B                                   __ptext4 07F9  
                                 __ptext5 07A8                                   __ptext6 0652  
                                 __ptext7 06B9                                   __ptext8 0786  
                                 __ptext9 056F                       _app_process_working 056F  
                    ?_app_process_charing 0070                         ?_app_process_work 0070  
                     __size_of_Timer2_Isr 003A                         _key_brush_pwrtype 004C  
                      ??_app_process_work 005C                                   clrloop0 07BB  
                    end_of_initialization 0023        __end_of_app_process_water_mdoe_led 06D5  
              _app_process_water_mdoe_led 06B9                 _app_process_water_working 0652  
               _app_process_water_workoff 07F9                      __size_of_process_led 005E  
                    ?_app_process_working 0070                      __size_of_water_motor 001F  
                         _app_process_key 07DF        __size_of_app_process_set_mode_init 000B  
      __size_of_app_process_set_mode_next 0011                          _app_led_mode_set 05FA  
             ?_app_process_set_work_state 0070                     ?_key_water_mode_check 0070  
                __size_ofi1_set_led_state 002E                              _KeyRelaxCnt1 0049  
                            _KeyRelaxCnt2 0048                              _KeyRelaxCnt3 0047  
                fp__app_process_power_off 002B                                 _AdcConfig 07E5  
                               _AdcOneChk 05CD                     ??_app_process_charing 005C  
                           ?_AdcResultChk 0059                           _MotorWaterDrive 0705  
                               _BatAdcCnt 0051                   _app_process_go_to_sleep 0729  
             entry__app_process_power_off 002B              __size_of_key_brush_pwr_check 0038  
                __end_of_handle_key_water 03D5                              _KeyPressCnt1 0034  
                            _KeyPressCnt2 0032                              _KeyPressCnt3 0030  
             __end_of_set_led_dirct_state 07D1                                 _BatStates 006B  
            __size_of_key_water_pwr_check 0037                         _work_chang_timing 06EF  
        app_process_set_work_state@states 0053                     ??_app_process_working 0054  
                      ?_work_chang_timing 0070           __size_of_charge_or_lowBat_check 0015  
                               _Flag_10ms 03D8         __end_of_app_process_set_mode_init 079D  
       __end_of_app_process_set_mode_next 0729                       ??_work_chang_timing 0053  
    __end_of_process_led_remind_low_power 022C     __size_of_process_led_remind_low_power 0069  
            _process_led_remind_low_power 01C3                                ?_AdcConfig 0070  
                    __end_of_Timer2Config 07A8                                ?_AdcOneChk 0053  
                          ??_AdcResultChk 005C                          _adresultvdd_back 0038  
                             __end_ofPL10 059F                               __end_ofPL12 0139  
                             __end_ofPL14 0295                       start_initialization 000B  
                   __size_of_Mode_control 0049                            _handle_key_pwr 03D5  
                               _GotoSleep 0417                             _adresultmotor 00CF  
               __end_of_work_chang_timing 0705                   __end_of_app_process_key 07E5  
                    AdcResultChk@ad_value 005E                   ?_app_process_motor_duty 0070  
                            ??_Timer2_Isr 0079                    ??_key_water_mode_check 0053  
                               _PwmConfig 07D8                          _water_work_state 006C  
                             __pdataBANK0 0061                   __end_of_MotorWaterDrive 0718  
                       __size_of_PortInit 0011                              _Mode_control 0346  
           ?_process_led_remind_low_power 0070                  ??_app_led_water_mode_set 005C  
               ??_app_process_go_to_sleep 0054                    _charge_or_lowBat_check 06D5  
                  __end_of_handle_key_pwr 0417                    __size_of_set_led_state 002C  
                       ??i1_set_led_state 0073                                 ___latbits 0000  
                           __pcstackBANK0 0053                            _motor_lock_cnt 004F  
                       __size_of__fptable 0009                                ?_GotoSleep 0070  
                      __end_of_Timer2_Isr 04C9                               _adresultvdd 003A  
                __size_of_app_adc_process 0001                ?_app_adc_bat_voltage_check 0070  
          __end_of_app_process_motor_duty 0346                                 __pnvBANK0 006C  
                            ?_Timer0Cofng 0070                          _MOTOR_InitStruct 00BC  
      __size_of_app_process_water_working 0029        __size_of_app_process_water_workoff 0001  
                              ?_PwmConfig 0070                                 __pfunctab 0025  
                ??_app_water_process_work 005C                                 _app_timer 00B2  
                   _app_process_power_off 07B1                                 __pswtext1 07F5  
                               _led_index 0020                               ??_AdcConfig 0053  
                             ??_AdcOneChk 0055                           ?_handle_key_pwr 0070  
                           _CntWaterDrive 003D                        _app_process_charge 07FA  
                __end_of_app_led_mode_set 0626                   __size_of_led_charge_pwm 008A  
                 __size_of_water_turn_off 0009                       _key_water_mode_type 004A  
              __size_of_work_chang_timing 0016               ?_app_process_water_mdoe_led 0070  
                     ?_app_process_charge 0070                          ?_app_process_key 0070  
                           ?_Charge_Check 0070                         interrupt_function 0004  
         __end_of_app_process_go_to_sleep 073A                             ?_ChargePwmOut 0070  
                               clear_ram0 07BA                             _set_led_state 0626  
                    __end_of_AdcResultChk 0786                 __size_of_app_process_work 000C  
                     _key_brush_pwr_check 04C9                     __size_of_Timer2Config 000B  
       __end_of_app_process_water_working 067B         __end_of_app_process_water_workoff 07FA  
                              AdcOneChk@i 0056                      i1set_led_state@index 0070  
                    ??_app_process_charge 0061                          ?_MotorWaterDrive 0070  
                     _key_water_pwr_check 0501                      i1set_led_state@state 0072  
                                _PWM_Duty 002C                                 _pwm_timer 0028  
         __size_of_app_led_water_mode_set 0036                                  _Flag_1ms 03D9  
                    ?_key_brush_pwr_check 0070            ??_process_led_remind_low_power 005C  
                             ??_GotoSleep 0054                         ?_handle_key_water 0070  
                                _CntSleep 0045                                 _work_mode 0066  
                               _work_step 0044                             ??_process_led 0070  
                          ??_Charge_Check 0060                        ??_handle_key_water 005C  
                    ?_key_water_pwr_check 0070                             ??_water_motor 0053  
                          ??_ChargePwmOut 0053                            ?_set_led_state 0053  
                          _app_work_state 006D                              _Timer2Config 079D  
                   _charge_force_full_cnt 00C3                          _bat_remind_delay 004E  
                       ??_app_adc_process 0061                               ??_PwmConfig 0053  
                         _water_work_mode 0061                                  _PortInit 073A  
                         _water_work_step 003E                    ?_app_process_power_off 0070  
         __size_of_app_water_process_work 000F                             _motor_fix_cnt 0026  
             __end_of_app_process_charing 0778              ?_app_process_set_water_state 0070  
                                __fptable 0025                                  _adresult 00D5  
                   ??_key_brush_pwr_check 0053                                  __ptext10 06EF  
                                __ptext11 076A                                  __ptext20 0454  
                                __ptext12 07B1                                  __ptext21 03D5  
                                __ptext13 07DF                                  __ptext30 07E5  
                                __ptext22 0718                                  __ptext14 0501  
                                __ptext31 07FA                                  __ptext23 0792  
                                __ptext15 0538                                  __ptext40 05CD  
                                __ptext32 002E                                  __ptext24 02F6  
                                __ptext16 04C9                                  __ptext41 079D  
                                __ptext33 0626                                  __ptext25 05FA  
                                __ptext17 038F                                  __ptext42 07D1  
                                __ptext34 074B                                  __ptext26 06D5  
                                __ptext18 069A                                  __ptext43 07D8  
                                __ptext35 07FB                                  __ptext27 0729  
                                __ptext19 07C2                                  __ptext44 048F  
                                __ptext36 0295                                  __ptext28 0417  
                                __ptext45 0232                                  __ptext37 07EB  
                                __ptext29 073A                                  __ptext46 0139  
                                __ptext38 07F0                                  __ptext47 059F  
                                __ptext39 0778                                  __ptext48 0705  
                                __ptext49 0346               __end_of_app_process_working 059A  
                   ??_key_water_pwr_check 0053                             __size_of_main 001F  
                  _app_led_water_mode_set 0454                       __end_of_process_led 0290  
            __size_of_set_led_dirct_state 0007                       __end_of_water_motor 06B9  
                    __size_of_Timer0Cofng 0007                           i1_set_led_state 059F  
              ?_app_process_set_mode_init 0070                ?_app_process_set_mode_next 0070  
                 ?_charge_or_lowBat_check 0070             ??_app_process_set_water_state 0053  
                          _led_charge_pwm 0139                            _water_turn_off 07A8  
                  _app_water_process_work 075B                                  intlevel1 0025  
                         ??_set_led_state 0056                     __size_of_AdcResultChk 000E  
             ??_app_adc_bat_voltage_check 0060                          _app_process_work 0786  
                      _water_mode_led_cnt 0024            __end_of_charge_or_lowBat_check 06EA  
           __size_of_key_water_mode_check 0037                            AdcOneChk@adldo 0053  
                        ??_handle_key_pwr 005C                         AdcResultChk@adldo 0059  
                    __end_of_Charge_Check 012E                      __end_of_ChargePwmOut 075B  
                     _flag_discharge_once 03DD                                _OPTION_REG 0081  
                  __end_of_led_charge_pwm 01C3                    __end_of_water_turn_off 07B1  
                            _AdcResultChk 0778                         ?_app_led_mode_set 0070  
                           AdcOneChk@adch 0070                          AdcResultChk@adch 005C  
                      ??_app_led_mode_set 005C                               _process_led 0232  
                             _water_motor 069A                   __end_ofi1_set_led_state 05CD  
    __size_of_app_process_set_water_state 0005  
