

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Aug 06 10:47:32 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1712E
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	swtext1,local,class=CONST,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	intentry,global,class=CODE,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	functab,global,class=ENTRY,delta=2
    67                           	psect	pa_nodes0,global,class=CODE,delta=2
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 1.45
    71                           ; Generated 16/11/2017 GMT
    72                           ; 
    73                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F887 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataBANK0
   106  0000                     __pidataBANK0:	
   107                           
   108                           	psect	nvBANK0
   109  006C                     __pnvBANK0:	
   110  006C                     _water_work_state:	
   111  006C                     	ds	1
   112  006D                     _app_work_state:	
   113  006D                     	ds	1
   114  001F                     _ADCON0	set	31
   115  001E                     _ADRESH	set	30
   116  001B                     _PWMCON	set	27
   117  001A                     _PWMTH	set	26
   118  0019                     _PWMTL	set	25
   119  0016                     _PWMD0L	set	22
   120  0012                     _T2CON	set	18
   121  000B                     _INTCON	set	11
   122  0009                     _IOCA	set	9
   123  0007                     _WPUA	set	7
   124  0006                     _PORTB	set	6
   125  0005                     _PORTA	set	5
   126  0001                     _TMR0	set	1
   127  00F8                     _ADON	set	248
   128  00F9                     _GODONE	set	249
   129  00D8                     _PWM0EN	set	216
   130  0061                     _TMR2IF	set	97
   131  0062                     _PWMIF	set	98
   132  0063                     _RAIF	set	99
   133  0058                     _RBIF	set	88
   134  005A                     _T0IF	set	90
   135  005B                     _RBIE	set	91
   136  005D                     _T0IE	set	93
   137  005E                     _PEIE	set	94
   138  005F                     _GIE	set	95
   139  0030                     _RB0	set	48
   140  0031                     _RB1	set	49
   141  0032                     _RB2	set	50
   142  0033                     _RB3	set	51
   143  0035                     _RB5	set	53
   144  0036                     _RB6	set	54
   145  0028                     _RA0	set	40
   146  0029                     _RA1	set	41
   147  002A                     _RA2	set	42
   148  002B                     _RA3	set	43
   149  002C                     _RA4	set	44
   150  002D                     _RA5	set	45
   151  002E                     _RA6	set	46
   152  009F                     _ADCON1	set	159
   153  009E                     _ADRESL	set	158
   154  0096                     _IOCB	set	150
   155  0095                     _WPUB	set	149
   156  0094                     _ANSELH	set	148
   157  0092                     _PR2	set	146
   158  008F                     _OSCCON	set	143
   159  0088                     _WDTCON	set	136
   160  0086                     _TRISB	set	134
   161  0085                     _TRISA	set	133
   162  0081                     _OPTION_REG	set	129
   163  0461                     _TMR2IE	set	1121
   164  0463                     _RAIE	set	1123
   165  0440                     _SWDTEN	set	1088
   166  0433                     _TRISB3	set	1075
   167                           
   168                           	psect	cinit
   169  000B                     start_initialization:	
   170                           ; #config settings
   171                           
   172  000B                     __initialization:	
   173                           
   174                           ;initializer for _water_work_mode
   175  000B  3003               	movlw	3
   176  000C  00E1               	movwf	__pdataBANK0& (0+127)
   177  000D  3002               	movlw	2
   178  000E  01E2               	clrf	(__pdataBANK0+1)& (0+127)
   179  000F  01E3               	clrf	(__pdataBANK0+2)& (0+127)
   180  0010  01E4               	clrf	(__pdataBANK0+3)& (0+127)
   181  0011  01E5               	clrf	(__pdataBANK0+4)& (0+127)
   182                           
   183                           ;initializer for _work_mode
   184  0012  00E6               	movwf	(__pdataBANK0+5)& (0+127)
   185  0013  3005               	movlw	5
   186  0014  01E7               	clrf	(__pdataBANK0+6)& (0+127)
   187  0015  01E8               	clrf	(__pdataBANK0+7)& (0+127)
   188  0016  01E9               	clrf	(__pdataBANK0+8)& (0+127)
   189  0017  01EA               	clrf	(__pdataBANK0+9)& (0+127)
   190                           
   191                           ;initializer for _BatStates
   192  0018  00EB               	movwf	(__pdataBANK0+10)& (0+127)
   193  0019  30A0               	movlw	low __pbssBANK1
   194                           
   195                           ; Clear objects allocated to BANK1
   196  001A  1383               	bcf	3,7	;select IRP bank0
   197  001B  0084               	movwf	4
   198  001C  30D7               	movlw	low (__pbssBANK1+55)
   199  001D  27A3               	fcall	clear_ram0
   200                           
   201                           ; Clear objects allocated to BANK0
   202  001E  3020               	movlw	low __pbssBANK0
   203  001F  0084               	movwf	4
   204  0020  3053               	movlw	low (__pbssBANK0+51)
   205  0021  27A3               	fcall	clear_ram0
   206                           
   207                           ; Clear objects allocated to BITCOMMON
   208  0022  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   209  0023                     end_of_initialization:	
   210                           ;End of C runtime variable initialization code
   211                           
   212  0023                     __end_of__initialization:	
   213  0023  0183               	clrf	3
   214  0024  2E64               	ljmp	_main	;jump to C main() function
   215                           
   216                           	psect	bitbssCOMMON
   217  03D8                     __pbitbssCOMMON:	
   218  03D8                     _Flag_10ms:	
   219  03D8                     	ds	1
   220  03D9                     _Flag_1ms:	
   221  03D9                     	ds	1
   222  03DA                     _Flag_250us:	
   223  03DA                     	ds	1
   224  03DB                     _is_charge_pwm:	
   225  03DB                     	ds	1
   226  03DC                     _PWM_dir:	
   227  03DC                     	ds	1
   228  03DD                     _flag_discharge_once:	
   229  03DD                     	ds	1
   230  03DE                     _flag_charge_once:	
   231  03DE                     	ds	1
   232                           
   233                           	psect	bssBANK0
   234  0020                     __pbssBANK0:	
   235  0020                     _led_index:	
   236  0020                     	ds	4
   237  0024                     _water_mode_led_cnt:	
   238  0024                     	ds	2
   239  0026                     _motor_fix_cnt:	
   240  0026                     	ds	2
   241  0028                     _pwm_timer:	
   242  0028                     	ds	2
   243  002A                     _PWM_Cnt:	
   244  002A                     	ds	2
   245  002C                     _PWM_Duty:	
   246  002C                     	ds	2
   247  002E                     _CntLedFlash:	
   248  002E                     	ds	2
   249  0030                     _KeyPressCnt3:	
   250  0030                     	ds	2
   251  0032                     _KeyPressCnt2:	
   252  0032                     	ds	2
   253  0034                     _KeyPressCnt1:	
   254  0034                     	ds	2
   255  0036                     _adresult_chagrge_vdd:	
   256  0036                     	ds	2
   257  0038                     _adresultvdd_back:	
   258  0038                     	ds	2
   259  003A                     _adresultvdd:	
   260  003A                     	ds	2
   261  003C                     _MotorWaterDuty:	
   262  003C                     	ds	1
   263  003D                     _CntWaterDrive:	
   264  003D                     	ds	1
   265  003E                     _water_work_step:	
   266  003E                     	ds	1
   267  003F                     _dead_area_b2:	
   268  003F                     	ds	1
   269  0040                     _dead_area_b1:	
   270  0040                     	ds	1
   271  0041                     _low_b:	
   272  0041                     	ds	1
   273  0042                     _dead_area1:	
   274  0042                     	ds	1
   275  0043                     _low_a:	
   276  0043                     	ds	1
   277  0044                     _work_step:	
   278  0044                     	ds	1
   279  0045                     _CntSleep:	
   280  0045                     	ds	1
   281  0046                     _step:	
   282  0046                     	ds	1
   283  0047                     _KeyRelaxCnt3:	
   284  0047                     	ds	1
   285  0048                     _KeyRelaxCnt2:	
   286  0048                     	ds	1
   287  0049                     _KeyRelaxCnt1:	
   288  0049                     	ds	1
   289  004A                     _key_water_mode_type:	
   290  004A                     	ds	1
   291  004B                     _key_water_pwr_type:	
   292  004B                     	ds	1
   293  004C                     _key_brush_pwrtype:	
   294  004C                     	ds	1
   295  004D                     _charge_full_cnt:	
   296  004D                     	ds	1
   297  004E                     _bat_remind_delay:	
   298  004E                     	ds	1
   299  004F                     _motor_lock_cnt:	
   300  004F                     	ds	1
   301  0050                     _CntLowPowerOff:	
   302  0050                     	ds	1
   303  0051                     _BatAdcCnt:	
   304  0051                     	ds	1
   305  0052                     _adtimes:	
   306  0052                     	ds	1
   307                           
   308                           	psect	dataBANK0
   309  0061                     __pdataBANK0:	
   310  0061                     _water_work_mode:	
   311  0061                     	ds	5
   312  0066                     _work_mode:	
   313  0066                     	ds	5
   314  006B                     _BatStates:	
   315  006B                     	ds	1
   316                           
   317                           	psect	bssBANK1
   318  00A0                     __pbssBANK1:	
   319  00A0                     _app_charge:	
   320  00A0                     	ds	18
   321  00B2                     _app_timer:	
   322  00B2                     	ds	10
   323  00BC                     _MOTOR_InitStruct:	
   324  00BC                     	ds	7
   325  00C3                     _charge_force_full_cnt:	
   326  00C3                     	ds	4
   327  00C7                     _adsum:	
   328  00C7                     	ds	4
   329  00CB                     _Cnt1ms:	
   330  00CB                     	ds	2
   331  00CD                     _Cnt10ms:	
   332  00CD                     	ds	2
   333  00CF                     _adresultmotor:	
   334  00CF                     	ds	2
   335  00D1                     _admax:	
   336  00D1                     	ds	2
   337  00D3                     _admin:	
   338  00D3                     	ds	2
   339  00D5                     _adresult:	
   340  00D5                     	ds	2
   341                           
   342                           	psect	clrtext
   343  07A3                     clear_ram0:	
   344                           ;	Called with FSR containing the base address, and
   345                           ;	W with the last address+1
   346                           
   347  07A3  0064               	clrwdt	;clear the watchdog before getting into this loop
   348  07A4                     clrloop0:	
   349  07A4  0180               	clrf	0	;clear RAM location pointed to by FSR
   350  07A5  0A84               	incf	4,f	;increment pointer
   351  07A6  0604               	xorwf	4,w	;XOR with final address
   352  07A7  1903               	btfsc	3,2	;have we reached the end yet?
   353  07A8  3400               	retlw	0	;all done for this memory range, return
   354  07A9  0604               	xorwf	4,w	;XOR again to restore value
   355  07AA  2FA4               	goto	clrloop0	;do the next byte
   356                           
   357                           	psect	cstackCOMMON
   358  0070                     __pcstackCOMMON:	
   359  0070                     ?_app_process_set_work_state:	
   360  0070                     ?_app_process_set_water_state:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_app_process_set_mode_init:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_app_process_set_mode_next:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_app_led_water_mode_set:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_water_motor:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_app_process_set_water_mode_next:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_work_chang_timing:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_GotoSleep:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_app_water_process_work:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_Mode_control:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ??_Mode_control:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_MotorWaterDrive:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ??_MotorWaterDrive:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_app_process_motor_duty:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_app_adc_bat_voltage_check:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_app_adc_process:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_ChargePwmOut:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_Charge_Check:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?_app_process_charge:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_key_brush_pwr_check:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_key_water_pwr_check:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_key_water_mode_check:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_charge_or_lowBat_check:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ?_handle_key_pwr:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_handle_key_water:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?_app_process_key:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?_led_charge_pwm:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ?_app_led_mode_set:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?_process_led_remind_low_power:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_process_led:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     ??_process_led:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     ?_app_process_working:	
   454                           ; 1 bytes @ 0x0
   455                           
   456  0070                     ?_app_process_power_off:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  0070                     ?_app_process_go_to_sleep:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0070                     ?_app_process_charing:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0070                     ?_app_process_work:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0070                     ?_PortInit:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0070                     ?_Timer0Cofng:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ?_Timer2Config:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_AdcConfig:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ?_PwmConfig:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?_main:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ?_Timer2_Isr:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?_app_process_water_working:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ?_water_turn_off:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?_app_process_water_workoff:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?_app_process_water_mdoe_led:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?i1_set_led_state:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0070                     AdcOneChk@adch:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     i1set_led_state@index:	
   508                           ; 1 bytes @ 0x0
   509                           
   510                           
   511                           ; 2 bytes @ 0x0
   512  0070                     	ds	2
   513  0072                     i1set_led_state@state:	
   514                           
   515                           ; 1 bytes @ 0x2
   516  0072                     	ds	1
   517  0073                     ??i1_set_led_state:	
   518                           
   519                           ; 1 bytes @ 0x3
   520  0073                     	ds	6
   521  0079                     ??_led_charge_pwm:	
   522  0079                     ??_Timer2_Isr:	
   523                           ; 1 bytes @ 0x9
   524                           
   525                           
   526                           ; 1 bytes @ 0x9
   527  0079                     	ds	2
   528                           
   529                           	psect	cstackBANK0
   530  0053                     __pcstackBANK0:	
   531  0053                     ??_app_process_set_work_state:	
   532  0053                     ??_app_process_set_water_state:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0053                     ?_set_led_state:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0053                     ??_water_motor:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0053                     ??_app_process_set_water_mode_next:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0053                     ?_set_led_dirct_state:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  0053                     ??_work_chang_timing:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0053                     ??_app_process_motor_duty:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0053                     ??_ChargePwmOut:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0053                     ??_key_brush_pwr_check:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0053                     ??_key_water_pwr_check:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0053                     ??_key_water_mode_check:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0053                     ??_charge_or_lowBat_check:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0053                     ??_PortInit:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0053                     ??_Timer0Cofng:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0053                     ??_Timer2Config:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0053                     ??_AdcConfig:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0053                     ??_PwmConfig:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0053                     ?_AdcOneChk:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0053                     AdcOneChk@adldo:	
   587                           ; 2 bytes @ 0x0
   588                           
   589  0053                     ChargePwmOut@Duty:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0053                     app_process_set_work_state@states:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0053                     app_process_set_water_state@states:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0053                     set_led_state@index:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0053                     set_led_dirct_state@index:	
   602                           ; 2 bytes @ 0x0
   603                           
   604                           
   605                           ; 2 bytes @ 0x0
   606  0053                     	ds	1
   607  0054                     ??_GotoSleep:	
   608  0054                     ??_app_process_working:	
   609                           ; 1 bytes @ 0x1
   610                           
   611  0054                     ??_app_process_go_to_sleep:	
   612                           ; 1 bytes @ 0x1
   613                           
   614  0054                     ??_app_process_water_working:	
   615                           ; 1 bytes @ 0x1
   616                           
   617  0054                     ??_app_process_water_mdoe_led:	
   618                           ; 1 bytes @ 0x1
   619                           
   620                           
   621                           ; 1 bytes @ 0x1
   622  0054                     	ds	1
   623  0055                     ??_set_led_dirct_state:	
   624  0055                     ??_AdcOneChk:	
   625                           ; 1 bytes @ 0x2
   626                           
   627  0055                     set_led_state@state:	
   628                           ; 1 bytes @ 0x2
   629                           
   630                           
   631                           ; 1 bytes @ 0x2
   632  0055                     	ds	1
   633  0056                     ??_set_led_state:	
   634  0056                     AdcOneChk@i:	
   635                           ; 1 bytes @ 0x3
   636                           
   637                           
   638                           ; 1 bytes @ 0x3
   639  0056                     	ds	1
   640  0057                     AdcOneChk@ad_result:	
   641                           
   642                           ; 2 bytes @ 0x4
   643  0057                     	ds	2
   644  0059                     ?_AdcResultChk:	
   645  0059                     AdcResultChk@adldo:	
   646                           ; 2 bytes @ 0x6
   647                           
   648                           
   649                           ; 1 bytes @ 0x6
   650  0059                     	ds	3
   651  005C                     ??_app_process_set_mode_init:	
   652  005C                     ??_app_process_set_mode_next:	
   653                           ; 1 bytes @ 0x9
   654                           
   655  005C                     ??_app_led_water_mode_set:	
   656                           ; 1 bytes @ 0x9
   657                           
   658  005C                     ??_app_water_process_work:	
   659                           ; 1 bytes @ 0x9
   660                           
   661  005C                     ??_AdcResultChk:	
   662                           ; 1 bytes @ 0x9
   663                           
   664  005C                     ??_handle_key_pwr:	
   665                           ; 1 bytes @ 0x9
   666                           
   667  005C                     ??_handle_key_water:	
   668                           ; 1 bytes @ 0x9
   669                           
   670  005C                     ??_app_process_key:	
   671                           ; 1 bytes @ 0x9
   672                           
   673  005C                     ??_app_led_mode_set:	
   674                           ; 1 bytes @ 0x9
   675                           
   676  005C                     ??_process_led_remind_low_power:	
   677                           ; 1 bytes @ 0x9
   678                           
   679  005C                     ??_app_process_power_off:	
   680                           ; 1 bytes @ 0x9
   681                           
   682  005C                     ??_app_process_charing:	
   683                           ; 1 bytes @ 0x9
   684                           
   685  005C                     ??_app_process_work:	
   686                           ; 1 bytes @ 0x9
   687                           
   688  005C                     ??_water_turn_off:	
   689                           ; 1 bytes @ 0x9
   690                           
   691  005C                     ??_app_process_water_workoff:	
   692                           ; 1 bytes @ 0x9
   693                           
   694  005C                     AdcResultChk@adch:	
   695                           ; 1 bytes @ 0x9
   696                           
   697                           
   698                           ; 1 bytes @ 0x9
   699  005C                     	ds	1
   700  005D                     AdcResultChk@i:	
   701                           
   702                           ; 1 bytes @ 0xA
   703  005D                     	ds	1
   704  005E                     AdcResultChk@ad_value:	
   705                           
   706                           ; 2 bytes @ 0xB
   707  005E                     	ds	2
   708  0060                     ??_app_adc_bat_voltage_check:	
   709  0060                     ??_Charge_Check:	
   710                           ; 1 bytes @ 0xD
   711                           
   712                           
   713                           ; 1 bytes @ 0xD
   714  0060                     	ds	1
   715  0061                     ??_app_adc_process:	
   716  0061                     ??_app_process_charge:	
   717                           ; 1 bytes @ 0xE
   718                           
   719  0061                     ??_main:	
   720                           ; 1 bytes @ 0xE
   721                           
   722                           
   723                           	psect	maintext
   724  0664                     __pmaintext:	
   725                           ; 1 bytes @ 0xE
   726 ;;
   727 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   728 ;;
   729 ;; *************** function _main *****************
   730 ;; Defined at:
   731 ;;		line 85 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\main.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;		None
   734 ;; Auto vars:     Size  Location     Type
   735 ;;		None
   736 ;; Return value:  Size  Location     Type
   737 ;;                  1    wreg      void 
   738 ;; Registers used:
   739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   740 ;; Tracked objects:
   741 ;;		On entry : B00/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMMON   BANK0   BANK1
   745 ;;      Params:         0       0       0
   746 ;;      Locals:         0       0       0
   747 ;;      Temps:          0       0       0
   748 ;;      Totals:         0       0       0
   749 ;;Total ram usage:        0 bytes
   750 ;; Hardware stack levels required when called:    8
   751 ;; This function calls:
   752 ;;		_AdcConfig
   753 ;;		_PortInit
   754 ;;		_PwmConfig
   755 ;;		_Timer0Cofng
   756 ;;		_Timer2Config
   757 ;;		_app_adc_process
   758 ;;		_app_process_charge
   759 ;;		_app_process_go_to_sleep
   760 ;;		_app_process_key
   761 ;;		_app_process_set_water_state
   762 ;;		_app_process_set_work_state
   763 ;;		_app_process_work
   764 ;;		_app_water_process_work
   765 ;;		_process_led_remind_low_power
   766 ;; This function is called by:
   767 ;;		Startup code after reset
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           
   772                           ;psect for function _main
   773  0664                     _main:	
   774                           
   775                           ;incstack = 0
   776                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   777  0664  0000               	nop	;# 
   778  0665  0064               	clrwdt	;# 
   779                           
   780                           ;main.c: 89: OSCCON = 0X70;
   781  0666  3070               	movlw	112
   782  0667  1683               	bsf	3,5	;RP0=1, select bank1
   783  0668  008F               	movwf	15	;volatile
   784                           
   785                           ;main.c: 91: PortInit();
   786  0669  2723               	fcall	_PortInit
   787                           
   788                           ;main.c: 92: Timer0Cofng();
   789  066A  27BA               	fcall	_Timer0Cofng
   790                           
   791                           ;main.c: 93: Timer2Config();
   792  066B  2786               	fcall	_Timer2Config
   793                           
   794                           ;main.c: 94: AdcConfig();
   795  066C  27CE               	fcall	_AdcConfig
   796                           
   797                           ;main.c: 95: PwmConfig();
   798  066D  27C1               	fcall	_PwmConfig
   799  066E  0064               	clrwdt	;# 
   800                           
   801                           ;main.c: 98: INTCON |= 0XC0;
   802  066F  30C0               	movlw	192
   803  0670  048B               	iorwf	11,f	;volatile
   804                           
   805                           ;main.c: 99: SWDTEN = 1;
   806  0671  1683               	bsf	3,5	;RP0=1, select bank1
   807  0672  1408               	bsf	8,0	;volatile
   808                           
   809                           ;main.c: 101: app_process_set_work_state(WORK_STATE_POWEROFF);
   810  0673  3000               	movlw	0
   811  0674  27D4               	fcall	_app_process_set_work_state
   812                           
   813                           ;main.c: 102: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
   814  0675  3000               	movlw	0
   815  0676  27D9               	fcall	_app_process_set_water_state
   816  0677                     l3782:	
   817                           ;main.c: 118: while (1)
   818                           
   819  0677  0064               	clrwdt	;# 
   820                           
   821                           ;main.c: 122: if (Flag_10ms)
   822  0678  1C7B               	btfss	_Flag_10ms/(0+8),_Flag_10ms& (0+7)	;volatile
   823  0679  2E77               	goto	l3782
   824                           
   825                           ;main.c: 123: {
   826                           ;main.c: 124: Flag_10ms = 0;
   827  067A  107B               	bcf	_Flag_10ms/(0+8),_Flag_10ms& (0+7)	;volatile
   828                           
   829                           ;main.c: 125: app_adc_process();
   830  067B  27E4               	fcall	_app_adc_process
   831                           
   832                           ;main.c: 126: app_process_charge();
   833  067C  27E3               	fcall	_app_process_charge
   834                           
   835                           ;main.c: 128: app_process_key();
   836  067D  27C8               	fcall	_app_process_key
   837                           
   838                           ;main.c: 129: app_process_work();
   839  067E  276F               	fcall	_app_process_work
   840                           
   841                           ;main.c: 130: app_water_process_work();
   842  067F  2744               	fcall	_app_water_process_work
   843                           
   844                           ;main.c: 132: app_process_go_to_sleep();
   845  0680  2712               	fcall	_app_process_go_to_sleep
   846                           
   847                           ;main.c: 133: process_led_remind_low_power();
   848  0681  21C3               	fcall	_process_led_remind_low_power
   849  0682  2E77               	goto	l3782
   850  0683                     __end_of_main:	
   851                           
   852                           	psect	text1
   853  01C3                     __ptext1:	
   854 ;; *************** function _process_led_remind_low_power *****************
   855 ;; Defined at:
   856 ;;		line 194 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_led.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;		None
   859 ;; Auto vars:     Size  Location     Type
   860 ;;		None
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, status,2, status,0, pclath, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMMON   BANK0   BANK1
   870 ;;      Params:         0       0       0
   871 ;;      Locals:         0       0       0
   872 ;;      Temps:          0       0       0
   873 ;;      Totals:         0       0       0
   874 ;;Total ram usage:        0 bytes
   875 ;; Hardware stack levels used:    1
   876 ;; Hardware stack levels required when called:    4
   877 ;; This function calls:
   878 ;;		_app_process_set_water_state
   879 ;;		_app_process_set_work_state
   880 ;;		_set_led_dirct_state
   881 ;;		_set_led_state
   882 ;; This function is called by:
   883 ;;		_main
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           
   888                           ;psect for function _process_led_remind_low_power
   889  01C3                     _process_led_remind_low_power:	
   890                           
   891                           ;app_led.c: 196: if (app_charge.LowPower)
   892                           
   893                           ;incstack = 0
   894                           ; Regs used in _process_led_remind_low_power: [wreg+status,2+status,0+pclath+cstack]
   895  01C3  1683               	bsf	3,5	;RP0=1, select bank1
   896  01C4  0826               	movf	(_app_charge^(0+128)+6),w
   897  01C5  1903               	btfsc	3,2
   898  01C6  29ED               	goto	l2209
   899                           
   900                           ;app_led.c: 197: {
   901                           ;app_led.c: 198: if (app_charge.LowLed)
   902  01C7  0827               	movf	(_app_charge^(0+128)+7),w
   903  01C8  1903               	btfsc	3,2
   904  01C9  0008               	return
   905  01CA  3002               	movlw	2
   906                           
   907                           ;app_led.c: 199: {
   908                           ;app_led.c: 200: app_charge.LowLed_cnt++;
   909  01CB  0AA8               	incf	(_app_charge^(0+128)+8),f
   910                           
   911                           ;app_led.c: 201: if (app_charge.LowLed_cnt <= 1)
   912  01CC  0228               	subwf	(_app_charge^(0+128)+8),w
   913  01CD  1803               	skipnc
   914  01CE  29DA               	goto	l6967
   915                           
   916                           ;app_led.c: 202: {
   917                           ;app_led.c: 203: app_process_set_work_state(WORK_STATE_POWEROFF);
   918  01CF  3000               	movlw	0
   919  01D0  27D4               	fcall	_app_process_set_work_state
   920                           
   921                           ;app_led.c: 204: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
   922  01D1  3000               	movlw	0
   923  01D2  27D9               	fcall	_app_process_set_water_state
   924                           
   925                           ;app_led.c: 205: app_charge.low_led_blink_cnt = 5;
   926  01D3  3005               	movlw	5
   927  01D4  1683               	bsf	3,5	;RP0=1, select bank1
   928  01D5  00B1               	movwf	(_app_charge^(0+128)+17)
   929                           
   930                           ;app_led.c: 206: set_led_dirct_state(LED_INDEX_NULL);
   931  01D6  1283               	bcf	3,5	;RP0=0, select bank0
   932  01D7  01D3               	clrf	set_led_dirct_state@index
   933  01D8  01D4               	clrf	set_led_dirct_state@index+1
   934  01D9  2FB3               	ljmp	l6735
   935  01DA                     l6967:	
   936                           ;app_led.c: 207: }
   937                           
   938                           
   939                           ;app_led.c: 208: else if (app_charge.LowLed_cnt < 25)
   940  01DA  3019               	movlw	25
   941  01DB  0228               	subwf	(_app_charge^(0+128)+8),w
   942  01DC  1803               	skipnc
   943  01DD  29E1               	goto	l6971
   944  01DE                     l6969:	
   945                           
   946                           ;app_led.c: 209: {
   947                           ;app_led.c: 210: set_led_state(LED_INDEX_10, LED_STATE_ON);
   948  01DE  222C               	fcall	PL6	;call to abstracted procedure
   949  01DF  0AD5               	incf	set_led_state@state,f
   950  01E0  2DE4               	ljmp	l6217
   951  01E1                     l6971:	
   952                           ;app_led.c: 211: }
   953                           
   954                           
   955                           ;app_led.c: 212: else if (app_charge.LowLed_cnt < 50)
   956  01E1  3032               	movlw	50
   957  01E2  0228               	subwf	(_app_charge^(0+128)+8),w
   958  01E3  1803               	skipnc
   959  01E4  29E7               	goto	l6975
   960  01E5                     l6973:	
   961                           
   962                           ;app_led.c: 213: {
   963                           ;app_led.c: 214: set_led_state(LED_INDEX_10, LED_STATE_OFF);
   964  01E5  222C               	fcall	PL6	;call to abstracted procedure
   965  01E6  2DE4               	ljmp	l6217
   966  01E7                     l6975:	
   967                           ;app_led.c: 215: }
   968                           
   969                           
   970                           ;app_led.c: 216: else
   971                           ;app_led.c: 217: {
   972                           ;app_led.c: 218: app_charge.low_led_blink_cnt--;
   973  01E7  03B1               	decf	(_app_charge^(0+128)+17),f
   974                           
   975                           ;app_led.c: 219: if (!app_charge.low_led_blink_cnt)
   976  01E8  1903               	btfsc	3,2
   977                           
   978                           ;app_led.c: 220: {
   979                           ;app_led.c: 221: app_charge.LowLed = 0;
   980  01E9  01A7               	clrf	(_app_charge^(0+128)+7)
   981                           
   982                           ;app_led.c: 222: }
   983                           ;app_led.c: 223: app_charge.LowLed_cnt = 2;
   984  01EA  3002               	movlw	2
   985  01EB  00A8               	movwf	(_app_charge^(0+128)+8)
   986  01EC  0008               	return
   987  01ED                     l2209:	
   988                           
   989                           ;app_led.c: 227: else if (app_charge.Remind)
   990  01ED  1E20               	btfss	_app_charge^(0+128),4
   991  01EE  2A28               	goto	l7013
   992                           
   993                           ;app_led.c: 228: {
   994                           ;app_led.c: 229: if (app_work_state == WORK_STATE_WORKING || water_work_state == WATER_W
      +                          ORK_STATE_WORKING || app_charge.flag_remind_delay_10s)
   995  01EF  1283               	bcf	3,5	;RP0=0, select bank0
   996  01F0  036D               	decf	_app_work_state,w	;volatile
   997  01F1  1903               	btfsc	3,2
   998  01F2  29FA               	goto	l6989
   999  01F3  036C               	decf	_water_work_state,w	;volatile
  1000  01F4  1903               	btfsc	3,2
  1001  01F5  29FA               	goto	l6989
  1002  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  1003  01F7  0822               	movf	(_app_charge^(0+128)+2),w
  1004  01F8  1903               	btfsc	3,2
  1005  01F9  0008               	return
  1006  01FA                     l6989:	
  1007                           
  1008                           ;app_led.c: 230: {
  1009                           ;app_led.c: 231: CntLedFlash++;
  1010  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1011  01FB  0AAE               	incf	_CntLedFlash,f
  1012  01FC  1903               	skipnz
  1013  01FD  0AAF               	incf	_CntLedFlash+1,f
  1014                           
  1015                           ;app_led.c: 232: if (CntLedFlash <= ((500) / 10))
  1016  01FE  3000               	movlw	0
  1017  01FF  022F               	subwf	_CntLedFlash+1,w
  1018  0200  3033               	movlw	51
  1019  0201  1903               	skipnz
  1020  0202  022E               	subwf	_CntLedFlash,w
  1021  0203  1C03               	btfss	3,0
  1022  0204  29DE               	goto	l6969
  1023                           
  1024                           ;app_led.c: 236: else if (CntLedFlash <= ((1000) / 10))
  1025  0205  3000               	movlw	0
  1026  0206  022F               	subwf	_CntLedFlash+1,w
  1027  0207  3065               	movlw	101
  1028  0208  1903               	skipnz
  1029  0209  022E               	subwf	_CntLedFlash,w
  1030  020A  1C03               	btfss	3,0
  1031  020B  29E5               	goto	l6973
  1032                           
  1033                           ;app_led.c: 240: else
  1034                           ;app_led.c: 241: {
  1035                           ;app_led.c: 242: CntLedFlash = 0;
  1036  020C  01AE               	clrf	_CntLedFlash
  1037  020D  01AF               	clrf	_CntLedFlash+1
  1038                           
  1039                           ;app_led.c: 243: if (app_charge.flag_remind_delay_10s)
  1040  020E  1683               	bsf	3,5	;RP0=1, select bank1
  1041  020F  0822               	movf	(_app_charge^(0+128)+2),w
  1042  0210  1903               	btfsc	3,2
  1043  0211  0008               	return
  1044                           
  1045                           ;app_led.c: 244: {
  1046                           ;app_led.c: 246: if (++app_charge.remind_delay_10s_timer >= 10)
  1047  0212  0AA3               	incf	(_app_charge^(0+128)+3),f
  1048  0213  1903               	skipnz
  1049  0214  0AA4               	incf	((_app_charge+1)^(0+128)+3),f
  1050  0215  3000               	movlw	0
  1051  0216  0224               	subwf	((_app_charge+1)^(0+128)+3),w
  1052  0217  300A               	movlw	10
  1053  0218  1903               	skipnz
  1054  0219  0223               	subwf	(_app_charge^(0+128)+3),w
  1055  021A  1C03               	skipc
  1056  021B  0008               	return
  1057  021C  3002               	movlw	2
  1058                           
  1059                           ;app_led.c: 247: {
  1060                           ;app_led.c: 248: app_charge.flag_remind_delay_10s = 0;
  1061  021D  01A2               	clrf	(_app_charge^(0+128)+2)
  1062                           
  1063                           ;app_led.c: 250: set_led_state(LED_INDEX_10, LED_STATE_OFF);
  1064  021E  2134               	fcall	PL12	;call to abstracted procedure
  1065  021F  25E4               	fcall	_set_led_state
  1066                           
  1067                           ;app_led.c: 251: if (water_work_state != WATER_WORK_STATE_MODE_LED)
  1068  0220  3003               	movlw	3
  1069  0221  066C               	xorwf	_water_work_state,w	;volatile
  1070  0222  1903               	btfsc	3,2
  1071  0223  0008               	return
  1072                           
  1073                           ;app_led.c: 252: {
  1074                           ;app_led.c: 253: app_process_set_work_state(WORK_STATE_POWEROFF);
  1075  0224  3000               	movlw	0
  1076  0225  27D4               	fcall	_app_process_set_work_state
  1077                           
  1078                           ;app_led.c: 254: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
  1079  0226  3000               	movlw	0
  1080  0227  2FD9               	ljmp	_app_process_set_water_state
  1081  0228                     l7013:	
  1082                           
  1083                           ;app_led.c: 263: else
  1084                           ;app_led.c: 264: {
  1085                           ;app_led.c: 265: CntLedFlash = 0;
  1086  0228  1283               	bcf	3,5	;RP0=0, select bank0
  1087  0229  01AE               	clrf	_CntLedFlash
  1088  022A  01AF               	clrf	_CntLedFlash+1
  1089  022B  0008               	return
  1090  022C                     __end_of_process_led_remind_low_power:	
  1091  022C                     PL6:	
  1092  022C  3002               	movlw	2
  1093  022D  1283               	bcf	3,5	;RP0=0, select bank0
  1094  022E  01D3               	clrf	set_led_state@index
  1095  022F  00D4               	movwf	set_led_state@index+1
  1096  0230  01D5               	clrf	set_led_state@state
  1097  0231  0008               	return
  1098  0232                     __end_ofPL6:	
  1099                           
  1100                           	psect	text2
  1101  07B3                     __ptext2:	
  1102 ;; *************** function _set_led_dirct_state *****************
  1103 ;; Defined at:
  1104 ;;		line 281 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_led.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;  index           2    0[BANK0 ] enum E591
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;		None
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      void 
  1111 ;; Registers used:
  1112 ;;		wreg
  1113 ;; Tracked objects:
  1114 ;;		On entry : 100/0
  1115 ;;		On exit  : 100/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMMON   BANK0   BANK1
  1118 ;;      Params:         0       2       0
  1119 ;;      Locals:         0       0       0
  1120 ;;      Temps:          0       0       0
  1121 ;;      Totals:         0       2       0
  1122 ;;Total ram usage:        2 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; Hardware stack levels required when called:    3
  1125 ;; This function calls:
  1126 ;;		Nothing
  1127 ;; This function is called by:
  1128 ;;		_process_led_remind_low_power
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           
  1133                           ;psect for function _set_led_dirct_state
  1134  07B3                     _set_led_dirct_state:	
  1135  07B3                     l6735:	
  1136                           ;incstack = 0
  1137                           ; Regs used in _set_led_dirct_state: [wreg]
  1138                           
  1139                           
  1140                           ;app_led.c: 283: led_index = index;
  1141  07B3  0853               	movf	set_led_dirct_state@index,w
  1142  07B4  00A0               	movwf	_led_index
  1143  07B5  0854               	movf	set_led_dirct_state@index+1,w
  1144  07B6  00A1               	movwf	_led_index+1
  1145  07B7  01A2               	clrf	_led_index+2
  1146  07B8  01A3               	clrf	_led_index+3
  1147  07B9  0008               	return
  1148  07BA                     __end_of_set_led_dirct_state:	
  1149                           
  1150                           	psect	text3
  1151  0744                     __ptext3:	
  1152 ;; *************** function _app_water_process_work *****************
  1153 ;; Defined at:
  1154 ;;		line 169 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_water_process
      +.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 100/0
  1165 ;;		On exit  : 100/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMMON   BANK0   BANK1
  1168 ;;      Params:         0       0       0
  1169 ;;      Locals:         0       0       0
  1170 ;;      Temps:          0       0       0
  1171 ;;      Totals:         0       0       0
  1172 ;;Total ram usage:        0 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    6
  1175 ;; This function calls:
  1176 ;;		_app_process_water_mdoe_led
  1177 ;;		_app_process_water_working
  1178 ;;		_app_process_water_workoff
  1179 ;; This function is called by:
  1180 ;;		_main
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           
  1185                           ;psect for function _app_water_process_work
  1186  0744                     _app_water_process_work:	
  1187                           
  1188                           ;app_water_process.c: 181: break;
  1189                           
  1190                           ;app_water_process.c: 171: switch (water_work_state)
  1191                           
  1192                           ;incstack = 0
  1193                           ; Regs used in _app_water_process_work: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1194  0744  086C               	movf	_water_work_state,w	;volatile
  1195                           
  1196                           ; Switch size 1, requested type "space"
  1197                           ; Number of cases is 3, Range of values is 0 to 3
  1198                           ; switch strategies available:
  1199                           ; Name         Instructions Cycles
  1200                           ; direct_byte           10     6 (fixed)
  1201                           ; simple_byte           10     6 (average)
  1202                           ; jumptable            260     6 (fixed)
  1203                           ;	Chosen strategy is direct_byte
  1204  0745  0084               	movwf	4
  1205  0746  3004               	movlw	4
  1206  0747  0204               	subwf	4,w
  1207  0748  1803               	skipnc
  1208  0749  0008               	return
  1209  074A  3007               	movlw	high S7269
  1210  074B  008A               	movwf	10
  1211  074C  30DE               	movlw	low S7269
  1212  074D  0704               	addwf	4,w
  1213  074E  0082               	movwf	2
  1214  074F                     l4851:	
  1215  074F  0008               	return
  1216  0750                     l7109:	
  1217                           
  1218                           ;app_water_process.c: 174: app_process_water_working();
  1219  0750  2E3B               	ljmp	l6837
  1220  0751                     l7111:	
  1221                           ;app_water_process.c: 175: break;
  1222                           
  1223                           
  1224                           ;app_water_process.c: 177: app_process_water_workoff();
  1225  0751  2F91               	ljmp	l6381
  1226  0752                     l7113:	
  1227                           ;app_water_process.c: 178: break;
  1228                           
  1229                           
  1230                           ;app_water_process.c: 180: app_process_water_mdoe_led();
  1231  0752  2EA2               	ljmp	l6869
  1232  0753                     __end_of_app_water_process_work:	
  1233                           
  1234                           	psect	swtext1
  1235  07DE                     __pswtext1:	
  1236  07DE                     S7269:	
  1237  07DE  2F51               	ljmp	l7111
  1238  07DF  2F50               	ljmp	l7109
  1239  07E0  2F4F               	ljmp	l4851
  1240  07E1  2F52               	ljmp	l7113
  1241                           
  1242                           	psect	text4
  1243  07E2                     __ptext4:	
  1244 ;; *************** function _app_process_water_workoff *****************
  1245 ;; Defined at:
  1246 ;;		line 141 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_water_process
      +.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;		None
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;		None
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  1    wreg      void 
  1253 ;; Registers used:
  1254 ;;		wreg, status,2, status,0, pclath, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 100/0
  1257 ;;		On exit  : 100/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMMON   BANK0   BANK1
  1260 ;;      Params:         0       0       0
  1261 ;;      Locals:         0       0       0
  1262 ;;      Temps:          0       0       0
  1263 ;;      Totals:         0       0       0
  1264 ;;Total ram usage:        0 bytes
  1265 ;; Hardware stack levels used:    1
  1266 ;; Hardware stack levels required when called:    5
  1267 ;; This function calls:
  1268 ;;		_water_turn_off
  1269 ;; This function is called by:
  1270 ;;		_app_water_process_work
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           
  1275                           ;psect for function _app_process_water_workoff
  1276  07E2                     _app_process_water_workoff:	
  1277                           
  1278                           ;app_water_process.c: 143: water_turn_off();
  1279                           
  1280                           ;incstack = 0
  1281                           ; Regs used in _app_process_water_workoff: [wreg+status,2+status,0+pclath+cstack]
  1282  07E2  2F91               	ljmp	l6381
  1283  07E3                     __end_of_app_process_water_workoff:	
  1284                           
  1285                           	psect	text5
  1286  0791                     __ptext5:	
  1287 ;; *************** function _water_turn_off *****************
  1288 ;; Defined at:
  1289 ;;		line 131 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_water_process
      +.c"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;		None
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;		None
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      void 
  1296 ;; Registers used:
  1297 ;;		wreg, status,2, status,0, pclath, cstack
  1298 ;; Tracked objects:
  1299 ;;		On entry : 100/0
  1300 ;;		On exit  : 100/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMMON   BANK0   BANK1
  1303 ;;      Params:         0       0       0
  1304 ;;      Locals:         0       0       0
  1305 ;;      Temps:          0       0       0
  1306 ;;      Totals:         0       0       0
  1307 ;;Total ram usage:        0 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; Hardware stack levels required when called:    4
  1310 ;; This function calls:
  1311 ;;		_set_led_state
  1312 ;; This function is called by:
  1313 ;;		_app_process_water_workoff
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           
  1318                           ;psect for function _water_turn_off
  1319  0791                     _water_turn_off:	
  1320  0791                     l6381:	
  1321                           ;incstack = 0
  1322                           ; Regs used in _water_turn_off: [wreg+status,2+status,0+pclath+cstack]
  1323                           
  1324  0791  30F8               	movlw	248
  1325                           
  1326                           ;app_water_process.c: 133: water_work_mode.water_mode_count = 0;
  1327  0792  01E3               	clrf	_water_work_mode+2
  1328  0793  01E4               	clrf	_water_work_mode+3
  1329                           
  1330                           ;app_water_process.c: 134: water_work_mode.times = 0;
  1331  0794  01E5               	clrf	_water_work_mode+4
  1332                           
  1333                           ;app_water_process.c: 136: water_work_mode.water_mode_out_put = WATER_WORK_MODE_IDEL;
  1334  0795  01E2               	clrf	_water_work_mode+1
  1335                           
  1336                           ;app_water_process.c: 138: set_led_state(LED_INDEX_8 | LED_INDEX_7 | LED_INDEX_6 | LED_I
      +                          NDEX_5 | LED_INDEX_4, LED_STATE_OFF);
  1337  0796  00D3               	movwf	set_led_state@index
  1338  0797  01D4               	clrf	set_led_state@index+1
  1339  0798  01D5               	clrf	set_led_state@state
  1340  0799  2DE4               	ljmp	l6217
  1341  079A                     __end_of_water_turn_off:	
  1342                           
  1343                           	psect	text6
  1344  063B                     __ptext6:	
  1345 ;; *************** function _app_process_water_working *****************
  1346 ;; Defined at:
  1347 ;;		line 95 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_water_process.
      +c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;		None
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0, pclath, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 100/0
  1358 ;;		On exit  : 100/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMMON   BANK0   BANK1
  1361 ;;      Params:         0       0       0
  1362 ;;      Locals:         0       0       0
  1363 ;;      Temps:          0       0       0
  1364 ;;      Totals:         0       0       0
  1365 ;;Total ram usage:        0 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    4
  1368 ;; This function calls:
  1369 ;;		_app_process_set_water_state
  1370 ;; This function is called by:
  1371 ;;		_app_water_process_work
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           
  1376                           ;psect for function _app_process_water_working
  1377  063B                     _app_process_water_working:	
  1378  063B                     l6837:	
  1379                           ;incstack = 0
  1380                           ; Regs used in _app_process_water_working: [wreg+status,2+status,0+pclath+cstack]
  1381                           
  1382                           
  1383                           ;app_water_process.c: 97: if (!water_work_step)
  1384  063B  083E               	movf	_water_work_step,w
  1385  063C  1D03               	btfss	3,2
  1386  063D  2E40               	goto	l6841
  1387                           
  1388                           ;app_water_process.c: 98: {
  1389                           ;app_water_process.c: 99: water_work_step++;
  1390  063E  0ABE               	incf	_water_work_step,f
  1391                           
  1392                           ;app_water_process.c: 100: }
  1393  063F  0008               	return
  1394  0640                     l6841:	
  1395                           
  1396                           ;app_water_process.c: 101: else
  1397                           ;app_water_process.c: 102: {
  1398                           ;app_water_process.c: 103: water_work_mode.water_mode_count++;
  1399  0640  0AE3               	incf	_water_work_mode+2,f
  1400  0641  1903               	skipnz
  1401  0642  0AE4               	incf	_water_work_mode+3,f
  1402                           
  1403                           ;app_water_process.c: 104: if (water_work_mode.water_mode_count == (100UL * (30)))
  1404  0643  30B8               	movlw	184
  1405  0644  0663               	xorwf	_water_work_mode+2,w
  1406  0645  300B               	movlw	11
  1407  0646  1903               	skipnz
  1408  0647  0664               	xorwf	_water_work_mode+3,w
  1409  0648  1D03               	btfss	3,2
  1410  0649  2E4C               	goto	l6847
  1411                           
  1412                           ;app_water_process.c: 105: {
  1413                           ;app_water_process.c: 106: water_work_mode.water_mode_out_put = WORK_MODE_IDEL;
  1414  064A  01E2               	clrf	_water_work_mode+1
  1415                           
  1416                           ;app_water_process.c: 107: }
  1417  064B  0008               	return
  1418  064C                     l6847:	
  1419                           
  1420                           ;app_water_process.c: 108: else if (water_work_mode.water_mode_count >= (100UL * (30)) +
      +                           ((200) / 10))
  1421  064C  300B               	movlw	11
  1422  064D  0264               	subwf	_water_work_mode+3,w
  1423  064E  30CC               	movlw	204
  1424  064F  1903               	skipnz
  1425  0650  0263               	subwf	_water_work_mode+2,w
  1426  0651  1C03               	skipc
  1427  0652  0008               	return
  1428  0653  3004               	movlw	4
  1429                           
  1430                           ;app_water_process.c: 109: {
  1431                           ;app_water_process.c: 110: water_work_mode.water_mode_count = 0;
  1432  0654  01E3               	clrf	_water_work_mode+2
  1433  0655  01E4               	clrf	_water_work_mode+3
  1434                           
  1435                           ;app_water_process.c: 111: water_work_mode.times++;
  1436  0656  0AE5               	incf	_water_work_mode+4,f
  1437                           
  1438                           ;app_water_process.c: 112: if(water_work_mode.times >= 4)
  1439  0657  0265               	subwf	_water_work_mode+4,w
  1440  0658  1C03               	skipc
  1441  0659  2E61               	goto	l6865
  1442                           
  1443                           ;app_water_process.c: 113: {
  1444                           ;app_water_process.c: 114: water_work_mode.times = 0;
  1445  065A  01E5               	clrf	_water_work_mode+4
  1446                           
  1447                           ;app_water_process.c: 115: if (app_charge.Remind)
  1448  065B  1683               	bsf	3,5	;RP0=1, select bank1
  1449  065C  1E20               	btfss	_app_charge^(0+128),4
  1450  065D  2E5F               	goto	l6863
  1451                           
  1452                           ;app_water_process.c: 116: {
  1453                           ;app_water_process.c: 117: app_charge.flag_remind_delay_10s = 1;
  1454                           
  1455                           ;app_water_process.c: 118: app_charge.remind_delay_10s_timer = 0;
  1456  065E  2558               	fcall	PL10	;call to abstracted procedure
  1457  065F                     l6863:	
  1458                           
  1459                           ;app_water_process.c: 119: }
  1460                           ;app_water_process.c: 121: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
  1461  065F  3000               	movlw	0
  1462  0660  2FD9               	ljmp	_app_process_set_water_state
  1463  0661                     l6865:	
  1464                           ;app_water_process.c: 122: }
  1465                           
  1466                           
  1467                           ;app_water_process.c: 123: else
  1468                           ;app_water_process.c: 124: {
  1469                           ;app_water_process.c: 125: water_work_mode.water_mode_out_put = water_work_mode.water_mo
      +                          de;
  1470  0661  0861               	movf	_water_work_mode,w
  1471  0662  00E2               	movwf	_water_work_mode+1
  1472  0663  0008               	return
  1473  0664                     __end_of_app_process_water_working:	
  1474                           
  1475                           	psect	text7
  1476  06A2                     __ptext7:	
  1477 ;; *************** function _app_process_water_mdoe_led *****************
  1478 ;; Defined at:
  1479 ;;		line 147 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_water_process
      +.c"
  1480 ;; Parameters:    Size  Location     Type
  1481 ;;		None
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;		None
  1484 ;; Return value:  Size  Location     Type
  1485 ;;                  1    wreg      void 
  1486 ;; Registers used:
  1487 ;;		wreg, status,2, status,0, pclath, cstack
  1488 ;; Tracked objects:
  1489 ;;		On entry : 100/0
  1490 ;;		On exit  : 100/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMMON   BANK0   BANK1
  1493 ;;      Params:         0       0       0
  1494 ;;      Locals:         0       0       0
  1495 ;;      Temps:          0       0       0
  1496 ;;      Totals:         0       0       0
  1497 ;;Total ram usage:        0 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; Hardware stack levels required when called:    4
  1500 ;; This function calls:
  1501 ;;		_app_process_set_water_state
  1502 ;; This function is called by:
  1503 ;;		_app_water_process_work
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           
  1508                           ;psect for function _app_process_water_mdoe_led
  1509  06A2                     _app_process_water_mdoe_led:	
  1510  06A2                     l6869:	
  1511                           ;incstack = 0
  1512                           ; Regs used in _app_process_water_mdoe_led: [wreg+status,2+status,0+pclath+cstack]
  1513                           
  1514                           
  1515                           ;app_water_process.c: 149: if (!water_work_step)
  1516  06A2  083E               	movf	_water_work_step,w
  1517  06A3  1D03               	btfss	3,2
  1518  06A4  2EAB               	goto	l6875
  1519                           
  1520                           ;app_water_process.c: 150: {
  1521                           ;app_water_process.c: 151: water_mode_led_cnt = (100UL * (10));
  1522  06A5  30E8               	movlw	232
  1523  06A6  00A4               	movwf	_water_mode_led_cnt
  1524  06A7  3003               	movlw	3
  1525  06A8  00A5               	movwf	_water_mode_led_cnt+1
  1526                           
  1527                           ;app_water_process.c: 152: water_work_step++;
  1528  06A9  0ABE               	incf	_water_work_step,f
  1529                           
  1530                           ;app_water_process.c: 153: }
  1531  06AA  0008               	return
  1532  06AB                     l6875:	
  1533                           
  1534                           ;app_water_process.c: 154: else
  1535                           ;app_water_process.c: 155: {
  1536                           ;app_water_process.c: 156: water_work_mode.water_mode_count++;
  1537  06AB  0AE3               	incf	_water_work_mode+2,f
  1538  06AC  1903               	skipnz
  1539  06AD  0AE4               	incf	_water_work_mode+3,f
  1540                           
  1541                           ;app_water_process.c: 157: if (water_mode_led_cnt)
  1542  06AE  0824               	movf	_water_mode_led_cnt,w
  1543  06AF  0425               	iorwf	_water_mode_led_cnt+1,w
  1544  06B0  1903               	btfsc	3,2
  1545  06B1  0008               	return
  1546                           
  1547                           ;app_water_process.c: 158: {
  1548                           ;app_water_process.c: 159: water_mode_led_cnt--;
  1549  06B2  3001               	movlw	1
  1550  06B3  02A4               	subwf	_water_mode_led_cnt,f
  1551  06B4  3000               	movlw	0
  1552  06B5  1C03               	skipc
  1553  06B6  03A5               	decf	_water_mode_led_cnt+1,f
  1554  06B7  02A5               	subwf	_water_mode_led_cnt+1,f
  1555                           
  1556                           ;app_water_process.c: 160: if (!water_mode_led_cnt)
  1557  06B8  0824               	movf	_water_mode_led_cnt,w
  1558  06B9  0425               	iorwf	_water_mode_led_cnt+1,w
  1559  06BA  1D03               	btfss	3,2
  1560  06BB  0008               	return
  1561                           
  1562                           ;app_water_process.c: 161: {
  1563                           ;app_water_process.c: 163: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
  1564  06BC  3000               	movlw	0
  1565  06BD  2FD9               	ljmp	_app_process_set_water_state
  1566  06BE                     __end_of_app_process_water_mdoe_led:	
  1567                           
  1568                           	psect	text8
  1569  076F                     __ptext8:	
  1570 ;; *************** function _app_process_work *****************
  1571 ;; Defined at:
  1572 ;;		line 209 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_process.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;		None
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;		None
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  1    wreg      void 
  1579 ;; Registers used:
  1580 ;;		wreg, status,2, status,0, pclath, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 100/0
  1583 ;;		On exit  : 100/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMMON   BANK0   BANK1
  1586 ;;      Params:         0       0       0
  1587 ;;      Locals:         0       0       0
  1588 ;;      Temps:          0       0       0
  1589 ;;      Totals:         0       0       0
  1590 ;;Total ram usage:        0 bytes
  1591 ;; Hardware stack levels used:    1
  1592 ;; Hardware stack levels required when called:    6
  1593 ;; This function calls:
  1594 ;;		_app_process_charing
  1595 ;;		_app_process_power_off
  1596 ;;		_app_process_working
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           
  1603                           ;psect for function _app_process_work
  1604  076F                     _app_process_work:	
  1605                           
  1606                           ;app_process.c: 220: if (app_work_state == WORK_STATE_POWEROFF)
  1607                           
  1608                           ;incstack = 0
  1609                           ; Regs used in _app_process_work: [wreg+status,2+status,0+pclath+cstack]
  1610  076F  086D               	movf	_app_work_state,w	;volatile
  1611  0770  1D03               	btfss	3,2
  1612  0771  2F73               	goto	l7079
  1613                           
  1614                           ;app_process.c: 221: {
  1615                           ;app_process.c: 222: app_process_power_off();
  1616  0772  279A               	fcall	_app_process_power_off
  1617  0773                     l7079:	
  1618                           
  1619                           ;app_process.c: 223: }
  1620                           ;app_process.c: 224: if (app_work_state == WORK_STATE_WORKING)
  1621  0773  0B6D               	decfsz	_app_work_state,w	;volatile
  1622  0774  2F76               	goto	l7083
  1623                           
  1624                           ;app_process.c: 225: {
  1625                           ;app_process.c: 226: app_process_working();
  1626  0775  252D               	fcall	_app_process_working
  1627  0776                     l7083:	
  1628                           
  1629                           ;app_process.c: 227: }
  1630                           ;app_process.c: 228: if (app_work_state == WORK_STATE_CHARGING)
  1631  0776  3002               	movlw	2
  1632  0777  066D               	xorwf	_app_work_state,w	;volatile
  1633  0778  1D03               	btfss	3,2
  1634  0779  0008               	return
  1635                           
  1636                           ;app_process.c: 229: {
  1637                           ;app_process.c: 230: app_process_charing();
  1638  077A  2F53               	ljmp	l6829
  1639  077B                     __end_of_app_process_work:	
  1640                           
  1641                           	psect	text9
  1642  052D                     __ptext9:	
  1643 ;; *************** function _app_process_working *****************
  1644 ;; Defined at:
  1645 ;;		line 41 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_process.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;		None
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;		None
  1650 ;; Return value:  Size  Location     Type
  1651 ;;                  1    wreg      void 
  1652 ;; Registers used:
  1653 ;;		wreg, status,2, status,0, pclath, cstack
  1654 ;; Tracked objects:
  1655 ;;		On entry : 100/0
  1656 ;;		On exit  : 100/0
  1657 ;;		Unchanged: 0/0
  1658 ;; Data sizes:     COMMON   BANK0   BANK1
  1659 ;;      Params:         0       0       0
  1660 ;;      Locals:         0       0       0
  1661 ;;      Temps:          0       0       0
  1662 ;;      Totals:         0       0       0
  1663 ;;Total ram usage:        0 bytes
  1664 ;; Hardware stack levels used:    1
  1665 ;; Hardware stack levels required when called:    4
  1666 ;; This function calls:
  1667 ;;		_app_process_set_work_state
  1668 ;;		_work_chang_timing
  1669 ;; This function is called by:
  1670 ;;		_app_process_work
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           
  1675                           ;psect for function _app_process_working
  1676  052D                     _app_process_working:	
  1677                           
  1678                           ;app_process.c: 43: if (!work_step)
  1679                           
  1680                           ;incstack = 0
  1681                           ; Regs used in _app_process_working: [wreg+status,2+status,0+pclath+cstack]
  1682  052D  0844               	movf	_work_step,w
  1683  052E  1D03               	btfss	3,2
  1684  052F  2D32               	goto	l6741
  1685                           
  1686                           ;app_process.c: 44: {
  1687                           ;app_process.c: 46: work_step++;
  1688  0530  0AC4               	incf	_work_step,f
  1689                           
  1690                           ;app_process.c: 47: }
  1691  0531  0008               	return
  1692  0532                     l6741:	
  1693                           
  1694                           ;app_process.c: 48: else
  1695                           ;app_process.c: 49: {
  1696                           ;app_process.c: 50: work_chang_timing();
  1697  0532  26D8               	fcall	_work_chang_timing
  1698                           
  1699                           ;app_process.c: 51: work_mode.work_mode_count++;
  1700  0533  1283               	bcf	3,5	;RP0=0, select bank0
  1701  0534  0AE8               	incf	_work_mode+2,f
  1702  0535  1903               	skipnz
  1703  0536  0AE9               	incf	_work_mode+3,f
  1704                           
  1705                           ;app_process.c: 52: if (work_mode.work_mode_count == (100UL * (30)))
  1706  0537  30B8               	movlw	184
  1707  0538  0668               	xorwf	_work_mode+2,w
  1708  0539  300B               	movlw	11
  1709  053A  1903               	skipnz
  1710  053B  0669               	xorwf	_work_mode+3,w
  1711  053C  1D03               	btfss	3,2
  1712  053D  2D40               	goto	l6749
  1713                           
  1714                           ;app_process.c: 53: {
  1715                           ;app_process.c: 54: work_mode.mode_out_put = WORK_MODE_IDEL;
  1716  053E  01E7               	clrf	_work_mode+1
  1717                           
  1718                           ;app_process.c: 55: }
  1719  053F  0008               	return
  1720  0540                     l6749:	
  1721                           
  1722                           ;app_process.c: 56: else if (work_mode.work_mode_count >= (100UL * (30)) + ((200) / 10))
  1723  0540  300B               	movlw	11
  1724  0541  0269               	subwf	_work_mode+3,w
  1725  0542  30CC               	movlw	204
  1726  0543  1903               	skipnz
  1727  0544  0268               	subwf	_work_mode+2,w
  1728  0545  1C03               	skipc
  1729  0546  0008               	return
  1730  0547  3004               	movlw	4
  1731                           
  1732                           ;app_process.c: 57: {
  1733                           ;app_process.c: 58: work_mode.work_mode_count = 0;
  1734  0548  01E8               	clrf	_work_mode+2
  1735  0549  01E9               	clrf	_work_mode+3
  1736                           
  1737                           ;app_process.c: 59: work_mode.times++;
  1738  054A  0AEA               	incf	_work_mode+4,f
  1739                           
  1740                           ;app_process.c: 60: if(work_mode.times >= 4)
  1741  054B  026A               	subwf	_work_mode+4,w
  1742  054C  1C03               	skipc
  1743  054D  2D55               	goto	l6767
  1744                           
  1745                           ;app_process.c: 61: {
  1746                           ;app_process.c: 62: work_mode.times = 0;
  1747  054E  01EA               	clrf	_work_mode+4
  1748                           
  1749                           ;app_process.c: 63: if (app_charge.Remind)
  1750  054F  1683               	bsf	3,5	;RP0=1, select bank1
  1751  0550  1E20               	btfss	_app_charge^(0+128),4
  1752  0551  2D53               	goto	l6765
  1753                           
  1754                           ;app_process.c: 64: {
  1755                           ;app_process.c: 65: app_charge.flag_remind_delay_10s = 1;
  1756                           
  1757                           ;app_process.c: 66: app_charge.remind_delay_10s_timer = 0;
  1758  0552  2558               	fcall	PL10	;call to abstracted procedure
  1759  0553                     l6765:	
  1760                           
  1761                           ;app_process.c: 67: }
  1762                           ;app_process.c: 68: app_process_set_work_state(WORK_STATE_POWEROFF);
  1763  0553  3000               	movlw	0
  1764  0554  2FD4               	ljmp	_app_process_set_work_state
  1765  0555                     l6767:	
  1766                           ;app_process.c: 69: }
  1767                           
  1768                           
  1769                           ;app_process.c: 70: else
  1770                           ;app_process.c: 71: {
  1771                           ;app_process.c: 72: work_mode.mode_out_put = work_mode.mode;
  1772  0555  0866               	movf	_work_mode,w
  1773  0556  00E7               	movwf	_work_mode+1
  1774  0557  0008               	return
  1775  0558                     __end_of_app_process_working:	
  1776  0558                     PL10:	
  1777  0558  01A2               	clrf	(_app_charge^(0+128)+2)
  1778  0559  0AA2               	incf	(_app_charge^(0+128)+2),f
  1779  055A  01A3               	clrf	(_app_charge^(0+128)+3)
  1780  055B  01A4               	clrf	((_app_charge+1)^(0+128)+3)
  1781  055C  0008               	return
  1782  055D                     __end_ofPL10:	
  1783                           
  1784                           	psect	text10
  1785  06D8                     __ptext10:	
  1786 ;; *************** function _work_chang_timing *****************
  1787 ;; Defined at:
  1788 ;;		line 3 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_timer.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		wreg, status,2, status,0
  1797 ;; Tracked objects:
  1798 ;;		On entry : 100/0
  1799 ;;		On exit  : 100/100
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMMON   BANK0   BANK1
  1802 ;;      Params:         0       0       0
  1803 ;;      Locals:         0       0       0
  1804 ;;      Temps:          0       0       0
  1805 ;;      Totals:         0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    3
  1809 ;; This function calls:
  1810 ;;		Nothing
  1811 ;; This function is called by:
  1812 ;;		_app_process_working
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           
  1817                           ;psect for function _work_chang_timing
  1818  06D8                     _work_chang_timing:	
  1819                           
  1820                           ;app_timer.c: 5: if (app_timer.work_updown_count)
  1821                           
  1822                           ;incstack = 0
  1823                           ; Regs used in _work_chang_timing: [wreg+status,2+status,0]
  1824  06D8  1683               	bsf	3,5	;RP0=1, select bank1
  1825  06D9  0837               	movf	((_app_timer+3)^(0+128)+2),w
  1826  06DA  0436               	iorwf	((_app_timer+2)^(0+128)+2),w
  1827  06DB  0435               	iorwf	((_app_timer+1)^(0+128)+2),w
  1828  06DC  0434               	iorwf	(_app_timer^(0+128)+2),w
  1829  06DD  1903               	skipnz
  1830  06DE  0008               	return
  1831                           
  1832                           ;app_timer.c: 6: {
  1833                           ;app_timer.c: 7: app_timer.work_updown_count--;
  1834  06DF  3001               	movlw	1
  1835  06E0  02B4               	subwf	(_app_timer^(0+128)+2),f
  1836  06E1  3000               	movlw	0
  1837  06E2  1C03               	skipc
  1838  06E3  3001               	movlw	1
  1839  06E4  02B5               	subwf	((_app_timer+1)^(0+128)+2),f
  1840  06E5  3000               	movlw	0
  1841  06E6  1C03               	skipc
  1842  06E7  3001               	movlw	1
  1843  06E8  02B6               	subwf	((_app_timer+2)^(0+128)+2),f
  1844  06E9  3000               	movlw	0
  1845  06EA  1C03               	skipc
  1846  06EB  3001               	movlw	1
  1847  06EC  02B7               	subwf	((_app_timer+3)^(0+128)+2),f
  1848  06ED  0008               	return
  1849  06EE                     __end_of_work_chang_timing:	
  1850                           
  1851                           	psect	text11
  1852  0753                     __ptext11:	
  1853 ;; *************** function _app_process_charing *****************
  1854 ;; Defined at:
  1855 ;;		line 99 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_process.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;		None
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0, pclath, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 100/0
  1866 ;;		On exit  : 100/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMMON   BANK0   BANK1
  1869 ;;      Params:         0       0       0
  1870 ;;      Locals:         0       0       0
  1871 ;;      Temps:          0       0       0
  1872 ;;      Totals:         0       0       0
  1873 ;;Total ram usage:        0 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    5
  1876 ;; This function calls:
  1877 ;;		_app_process_power_off
  1878 ;;		_app_process_set_water_state
  1879 ;; This function is called by:
  1880 ;;		_app_process_work
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           
  1885                           ;psect for function _app_process_charing
  1886  0753                     _app_process_charing:	
  1887  0753                     l6829:	
  1888                           ;incstack = 0
  1889                           ; Regs used in _app_process_charing: [wreg+status,2+status,0+pclath+cstack]
  1890                           
  1891                           
  1892                           ;app_process.c: 101: if (!work_step)
  1893  0753  0844               	movf	_work_step,w
  1894  0754  1D03               	btfss	3,2
  1895  0755  0008               	return
  1896                           
  1897                           ;app_process.c: 102: {
  1898                           ;app_process.c: 103: app_process_power_off();
  1899  0756  279A               	fcall	_app_process_power_off
  1900                           
  1901                           ;app_process.c: 104: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
  1902  0757  3000               	movlw	0
  1903  0758  27D9               	fcall	_app_process_set_water_state
  1904                           
  1905                           ;app_process.c: 105: app_timer.charge_to_oldmode_count = (100UL * (8));
  1906  0759  3020               	movlw	32
  1907  075A  1683               	bsf	3,5	;RP0=1, select bank1
  1908  075B  00BA               	movwf	(_app_timer^(0+128)+8)
  1909  075C  3003               	movlw	3
  1910  075D  00BB               	movwf	(_app_timer^(0+128)+9)
  1911                           
  1912                           ;app_process.c: 106: work_step++;
  1913  075E  1283               	bcf	3,5	;RP0=0, select bank0
  1914  075F  0AC4               	incf	_work_step,f
  1915                           
  1916                           ;app_process.c: 107: }
  1917  0760  0008               	return
  1918  0761                     __end_of_app_process_charing:	
  1919                           
  1920                           	psect	text12
  1921  079A                     __ptext12:	
  1922 ;; *************** function _app_process_power_off *****************
  1923 ;; Defined at:
  1924 ;;		line 78 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_process.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;		None
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;		None
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      void 
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0, pclath, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 100/0
  1935 ;;		On exit  : 100/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMMON   BANK0   BANK1
  1938 ;;      Params:         0       0       0
  1939 ;;      Locals:         0       0       0
  1940 ;;      Temps:          0       0       0
  1941 ;;      Totals:         0       0       0
  1942 ;;Total ram usage:        0 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:    4
  1945 ;; This function calls:
  1946 ;;		_set_led_state
  1947 ;; This function is called by:
  1948 ;;		_app_process_charing
  1949 ;;		_app_process_work
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           
  1954                           ;psect for function _app_process_power_off
  1955  079A                     _app_process_power_off:	
  1956  079A  3007               	movlw	7
  1957                           
  1958                           ;app_process.c: 80: work_mode.work_mode_count = 0;
  1959                           
  1960                           ;incstack = 0
  1961                           ; Regs used in _app_process_power_off: [wreg+status,2+status,0+pclath+cstack]
  1962  079B  01E8               	clrf	_work_mode+2
  1963  079C  01E9               	clrf	_work_mode+3
  1964                           
  1965                           ;app_process.c: 81: work_mode.times = 0;
  1966  079D  01EA               	clrf	_work_mode+4
  1967                           
  1968                           ;app_process.c: 82: work_mode.mode_out_put = WORK_MODE_IDEL;
  1969  079E  01E7               	clrf	_work_mode+1
  1970                           
  1971                           ;app_process.c: 83: set_led_state(LED_INDEX_1 | LED_INDEX_2 | LED_INDEX_3, LED_STATE_OFF
      +                          );
  1972  079F  00D3               	movwf	set_led_state@index
  1973  07A0  01D4               	clrf	set_led_state@index+1
  1974  07A1  01D5               	clrf	set_led_state@state
  1975  07A2  2DE4               	ljmp	l6217
  1976  07A3                     __end_of_app_process_power_off:	
  1977                           
  1978                           	psect	text13
  1979  07C8                     __ptext13:	
  1980 ;; *************** function _app_process_key *****************
  1981 ;; Defined at:
  1982 ;;		line 309 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_key.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;		None
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;		None
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  1    wreg      void 
  1989 ;; Registers used:
  1990 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 100/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMMON   BANK0   BANK1
  1996 ;;      Params:         0       0       0
  1997 ;;      Locals:         0       0       0
  1998 ;;      Temps:          0       0       0
  1999 ;;      Totals:         0       0       0
  2000 ;;Total ram usage:        0 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; Hardware stack levels required when called:    7
  2003 ;; This function calls:
  2004 ;;		_charge_or_lowBat_check
  2005 ;;		_handle_key_pwr
  2006 ;;		_handle_key_water
  2007 ;;		_key_brush_pwr_check
  2008 ;;		_key_water_mode_check
  2009 ;;		_key_water_pwr_check
  2010 ;; This function is called by:
  2011 ;;		_main
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           
  2016                           ;psect for function _app_process_key
  2017  07C8                     _app_process_key:	
  2018                           
  2019                           ;app_key.c: 311: key_brush_pwr_check();
  2020                           
  2021                           ;incstack = 0
  2022                           ; Regs used in _app_process_key: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2023  07C8  2487               	fcall	_key_brush_pwr_check
  2024                           
  2025                           ;app_key.c: 312: key_water_pwr_check();
  2026  07C9  24BF               	fcall	_key_water_pwr_check
  2027                           
  2028                           ;app_key.c: 313: key_water_mode_check();
  2029  07CA  24F6               	fcall	_key_water_mode_check
  2030                           
  2031                           ;app_key.c: 314: charge_or_lowBat_check();
  2032  07CB  26BE               	fcall	_charge_or_lowBat_check
  2033                           
  2034                           ;app_key.c: 315: handle_key_pwr();
  2035  07CC  2610               	fcall	_handle_key_pwr
  2036                           
  2037                           ;app_key.c: 316: handle_key_water();
  2038  07CD  2B8F               	ljmp	l6679
  2039  07CE                     __end_of_app_process_key:	
  2040                           
  2041                           	psect	text14
  2042  04BF                     __ptext14:	
  2043 ;; *************** function _key_water_pwr_check *****************
  2044 ;; Defined at:
  2045 ;;		line 60 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_key.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;		None
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;		None
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      void 
  2052 ;; Registers used:
  2053 ;;		wreg, status,2, status,0
  2054 ;; Tracked objects:
  2055 ;;		On entry : 100/0
  2056 ;;		On exit  : 100/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMMON   BANK0   BANK1
  2059 ;;      Params:         0       0       0
  2060 ;;      Locals:         0       0       0
  2061 ;;      Temps:          0       0       0
  2062 ;;      Totals:         0       0       0
  2063 ;;Total ram usage:        0 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    3
  2066 ;; This function calls:
  2067 ;;		Nothing
  2068 ;; This function is called by:
  2069 ;;		_app_process_key
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           
  2074                           ;psect for function _key_water_pwr_check
  2075  04BF                     _key_water_pwr_check:	
  2076                           
  2077                           ;app_key.c: 62: if(!RB0)
  2078                           
  2079                           ;incstack = 0
  2080                           ; Regs used in _key_water_pwr_check: [wreg+status,2+status,0]
  2081  04BF  1806               	btfsc	6,0	;volatile
  2082  04C0  2CDD               	goto	l6595
  2083                           
  2084                           ;app_key.c: 63: {
  2085                           ;app_key.c: 64: if(KeyPressCnt2 < 200)
  2086  04C1  3000               	movlw	0
  2087  04C2  0233               	subwf	_KeyPressCnt2+1,w	;volatile
  2088  04C3  30C8               	movlw	200
  2089  04C4  1903               	skipnz
  2090  04C5  0232               	subwf	_KeyPressCnt2,w	;volatile
  2091  04C6  1803               	skipnc
  2092  04C7  2CCB               	goto	l6587
  2093                           
  2094                           ;app_key.c: 65: {
  2095                           ;app_key.c: 66: KeyPressCnt2++;
  2096  04C8  0AB2               	incf	_KeyPressCnt2,f	;volatile
  2097  04C9  1903               	skipnz
  2098  04CA  0AB3               	incf	_KeyPressCnt2+1,f	;volatile
  2099  04CB                     l6587:	
  2100                           
  2101                           ;app_key.c: 67: }
  2102                           ;app_key.c: 68: if(KeyPressCnt2 >= 2)
  2103  04CB  3000               	movlw	0
  2104  04CC  0233               	subwf	_KeyPressCnt2+1,w	;volatile
  2105  04CD  3002               	movlw	2
  2106  04CE  1903               	skipnz
  2107  04CF  0232               	subwf	_KeyPressCnt2,w	;volatile
  2108  04D0  1803               	btfsc	3,0
  2109                           
  2110                           ;app_key.c: 69: {
  2111                           ;app_key.c: 70: KeyRelaxCnt2 = 0;
  2112  04D1  01C8               	clrf	_KeyRelaxCnt2	;volatile
  2113                           
  2114                           ;app_key.c: 71: }
  2115                           ;app_key.c: 76: if(KeyPressCnt2 == 200)
  2116  04D2  30C8               	movlw	200
  2117  04D3  0632               	xorwf	_KeyPressCnt2,w	;volatile
  2118  04D4  0433               	iorwf	_KeyPressCnt2+1,w	;volatile
  2119  04D5  1D03               	btfss	3,2
  2120  04D6  0008               	return
  2121                           
  2122                           ;app_key.c: 77: {
  2123                           ;app_key.c: 78: KeyPressCnt2 = 201;
  2124  04D7  30C9               	movlw	201
  2125  04D8  00B2               	movwf	_KeyPressCnt2	;volatile
  2126  04D9  01B3               	clrf	_KeyPressCnt2+1	;volatile
  2127                           
  2128                           ;app_key.c: 80: key_water_pwr_type = KEY_TYPE_LONG_LONG;
  2129  04DA  3003               	movlw	3
  2130  04DB  00CB               	movwf	_key_water_pwr_type
  2131  04DC  0008               	return
  2132  04DD                     l6595:	
  2133                           
  2134                           ;app_key.c: 83: else
  2135                           ;app_key.c: 84: {
  2136                           ;app_key.c: 85: if(KeyRelaxCnt2 < 2)
  2137  04DD  3002               	movlw	2
  2138  04DE  0248               	subwf	_KeyRelaxCnt2,w	;volatile
  2139  04DF  1803               	skipnc
  2140  04E0  2CE3               	goto	l6599
  2141                           
  2142                           ;app_key.c: 86: {
  2143                           ;app_key.c: 87: KeyRelaxCnt2++;
  2144  04E1  0AC8               	incf	_KeyRelaxCnt2,f	;volatile
  2145                           
  2146                           ;app_key.c: 88: }
  2147  04E2  0008               	return
  2148  04E3                     l6599:	
  2149                           
  2150                           ;app_key.c: 89: else
  2151                           ;app_key.c: 90: {
  2152                           ;app_key.c: 91: if(KeyPressCnt2 >= 3 && KeyPressCnt2 <= 50)
  2153  04E3  3000               	movlw	0
  2154  04E4  0233               	subwf	_KeyPressCnt2+1,w	;volatile
  2155  04E5  3003               	movlw	3
  2156  04E6  1903               	skipnz
  2157  04E7  0232               	subwf	_KeyPressCnt2,w	;volatile
  2158  04E8  1C03               	skipc
  2159  04E9  2CF3               	goto	l6605
  2160  04EA  3000               	movlw	0
  2161  04EB  0233               	subwf	_KeyPressCnt2+1,w	;volatile
  2162  04EC  3033               	movlw	51
  2163  04ED  1903               	skipnz
  2164  04EE  0232               	subwf	_KeyPressCnt2,w	;volatile
  2165  04EF  1803               	skipnc
  2166  04F0  2CF3               	goto	l6605
  2167                           
  2168                           ;app_key.c: 92: {
  2169                           ;app_key.c: 94: key_water_pwr_type = KEY_TYPE_SHORT;
  2170  04F1  3005               	movlw	5
  2171  04F2  00CB               	movwf	_key_water_pwr_type
  2172  04F3                     l6605:	
  2173                           
  2174                           ;app_key.c: 95: }
  2175                           ;app_key.c: 96: KeyPressCnt2 = 0;
  2176  04F3  01B2               	clrf	_KeyPressCnt2	;volatile
  2177  04F4  01B3               	clrf	_KeyPressCnt2+1	;volatile
  2178  04F5  0008               	return
  2179  04F6                     __end_of_key_water_pwr_check:	
  2180                           
  2181                           	psect	text15
  2182  04F6                     __ptext15:	
  2183 ;; *************** function _key_water_mode_check *****************
  2184 ;; Defined at:
  2185 ;;		line 100 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_key.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  1    wreg      void 
  2192 ;; Registers used:
  2193 ;;		wreg, status,2, status,0
  2194 ;; Tracked objects:
  2195 ;;		On entry : 100/0
  2196 ;;		On exit  : 100/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1
  2199 ;;      Params:         0       0       0
  2200 ;;      Locals:         0       0       0
  2201 ;;      Temps:          0       0       0
  2202 ;;      Totals:         0       0       0
  2203 ;;Total ram usage:        0 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    3
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_app_process_key
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           
  2214                           ;psect for function _key_water_mode_check
  2215  04F6                     _key_water_mode_check:	
  2216                           
  2217                           ;app_key.c: 102: if(!RB1)
  2218                           
  2219                           ;incstack = 0
  2220                           ; Regs used in _key_water_mode_check: [wreg+status,2+status,0]
  2221  04F6  1886               	btfsc	6,1	;volatile
  2222  04F7  2D14               	goto	l6621
  2223                           
  2224                           ;app_key.c: 103: {
  2225                           ;app_key.c: 104: if(KeyPressCnt3 < 200)
  2226  04F8  3000               	movlw	0
  2227  04F9  0231               	subwf	_KeyPressCnt3+1,w	;volatile
  2228  04FA  30C8               	movlw	200
  2229  04FB  1903               	skipnz
  2230  04FC  0230               	subwf	_KeyPressCnt3,w	;volatile
  2231  04FD  1803               	skipnc
  2232  04FE  2D02               	goto	l6613
  2233                           
  2234                           ;app_key.c: 105: {
  2235                           ;app_key.c: 106: KeyPressCnt3++;
  2236  04FF  0AB0               	incf	_KeyPressCnt3,f	;volatile
  2237  0500  1903               	skipnz
  2238  0501  0AB1               	incf	_KeyPressCnt3+1,f	;volatile
  2239  0502                     l6613:	
  2240                           
  2241                           ;app_key.c: 107: }
  2242                           ;app_key.c: 108: if(KeyPressCnt3 >= 2)
  2243  0502  3000               	movlw	0
  2244  0503  0231               	subwf	_KeyPressCnt3+1,w	;volatile
  2245  0504  3002               	movlw	2
  2246  0505  1903               	skipnz
  2247  0506  0230               	subwf	_KeyPressCnt3,w	;volatile
  2248  0507  1803               	btfsc	3,0
  2249                           
  2250                           ;app_key.c: 109: {
  2251                           ;app_key.c: 110: KeyRelaxCnt3 = 0;
  2252  0508  01C7               	clrf	_KeyRelaxCnt3	;volatile
  2253                           
  2254                           ;app_key.c: 111: }
  2255                           ;app_key.c: 116: if(KeyPressCnt3 == 200)
  2256  0509  30C8               	movlw	200
  2257  050A  0630               	xorwf	_KeyPressCnt3,w	;volatile
  2258  050B  0431               	iorwf	_KeyPressCnt3+1,w	;volatile
  2259  050C  1D03               	btfss	3,2
  2260  050D  0008               	return
  2261                           
  2262                           ;app_key.c: 117: {
  2263                           ;app_key.c: 118: KeyPressCnt3 = 201;
  2264  050E  30C9               	movlw	201
  2265  050F  00B0               	movwf	_KeyPressCnt3	;volatile
  2266  0510  01B1               	clrf	_KeyPressCnt3+1	;volatile
  2267                           
  2268                           ;app_key.c: 120: key_water_mode_type = KEY_TYPE_LONG_LONG;
  2269  0511  3003               	movlw	3
  2270  0512  00CA               	movwf	_key_water_mode_type
  2271  0513  0008               	return
  2272  0514                     l6621:	
  2273                           
  2274                           ;app_key.c: 123: else
  2275                           ;app_key.c: 124: {
  2276                           ;app_key.c: 125: if(KeyRelaxCnt3 < 2)
  2277  0514  3002               	movlw	2
  2278  0515  0247               	subwf	_KeyRelaxCnt3,w	;volatile
  2279  0516  1803               	skipnc
  2280  0517  2D1A               	goto	l6625
  2281                           
  2282                           ;app_key.c: 126: {
  2283                           ;app_key.c: 127: KeyRelaxCnt3++;
  2284  0518  0AC7               	incf	_KeyRelaxCnt3,f	;volatile
  2285                           
  2286                           ;app_key.c: 128: }
  2287  0519  0008               	return
  2288  051A                     l6625:	
  2289                           
  2290                           ;app_key.c: 129: else
  2291                           ;app_key.c: 130: {
  2292                           ;app_key.c: 131: if(KeyPressCnt3 >= 3 && KeyPressCnt3 <= 50)
  2293  051A  3000               	movlw	0
  2294  051B  0231               	subwf	_KeyPressCnt3+1,w	;volatile
  2295  051C  3003               	movlw	3
  2296  051D  1903               	skipnz
  2297  051E  0230               	subwf	_KeyPressCnt3,w	;volatile
  2298  051F  1C03               	skipc
  2299  0520  2D2A               	goto	l6631
  2300  0521  3000               	movlw	0
  2301  0522  0231               	subwf	_KeyPressCnt3+1,w	;volatile
  2302  0523  3033               	movlw	51
  2303  0524  1903               	skipnz
  2304  0525  0230               	subwf	_KeyPressCnt3,w	;volatile
  2305  0526  1803               	skipnc
  2306  0527  2D2A               	goto	l6631
  2307                           
  2308                           ;app_key.c: 132: {
  2309                           ;app_key.c: 134: key_water_mode_type = KEY_TYPE_SHORT;
  2310  0528  3005               	movlw	5
  2311  0529  00CA               	movwf	_key_water_mode_type
  2312  052A                     l6631:	
  2313                           
  2314                           ;app_key.c: 135: }
  2315                           ;app_key.c: 136: KeyPressCnt3 = 0;
  2316  052A  01B0               	clrf	_KeyPressCnt3	;volatile
  2317  052B  01B1               	clrf	_KeyPressCnt3+1	;volatile
  2318  052C  0008               	return
  2319  052D                     __end_of_key_water_mode_check:	
  2320                           
  2321                           	psect	text16
  2322  0487                     __ptext16:	
  2323 ;; *************** function _key_brush_pwr_check *****************
  2324 ;; Defined at:
  2325 ;;		line 19 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_key.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;		None
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2, status,0
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 100/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMMON   BANK0   BANK1
  2339 ;;      Params:         0       0       0
  2340 ;;      Locals:         0       0       0
  2341 ;;      Temps:          0       0       0
  2342 ;;      Totals:         0       0       0
  2343 ;;Total ram usage:        0 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    3
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		_app_process_key
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           
  2354                           ;psect for function _key_brush_pwr_check
  2355  0487                     _key_brush_pwr_check:	
  2356                           
  2357                           ;app_key.c: 21: if(!RB2)
  2358                           
  2359                           ;incstack = 0
  2360                           ; Regs used in _key_brush_pwr_check: [wreg+status,2+status,0]
  2361  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2362  0488  1906               	btfsc	6,2	;volatile
  2363  0489  2CA6               	goto	l6569
  2364                           
  2365                           ;app_key.c: 22: {
  2366                           ;app_key.c: 23: if(KeyPressCnt1 < 100)
  2367  048A  3000               	movlw	0
  2368  048B  0235               	subwf	_KeyPressCnt1+1,w	;volatile
  2369  048C  3064               	movlw	100
  2370  048D  1903               	skipnz
  2371  048E  0234               	subwf	_KeyPressCnt1,w	;volatile
  2372  048F  1803               	skipnc
  2373  0490  2C94               	goto	l6561
  2374                           
  2375                           ;app_key.c: 24: {
  2376                           ;app_key.c: 25: KeyPressCnt1++;
  2377  0491  0AB4               	incf	_KeyPressCnt1,f	;volatile
  2378  0492  1903               	skipnz
  2379  0493  0AB5               	incf	_KeyPressCnt1+1,f	;volatile
  2380  0494                     l6561:	
  2381                           
  2382                           ;app_key.c: 26: }
  2383                           ;app_key.c: 27: if(KeyPressCnt1 >= 2)
  2384  0494  3000               	movlw	0
  2385  0495  0235               	subwf	_KeyPressCnt1+1,w	;volatile
  2386  0496  3002               	movlw	2
  2387  0497  1903               	skipnz
  2388  0498  0234               	subwf	_KeyPressCnt1,w	;volatile
  2389  0499  1803               	btfsc	3,0
  2390                           
  2391                           ;app_key.c: 28: {
  2392                           ;app_key.c: 29: KeyRelaxCnt1 = 0;
  2393  049A  01C9               	clrf	_KeyRelaxCnt1	;volatile
  2394                           
  2395                           ;app_key.c: 30: }
  2396                           ;app_key.c: 35: if(KeyPressCnt1 == 100)
  2397  049B  3064               	movlw	100
  2398  049C  0634               	xorwf	_KeyPressCnt1,w	;volatile
  2399  049D  0435               	iorwf	_KeyPressCnt1+1,w	;volatile
  2400  049E  1D03               	btfss	3,2
  2401  049F  0008               	return
  2402                           
  2403                           ;app_key.c: 36: {
  2404                           ;app_key.c: 37: KeyPressCnt1 = 101;
  2405  04A0  3065               	movlw	101
  2406  04A1  00B4               	movwf	_KeyPressCnt1	;volatile
  2407  04A2  01B5               	clrf	_KeyPressCnt1+1	;volatile
  2408                           
  2409                           ;app_key.c: 39: key_brush_pwrtype = KEY_TYPE_LONG;
  2410  04A3  3002               	movlw	2
  2411  04A4  00CC               	movwf	_key_brush_pwrtype
  2412  04A5  0008               	return
  2413  04A6                     l6569:	
  2414                           
  2415                           ;app_key.c: 42: else
  2416                           ;app_key.c: 43: {
  2417                           ;app_key.c: 44: if(KeyRelaxCnt1 < 2)
  2418  04A6  3002               	movlw	2
  2419  04A7  0249               	subwf	_KeyRelaxCnt1,w	;volatile
  2420  04A8  1803               	skipnc
  2421  04A9  2CAC               	goto	l6573
  2422                           
  2423                           ;app_key.c: 45: {
  2424                           ;app_key.c: 46: KeyRelaxCnt1++;
  2425  04AA  0AC9               	incf	_KeyRelaxCnt1,f	;volatile
  2426                           
  2427                           ;app_key.c: 47: }
  2428  04AB  0008               	return
  2429  04AC                     l6573:	
  2430                           
  2431                           ;app_key.c: 48: else
  2432                           ;app_key.c: 49: {
  2433                           ;app_key.c: 50: if(KeyPressCnt1 >= 3 && KeyPressCnt1 <= 50)
  2434  04AC  3000               	movlw	0
  2435  04AD  0235               	subwf	_KeyPressCnt1+1,w	;volatile
  2436  04AE  3003               	movlw	3
  2437  04AF  1903               	skipnz
  2438  04B0  0234               	subwf	_KeyPressCnt1,w	;volatile
  2439  04B1  1C03               	skipc
  2440  04B2  2CBC               	goto	l6579
  2441  04B3  3000               	movlw	0
  2442  04B4  0235               	subwf	_KeyPressCnt1+1,w	;volatile
  2443  04B5  3033               	movlw	51
  2444  04B6  1903               	skipnz
  2445  04B7  0234               	subwf	_KeyPressCnt1,w	;volatile
  2446  04B8  1803               	skipnc
  2447  04B9  2CBC               	goto	l6579
  2448                           
  2449                           ;app_key.c: 51: {
  2450                           ;app_key.c: 53: key_brush_pwrtype = KEY_TYPE_SHORT;
  2451  04BA  3005               	movlw	5
  2452  04BB  00CC               	movwf	_key_brush_pwrtype
  2453  04BC                     l6579:	
  2454                           
  2455                           ;app_key.c: 54: }
  2456                           ;app_key.c: 55: KeyPressCnt1 = 0;
  2457  04BC  01B4               	clrf	_KeyPressCnt1	;volatile
  2458  04BD  01B5               	clrf	_KeyPressCnt1+1	;volatile
  2459  04BE  0008               	return
  2460  04BF                     __end_of_key_brush_pwr_check:	
  2461                           
  2462                           	psect	text17
  2463  038F                     __ptext17:	
  2464 ;; *************** function _handle_key_water *****************
  2465 ;; Defined at:
  2466 ;;		line 245 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_key.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;		None
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;		None
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  1    wreg      void 
  2473 ;; Registers used:
  2474 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 100/0
  2477 ;;		On exit  : 100/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMMON   BANK0   BANK1
  2480 ;;      Params:         0       0       0
  2481 ;;      Locals:         0       0       0
  2482 ;;      Temps:          0       0       0
  2483 ;;      Totals:         0       0       0
  2484 ;;Total ram usage:        0 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    5
  2487 ;; This function calls:
  2488 ;;		_app_led_water_mode_set
  2489 ;;		_app_process_set_water_mode_next
  2490 ;;		_app_process_set_water_state
  2491 ;;		_water_motor
  2492 ;; This function is called by:
  2493 ;;		_app_process_key
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           
  2498                           ;psect for function _handle_key_water
  2499  038F                     _handle_key_water:	
  2500  038F                     l6679:	
  2501                           ;incstack = 0
  2502                           ; Regs used in _handle_key_water: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2503                           
  2504                           
  2505                           ;app_key.c: 247: switch (key_water_pwr_type)
  2506  038F  2BAF               	goto	l6711
  2507  0390                     l6681:	
  2508                           
  2509                           ;app_key.c: 250: if (water_work_state == WATER_WORK_STATE_WORKING)
  2510  0390  0B6C               	decfsz	_water_work_state,w	;volatile
  2511  0391  2B9B               	goto	l6693
  2512                           
  2513                           ;app_key.c: 251: {
  2514                           ;app_key.c: 252: if (app_work_state == WORK_STATE_POWEROFF)
  2515  0392  086D               	movf	_app_work_state,w	;volatile
  2516  0393  1D03               	btfss	3,2
  2517  0394  2B99               	goto	l6691
  2518                           
  2519                           ;app_key.c: 253: {
  2520                           ;app_key.c: 254: if (app_charge.Remind)
  2521  0395  1683               	bsf	3,5	;RP0=1, select bank1
  2522  0396  1E20               	btfss	_app_charge^(0+128),4
  2523  0397  2B99               	goto	l6691
  2524                           
  2525                           ;app_key.c: 255: {
  2526                           ;app_key.c: 256: app_charge.flag_remind_delay_10s = 1;
  2527                           
  2528                           ;app_key.c: 257: app_charge.remind_delay_10s_timer = 0;
  2529  0398  2558               	fcall	PL10	;call to abstracted procedure
  2530  0399                     l6691:	
  2531                           
  2532                           ;app_key.c: 258: }
  2533                           ;app_key.c: 259: }
  2534                           ;app_key.c: 260: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
  2535  0399  3000               	movlw	0
  2536  039A  2BAC               	goto	L1
  2537  039B                     l6693:	
  2538                           ;app_key.c: 261: }
  2539                           
  2540                           
  2541                           ;app_key.c: 262: else if (water_work_state == WATER_WORK_STATE_POWEROFF || app_charge.fl
      +                          ag_remind_delay_10s || water_work_state == WATER_WORK_STATE_MODE_LED)
  2542  039B  086C               	movf	_water_work_state,w	;volatile
  2543  039C  1683               	bsf	3,5	;RP0=1, select bank1
  2544  039D  1903               	btfsc	3,2
  2545  039E  2BA8               	goto	L3
  2546  039F  0822               	movf	(_app_charge^(0+128)+2),w
  2547  03A0  1D03               	btfss	3,2
  2548  03A1  2BA7               	goto	l6699
  2549  03A2  3003               	movlw	3
  2550  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  2551  03A4  066C               	xorwf	_water_work_state,w	;volatile
  2552  03A5  1D03               	btfss	3,2
  2553  03A6  2BAD               	goto	l6707
  2554  03A7                     l6699:	
  2555                           
  2556                           ;app_key.c: 263: {
  2557                           ;app_key.c: 264: app_charge.flag_remind_delay_10s = 0;
  2558  03A7  1683               	bsf	3,5	;RP0=1, select bank1
  2559  03A8                     L3:	
  2560  03A8  01A2               	clrf	(_app_charge^(0+128)+2)
  2561                           
  2562                           ;app_key.c: 265: app_led_water_mode_set();
  2563  03A9  2412               	fcall	_app_led_water_mode_set
  2564                           
  2565                           ;app_key.c: 266: water_motor();
  2566  03AA  2683               	fcall	_water_motor
  2567                           
  2568                           ;app_key.c: 267: app_process_set_water_state(WATER_WORK_STATE_WORKING);
  2569  03AB  3001               	movlw	1
  2570  03AC                     L1:	
  2571  03AC  27D9               	fcall	_app_process_set_water_state
  2572  03AD                     l6707:	
  2573                           
  2574                           ;app_key.c: 268: }
  2575                           ;app_key.c: 269: key_water_pwr_type = KEY_TYPE_IDLE;
  2576  03AD  01CB               	clrf	_key_water_pwr_type
  2577                           
  2578                           ;app_key.c: 270: break;
  2579  03AE  2BB4               	goto	l6713
  2580  03AF                     l6711:	
  2581  03AF  084B               	movf	_key_water_pwr_type,w
  2582                           
  2583                           ; Switch size 1, requested type "space"
  2584                           ; Number of cases is 1, Range of values is 5 to 5
  2585                           ; switch strategies available:
  2586                           ; Name         Instructions Cycles
  2587                           ; simple_byte            4     3 (average)
  2588                           ; direct_byte           10     9 (fixed)
  2589                           ; jumptable            263     9 (fixed)
  2590                           ;	Chosen strategy is simple_byte
  2591  03B0  3A05               	xorlw	5	; case 5
  2592  03B1  1903               	skipnz
  2593  03B2  2B90               	goto	l6681
  2594  03B3  2BB4               	goto	l6713
  2595  03B4                     l6713:	
  2596                           
  2597                           ;app_key.c: 275: key_water_pwr_type = KEY_TYPE_IDLE;
  2598  03B4  01CB               	clrf	_key_water_pwr_type
  2599                           
  2600                           ;app_key.c: 277: switch (key_water_mode_type)
  2601  03B5  2BCB               	goto	l6731
  2602  03B6                     l6715:	
  2603                           
  2604                           ;app_key.c: 280: if (water_work_state == WATER_WORK_STATE_WORKING)
  2605  03B6  0B6C               	decfsz	_water_work_state,w	;volatile
  2606  03B7  2BBC               	goto	l6719
  2607                           
  2608                           ;app_key.c: 281: {
  2609                           ;app_key.c: 282: app_process_set_water_mode_next();
  2610  03B8  27AB               	fcall	_app_process_set_water_mode_next
  2611                           
  2612                           ;app_key.c: 283: app_led_water_mode_set();
  2613  03B9  2412               	fcall	_app_led_water_mode_set
  2614                           
  2615                           ;app_key.c: 284: water_motor();
  2616  03BA  2683               	fcall	_water_motor
  2617                           
  2618                           ;app_key.c: 285: }
  2619  03BB  2BC9               	goto	l6727
  2620  03BC                     l6719:	
  2621                           
  2622                           ;app_key.c: 286: else if (water_work_state == WATER_WORK_STATE_POWEROFF)
  2623  03BC  086C               	movf	_water_work_state,w	;volatile
  2624                           
  2625                           ;app_key.c: 287: {
  2626                           ;app_key.c: 288: app_process_set_water_state(WATER_WORK_STATE_MODE_LED);
  2627  03BD  3003               	movlw	3
  2628  03BE  1D03               	btfss	3,2
  2629  03BF  2BC2               	goto	L4
  2630  03C0  27D9               	fcall	_app_process_set_water_state
  2631  03C1  2BC8               	goto	L2
  2632  03C2                     L4:	
  2633                           ;app_key.c: 291: else if (water_work_state == WATER_WORK_STATE_MODE_LED)
  2634                           
  2635                           ;app_key.c: 290: }
  2636                           
  2637                           ;app_key.c: 289: app_led_water_mode_set();
  2638                           
  2639  03C2  066C               	xorwf	_water_work_state,w	;volatile
  2640  03C3  1D03               	btfss	3,2
  2641  03C4  2BC9               	goto	l6727
  2642                           
  2643                           ;app_key.c: 292: {
  2644                           ;app_key.c: 293: app_process_set_water_state(WATER_WORK_STATE_MODE_LED);
  2645  03C5  3003               	movlw	3
  2646  03C6  27D9               	fcall	_app_process_set_water_state
  2647                           
  2648                           ;app_key.c: 294: app_process_set_water_mode_next();
  2649  03C7  27AB               	fcall	_app_process_set_water_mode_next
  2650  03C8                     L2:	
  2651                           
  2652                           ;app_key.c: 295: app_led_water_mode_set();
  2653  03C8  2412               	fcall	_app_led_water_mode_set
  2654  03C9                     l6727:	
  2655                           
  2656                           ;app_key.c: 296: }
  2657                           ;app_key.c: 297: key_water_mode_type = KEY_TYPE_IDLE;
  2658  03C9  01CA               	clrf	_key_water_mode_type
  2659                           
  2660                           ;app_key.c: 298: break;
  2661  03CA  2BD3               	goto	l6733
  2662  03CB                     l6731:	
  2663  03CB  084A               	movf	_key_water_mode_type,w
  2664                           
  2665                           ; Switch size 1, requested type "space"
  2666                           ; Number of cases is 2, Range of values is 2 to 5
  2667                           ; switch strategies available:
  2668                           ; Name         Instructions Cycles
  2669                           ; simple_byte            7     4 (average)
  2670                           ; direct_byte           13     9 (fixed)
  2671                           ; jumptable            263     9 (fixed)
  2672                           ;	Chosen strategy is simple_byte
  2673  03CC  3A02               	xorlw	2	; case 2
  2674  03CD  1903               	skipnz
  2675  03CE  2BD3               	goto	l6733
  2676  03CF  3A07               	xorlw	7	; case 5
  2677  03D0  1903               	skipnz
  2678  03D1  2BB6               	goto	l6715
  2679  03D2  2BD3               	goto	l6733
  2680  03D3                     l6733:	
  2681                           
  2682                           ;app_key.c: 306: key_water_mode_type = KEY_TYPE_IDLE;
  2683  03D3  01CA               	clrf	_key_water_mode_type
  2684  03D4  0008               	return
  2685  03D5                     __end_of_handle_key_water:	
  2686                           
  2687                           	psect	text18
  2688  0683                     __ptext18:	
  2689 ;; *************** function _water_motor *****************
  2690 ;; Defined at:
  2691 ;;		line 23 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_water_process.
      +c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;		None
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;		None
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg, status,2, status,0
  2700 ;; Tracked objects:
  2701 ;;		On entry : 100/0
  2702 ;;		On exit  : 100/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMMON   BANK0   BANK1
  2705 ;;      Params:         0       0       0
  2706 ;;      Locals:         0       0       0
  2707 ;;      Temps:          0       0       0
  2708 ;;      Totals:         0       0       0
  2709 ;;Total ram usage:        0 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    3
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_handle_key_water
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           
  2720                           ;psect for function _water_motor
  2721  0683                     _water_motor:	
  2722                           
  2723                           ;app_water_process.c: 25: if (water_work_mode.water_mode == WATER_WORK_MODE_ONE)
  2724                           
  2725                           ;incstack = 0
  2726                           ; Regs used in _water_motor: [wreg+status,2+status,0]
  2727  0683  0B61               	decfsz	_water_work_mode,w
  2728  0684  2E87               	goto	l6339
  2729                           
  2730                           ;app_water_process.c: 26: {
  2731                           ;app_water_process.c: 28: MotorWaterDuty=36;
  2732  0685  3024               	movlw	36
  2733  0686  00BC               	movwf	_MotorWaterDuty
  2734  0687                     l6339:	
  2735                           
  2736                           ;app_water_process.c: 29: }
  2737                           ;app_water_process.c: 30: if (water_work_mode.water_mode == WATER_WORK_MODE_TWO)
  2738  0687  3002               	movlw	2
  2739  0688  0661               	xorwf	_water_work_mode,w
  2740  0689  1D03               	btfss	3,2
  2741  068A  2E8D               	goto	l6343
  2742                           
  2743                           ;app_water_process.c: 31: {
  2744                           ;app_water_process.c: 33: MotorWaterDuty=51;
  2745  068B  3033               	movlw	51
  2746  068C  00BC               	movwf	_MotorWaterDuty
  2747  068D                     l6343:	
  2748                           
  2749                           ;app_water_process.c: 34: }
  2750                           ;app_water_process.c: 35: if (water_work_mode.water_mode == WATER_WORK_MODE_THREE)
  2751  068D  3003               	movlw	3
  2752  068E  0661               	xorwf	_water_work_mode,w
  2753  068F  1D03               	btfss	3,2
  2754  0690  2E93               	goto	l6347
  2755                           
  2756                           ;app_water_process.c: 36: {
  2757                           ;app_water_process.c: 38: MotorWaterDuty=66;
  2758  0691  3042               	movlw	66
  2759  0692  00BC               	movwf	_MotorWaterDuty
  2760  0693                     l6347:	
  2761                           
  2762                           ;app_water_process.c: 39: }
  2763                           ;app_water_process.c: 40: if (water_work_mode.water_mode == WATER_WORK_MODE_FOUR)
  2764  0693  3004               	movlw	4
  2765  0694  0661               	xorwf	_water_work_mode,w
  2766  0695  1D03               	btfss	3,2
  2767  0696  2E99               	goto	l6351
  2768                           
  2769                           ;app_water_process.c: 41: {
  2770                           ;app_water_process.c: 43: MotorWaterDuty=81;
  2771  0697  3051               	movlw	81
  2772  0698  00BC               	movwf	_MotorWaterDuty
  2773  0699                     l6351:	
  2774                           
  2775                           ;app_water_process.c: 44: }
  2776                           ;app_water_process.c: 45: if (water_work_mode.water_mode == WATER_WORK_MODE_FIVE)
  2777  0699  3005               	movlw	5
  2778  069A  0661               	xorwf	_water_work_mode,w
  2779  069B  1D03               	btfss	3,2
  2780  069C  2E9F               	goto	l4804
  2781                           
  2782                           ;app_water_process.c: 46: {
  2783                           ;app_water_process.c: 48: MotorWaterDuty=96;
  2784  069D  3060               	movlw	96
  2785  069E  00BC               	movwf	_MotorWaterDuty
  2786  069F                     l4804:	
  2787                           
  2788                           ;app_water_process.c: 49: }
  2789                           ;app_water_process.c: 50: water_work_mode.water_mode_out_put = water_work_mode.water_mod
      +                          e;
  2790  069F  0861               	movf	_water_work_mode,w
  2791  06A0  00E2               	movwf	_water_work_mode+1
  2792  06A1  0008               	return
  2793  06A2                     __end_of_water_motor:	
  2794                           
  2795                           	psect	text19
  2796  07AB                     __ptext19:	
  2797 ;; *************** function _app_process_set_water_mode_next *****************
  2798 ;; Defined at:
  2799 ;;		line 59 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_water_process.
      +c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;		None
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;		None
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  1    wreg      void 
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0
  2808 ;; Tracked objects:
  2809 ;;		On entry : 100/0
  2810 ;;		On exit  : 100/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMMON   BANK0   BANK1
  2813 ;;      Params:         0       0       0
  2814 ;;      Locals:         0       0       0
  2815 ;;      Temps:          0       0       0
  2816 ;;      Totals:         0       0       0
  2817 ;;Total ram usage:        0 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    3
  2820 ;; This function calls:
  2821 ;;		Nothing
  2822 ;; This function is called by:
  2823 ;;		_handle_key_water
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           
  2828                           ;psect for function _app_process_set_water_mode_next
  2829  07AB                     _app_process_set_water_mode_next:	
  2830  07AB  3006               	movlw	6
  2831                           
  2832                           ;app_water_process.c: 61: water_work_mode.water_mode++;
  2833                           
  2834                           ;incstack = 0
  2835                           ; Regs used in _app_process_set_water_mode_next: [wreg+status,2+status,0]
  2836  07AC  0AE1               	incf	_water_work_mode,f
  2837                           
  2838                           ;app_water_process.c: 62: if (water_work_mode.water_mode > WATER_WORK_MODE_FIVE)
  2839  07AD  0261               	subwf	_water_work_mode,w
  2840  07AE  1C03               	skipc
  2841  07AF  0008               	return
  2842                           
  2843                           ;app_water_process.c: 63: {
  2844                           ;app_water_process.c: 64: water_work_mode.water_mode = WATER_WORK_MODE_ONE;
  2845  07B0  01E1               	clrf	_water_work_mode
  2846  07B1  0AE1               	incf	_water_work_mode,f
  2847  07B2  0008               	return
  2848  07B3                     __end_of_app_process_set_water_mode_next:	
  2849                           
  2850                           	psect	text20
  2851  0412                     __ptext20:	
  2852 ;; *************** function _app_led_water_mode_set *****************
  2853 ;; Defined at:
  2854 ;;		line 166 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_led.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;		None
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;		None
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2, status,0, pclath, cstack
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/100
  2865 ;;		On exit  : 100/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMMON   BANK0   BANK1
  2868 ;;      Params:         0       0       0
  2869 ;;      Locals:         0       0       0
  2870 ;;      Temps:          0       0       0
  2871 ;;      Totals:         0       0       0
  2872 ;;Total ram usage:        0 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    4
  2875 ;; This function calls:
  2876 ;;		_set_led_state
  2877 ;; This function is called by:
  2878 ;;		_handle_key_water
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           
  2883                           ;psect for function _app_led_water_mode_set
  2884  0412                     _app_led_water_mode_set:	
  2885                           
  2886                           ;app_led.c: 168: if (water_work_mode.water_mode == WATER_WORK_MODE_ONE)
  2887                           
  2888                           ;incstack = 0
  2889                           ; Regs used in _app_led_water_mode_set: [wreg+status,2+status,0+pclath+cstack]
  2890  0412  1283               	bcf	3,5	;RP0=0, select bank0
  2891  0413  0B61               	decfsz	_water_work_mode,w
  2892  0414  2C1D               	goto	l6319
  2893                           
  2894                           ;app_led.c: 169: {
  2895                           ;app_led.c: 170: set_led_state(LED_INDEX_8, LED_STATE_ON);
  2896  0415  3080               	movlw	128
  2897  0416  2448               	fcall	PL2	;call to abstracted procedure
  2898  0417  25E4               	fcall	_set_led_state
  2899                           
  2900                           ;app_led.c: 171: set_led_state(LED_INDEX_7 | LED_INDEX_6 | LED_INDEX_5 | LED_INDEX_4, LE
      +                          D_STATE_OFF);
  2901  0418  3078               	movlw	120
  2902  0419  00D3               	movwf	set_led_state@index
  2903  041A  01D4               	clrf	set_led_state@index+1
  2904  041B  01D5               	clrf	set_led_state@state
  2905  041C  2DE4               	ljmp	l6217
  2906  041D                     l6319:	
  2907                           ;app_led.c: 172: }
  2908                           
  2909                           
  2910                           ;app_led.c: 173: else if (water_work_mode.water_mode == WATER_WORK_MODE_TWO)
  2911  041D  3002               	movlw	2
  2912  041E  0661               	xorwf	_water_work_mode,w
  2913  041F  1D03               	btfss	3,2
  2914  0420  2C29               	goto	l6323
  2915                           
  2916                           ;app_led.c: 174: {
  2917                           ;app_led.c: 175: set_led_state(LED_INDEX_8 | LED_INDEX_7, LED_STATE_ON);
  2918  0421  30C0               	movlw	192
  2919  0422  2448               	fcall	PL2	;call to abstracted procedure
  2920  0423  25E4               	fcall	_set_led_state
  2921                           
  2922                           ;app_led.c: 176: set_led_state(LED_INDEX_6 | LED_INDEX_5 | LED_INDEX_4, LED_STATE_OFF);
  2923  0424  3038               	movlw	56
  2924  0425  00D3               	movwf	set_led_state@index
  2925  0426  01D4               	clrf	set_led_state@index+1
  2926  0427  01D5               	clrf	set_led_state@state
  2927  0428  2DE4               	ljmp	l6217
  2928  0429                     l6323:	
  2929                           ;app_led.c: 177: }
  2930                           
  2931                           
  2932                           ;app_led.c: 178: else if (water_work_mode.water_mode == WATER_WORK_MODE_THREE)
  2933  0429  3003               	movlw	3
  2934  042A  0661               	xorwf	_water_work_mode,w
  2935  042B  1D03               	btfss	3,2
  2936  042C  2C35               	goto	l6327
  2937                           
  2938                           ;app_led.c: 179: {
  2939                           ;app_led.c: 180: set_led_state(LED_INDEX_8 | LED_INDEX_7 | LED_INDEX_6, LED_STATE_ON);
  2940  042D  30E0               	movlw	224
  2941  042E  2448               	fcall	PL2	;call to abstracted procedure
  2942  042F  25E4               	fcall	_set_led_state
  2943                           
  2944                           ;app_led.c: 181: set_led_state(LED_INDEX_5 | LED_INDEX_4, LED_STATE_OFF);
  2945  0430  3018               	movlw	24
  2946  0431  00D3               	movwf	set_led_state@index
  2947  0432  01D4               	clrf	set_led_state@index+1
  2948  0433  01D5               	clrf	set_led_state@state
  2949  0434  2DE4               	ljmp	l6217
  2950  0435                     l6327:	
  2951                           ;app_led.c: 182: }
  2952                           
  2953                           
  2954                           ;app_led.c: 183: else if (water_work_mode.water_mode == WATER_WORK_MODE_FOUR)
  2955  0435  3004               	movlw	4
  2956  0436  0661               	xorwf	_water_work_mode,w
  2957  0437  1D03               	btfss	3,2
  2958  0438  2C41               	goto	l6331
  2959                           
  2960                           ;app_led.c: 184: {
  2961                           ;app_led.c: 185: set_led_state(LED_INDEX_8 | LED_INDEX_7 | LED_INDEX_6 | LED_INDEX_5, LE
      +                          D_STATE_ON);
  2962  0439  30F0               	movlw	240
  2963  043A  2448               	fcall	PL2	;call to abstracted procedure
  2964  043B  25E4               	fcall	_set_led_state
  2965                           
  2966                           ;app_led.c: 186: set_led_state(LED_INDEX_4, LED_STATE_OFF);
  2967  043C  3008               	movlw	8
  2968  043D  00D3               	movwf	set_led_state@index
  2969  043E  01D4               	clrf	set_led_state@index+1
  2970  043F  01D5               	clrf	set_led_state@state
  2971  0440  2DE4               	ljmp	l6217
  2972  0441                     l6331:	
  2973                           ;app_led.c: 187: }
  2974                           
  2975                           
  2976                           ;app_led.c: 188: else if (water_work_mode.water_mode == WATER_WORK_MODE_FIVE)
  2977  0441  3005               	movlw	5
  2978  0442  0661               	xorwf	_water_work_mode,w
  2979  0443  1D03               	btfss	3,2
  2980  0444  0008               	return
  2981                           
  2982                           ;app_led.c: 189: {
  2983                           ;app_led.c: 190: set_led_state(LED_INDEX_8 | LED_INDEX_7 | LED_INDEX_6 | LED_INDEX_5 | L
      +                          ED_INDEX_4, LED_STATE_ON);
  2984  0445  30F8               	movlw	248
  2985  0446  2448               	fcall	PL2	;call to abstracted procedure
  2986  0447  2DE4               	ljmp	l6217
  2987  0448                     __end_of_app_led_water_mode_set:	
  2988  0448                     PL2:	
  2989  0448  00D3               	movwf	set_led_state@index
  2990  0449  01D4               	clrf	set_led_state@index+1
  2991  044A  01D5               	clrf	set_led_state@state
  2992  044B  0AD5               	incf	set_led_state@state,f
  2993  044C  0008               	return
  2994  044D                     __end_ofPL2:	
  2995                           
  2996                           	psect	text21
  2997  0610                     __ptext21:	
  2998 ;; *************** function _handle_key_pwr *****************
  2999 ;; Defined at:
  3000 ;;		line 192 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_key.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;		None
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;		None
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      void 
  3007 ;; Registers used:
  3008 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 100/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMMON   BANK0   BANK1
  3014 ;;      Params:         0       0       0
  3015 ;;      Locals:         0       0       0
  3016 ;;      Temps:          0       0       0
  3017 ;;      Totals:         0       0       0
  3018 ;;Total ram usage:        0 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:    6
  3021 ;; This function calls:
  3022 ;;		_app_process_set_mode_init
  3023 ;;		_app_process_set_mode_next
  3024 ;;		_app_process_set_work_state
  3025 ;; This function is called by:
  3026 ;;		_app_process_key
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           
  3031                           ;psect for function _handle_key_pwr
  3032  0610                     _handle_key_pwr:	
  3033                           
  3034                           ;app_key.c: 194: switch (key_brush_pwrtype)
  3035                           
  3036                           ;incstack = 0
  3037                           ; Regs used in _handle_key_pwr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3038  0610  2E30               	goto	l6675
  3039  0611                     l6649:	
  3040                           
  3041                           ;app_key.c: 197: if (app_work_state == WORK_STATE_POWEROFF || app_charge.flag_remind_del
      +                          ay_10s)
  3042  0611  086D               	movf	_app_work_state,w	;volatile
  3043  0612  1683               	bsf	3,5	;RP0=1, select bank1
  3044  0613  1903               	btfsc	3,2
  3045  0614  2E19               	goto	L5
  3046  0615  0822               	movf	(_app_charge^(0+128)+2),w
  3047  0616  1903               	btfsc	3,2
  3048  0617  2E1E               	goto	l6659
  3049                           
  3050                           ;app_key.c: 198: {
  3051                           ;app_key.c: 199: app_charge.flag_remind_delay_10s = 0;
  3052  0618  1683               	bsf	3,5	;RP0=1, select bank1
  3053  0619                     L5:	
  3054  0619  3001               	movlw	1
  3055  061A  01A2               	clrf	(_app_charge^(0+128)+2)
  3056                           
  3057                           ;app_key.c: 200: app_process_set_work_state(WORK_STATE_WORKING);
  3058  061B  27D4               	fcall	_app_process_set_work_state
  3059                           
  3060                           ;app_key.c: 201: app_process_set_mode_init();
  3061  061C  277B               	fcall	_app_process_set_mode_init
  3062                           
  3063                           ;app_key.c: 202: }
  3064  061D  2E39               	goto	l6677
  3065  061E                     l6659:	
  3066                           
  3067                           ;app_key.c: 203: else if (app_work_state == WORK_STATE_WORKING)
  3068  061E  1283               	bcf	3,5	;RP0=0, select bank0
  3069  061F  0B6D               	decfsz	_app_work_state,w	;volatile
  3070  0620  2E39               	goto	l6677
  3071                           
  3072                           ;app_key.c: 204: {
  3073                           ;app_key.c: 211: if (water_work_state == WATER_WORK_STATE_POWEROFF)
  3074  0621  086C               	movf	_water_work_state,w	;volatile
  3075  0622  1D03               	btfss	3,2
  3076  0623  2E2B               	goto	l6669
  3077                           
  3078                           ;app_key.c: 212: {
  3079                           ;app_key.c: 213: if (app_charge.Remind)
  3080  0624  1683               	bsf	3,5	;RP0=1, select bank1
  3081  0625  1E20               	btfss	_app_charge^(0+128),4
  3082  0626  2E2B               	goto	l6669
  3083                           
  3084                           ;app_key.c: 214: {
  3085                           ;app_key.c: 215: app_charge.flag_remind_delay_10s = 1;
  3086  0627  01A2               	clrf	(_app_charge^(0+128)+2)
  3087  0628  0AA2               	incf	(_app_charge^(0+128)+2),f
  3088                           
  3089                           ;app_key.c: 216: app_charge.remind_delay_10s_timer = 0;
  3090  0629  01A3               	clrf	(_app_charge^(0+128)+3)
  3091  062A  01A4               	clrf	((_app_charge+1)^(0+128)+3)
  3092  062B                     l6669:	
  3093                           
  3094                           ;app_key.c: 217: }
  3095                           ;app_key.c: 218: }
  3096                           ;app_key.c: 219: app_process_set_work_state(WORK_STATE_POWEROFF);
  3097  062B  3000               	movlw	0
  3098  062C  27D4               	fcall	_app_process_set_work_state
  3099  062D  2E39               	goto	l6677
  3100  062E                     l6671:	
  3101                           
  3102                           ;app_key.c: 237: app_process_set_mode_next();
  3103  062E  2701               	fcall	_app_process_set_mode_next
  3104                           
  3105                           ;app_key.c: 238: break;
  3106  062F  2E39               	goto	l6677
  3107  0630                     l6675:	
  3108  0630  1283               	bcf	3,5	;RP0=0, select bank0
  3109  0631  084C               	movf	_key_brush_pwrtype,w
  3110                           
  3111                           ; Switch size 1, requested type "space"
  3112                           ; Number of cases is 2, Range of values is 2 to 5
  3113                           ; switch strategies available:
  3114                           ; Name         Instructions Cycles
  3115                           ; simple_byte            7     4 (average)
  3116                           ; direct_byte           13     9 (fixed)
  3117                           ; jumptable            263     9 (fixed)
  3118                           ;	Chosen strategy is simple_byte
  3119  0632  3A02               	xorlw	2	; case 2
  3120  0633  1903               	skipnz
  3121  0634  2E2E               	goto	l6671
  3122  0635  3A07               	xorlw	7	; case 5
  3123  0636  1903               	skipnz
  3124  0637  2E11               	goto	l6649
  3125  0638  2E39               	goto	l6677
  3126  0639                     l6677:	
  3127                           
  3128                           ;app_key.c: 242: key_brush_pwrtype = KEY_TYPE_IDLE;
  3129  0639  01CC               	clrf	_key_brush_pwrtype
  3130  063A  0008               	return
  3131  063B                     __end_of_handle_key_pwr:	
  3132                           
  3133                           	psect	text22
  3134  0701                     __ptext22:	
  3135 ;; *************** function _app_process_set_mode_next *****************
  3136 ;; Defined at:
  3137 ;;		line 42 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_motor.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;		None
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;		None
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      void 
  3144 ;; Registers used:
  3145 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 100/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMMON   BANK0   BANK1
  3151 ;;      Params:         0       0       0
  3152 ;;      Locals:         0       0       0
  3153 ;;      Temps:          0       0       0
  3154 ;;      Totals:         0       0       0
  3155 ;;Total ram usage:        0 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    5
  3158 ;; This function calls:
  3159 ;;		_app_led_mode_set
  3160 ;;		_app_process_motor_duty
  3161 ;; This function is called by:
  3162 ;;		_handle_key_pwr
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function _app_process_set_mode_next
  3168  0701                     _app_process_set_mode_next:	
  3169  0701  3004               	movlw	4
  3170                           
  3171                           ;app_motor.c: 44: work_mode.mode++;
  3172                           
  3173                           ;incstack = 0
  3174                           ; Regs used in _app_process_set_mode_next: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3175  0702  1283               	bcf	3,5	;RP0=0, select bank0
  3176  0703  0AE6               	incf	_work_mode,f
  3177                           
  3178                           ;app_motor.c: 45: if (work_mode.mode > WORK_MODE_THREE)
  3179  0704  0266               	subwf	_work_mode,w
  3180  0705  1C03               	skipc
  3181  0706  2F09               	goto	l6309
  3182                           
  3183                           ;app_motor.c: 46: {
  3184                           ;app_motor.c: 47: work_mode.mode = WORK_MODE_ONE;
  3185  0707  01E6               	clrf	_work_mode
  3186  0708  0AE6               	incf	_work_mode,f
  3187  0709                     l6309:	
  3188                           
  3189                           ;app_motor.c: 48: }
  3190                           ;app_motor.c: 49: app_timer.work_updown_count = (100UL * (5));
  3191  0709  3001               	movlw	1
  3192  070A  1683               	bsf	3,5	;RP0=1, select bank1
  3193  070B  01B7               	clrf	((_app_timer+3)^(0+128)+2)
  3194  070C  01B6               	clrf	((_app_timer+2)^(0+128)+2)
  3195  070D  00B5               	movwf	((_app_timer+1)^(0+128)+2)
  3196  070E  30F4               	movlw	244
  3197  070F  00B4               	movwf	(_app_timer^(0+128)+2)
  3198                           
  3199                           ;app_motor.c: 50: app_led_mode_set();
  3200  0710  25B8               	fcall	_app_led_mode_set
  3201                           
  3202                           ;app_motor.c: 51: app_process_motor_duty();
  3203  0711  2AF6               	ljmp	l6255
  3204  0712                     __end_of_app_process_set_mode_next:	
  3205                           
  3206                           	psect	text23
  3207  077B                     __ptext23:	
  3208 ;; *************** function _app_process_set_mode_init *****************
  3209 ;; Defined at:
  3210 ;;		line 34 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_motor.c"
  3211 ;; Parameters:    Size  Location     Type
  3212 ;;		None
  3213 ;; Auto vars:     Size  Location     Type
  3214 ;;		None
  3215 ;; Return value:  Size  Location     Type
  3216 ;;                  1    wreg      void 
  3217 ;; Registers used:
  3218 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3219 ;; Tracked objects:
  3220 ;;		On entry : 100/0
  3221 ;;		On exit  : 100/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMMON   BANK0   BANK1
  3224 ;;      Params:         0       0       0
  3225 ;;      Locals:         0       0       0
  3226 ;;      Temps:          0       0       0
  3227 ;;      Totals:         0       0       0
  3228 ;;Total ram usage:        0 bytes
  3229 ;; Hardware stack levels used:    1
  3230 ;; Hardware stack levels required when called:    5
  3231 ;; This function calls:
  3232 ;;		_app_led_mode_set
  3233 ;;		_app_process_motor_duty
  3234 ;; This function is called by:
  3235 ;;		_handle_key_pwr
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           
  3240                           ;psect for function _app_process_set_mode_init
  3241  077B                     _app_process_set_mode_init:	
  3242                           
  3243                           ;app_motor.c: 36: work_mode.mode_out_put = work_mode.mode;
  3244                           
  3245                           ;incstack = 0
  3246                           ; Regs used in _app_process_set_mode_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3247  077B  0866               	movf	_work_mode,w
  3248  077C  00E7               	movwf	_work_mode+1
  3249                           
  3250                           ;app_motor.c: 37: app_timer.work_updown_count = (100UL * (5));
  3251  077D  3001               	movlw	1
  3252  077E  1683               	bsf	3,5	;RP0=1, select bank1
  3253  077F  01B7               	clrf	((_app_timer+3)^(0+128)+2)
  3254  0780  01B6               	clrf	((_app_timer+2)^(0+128)+2)
  3255  0781  00B5               	movwf	((_app_timer+1)^(0+128)+2)
  3256  0782  30F4               	movlw	244
  3257  0783  00B4               	movwf	(_app_timer^(0+128)+2)
  3258                           
  3259                           ;app_motor.c: 38: app_led_mode_set();
  3260  0784  25B8               	fcall	_app_led_mode_set
  3261                           
  3262                           ;app_motor.c: 39: app_process_motor_duty();
  3263  0785  2AF6               	ljmp	l6255
  3264  0786                     __end_of_app_process_set_mode_init:	
  3265                           
  3266                           	psect	text24
  3267  02F6                     __ptext24:	
  3268 ;; *************** function _app_process_motor_duty *****************
  3269 ;; Defined at:
  3270 ;;		line 54 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_motor.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;		None
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3279 ;; Tracked objects:
  3280 ;;		On entry : 100/0
  3281 ;;		On exit  : 100/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMMON   BANK0   BANK1
  3284 ;;      Params:         0       0       0
  3285 ;;      Locals:         0       0       0
  3286 ;;      Temps:          0       6       0
  3287 ;;      Totals:         0       6       0
  3288 ;;Total ram usage:        6 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    3
  3291 ;; This function calls:
  3292 ;;		Nothing
  3293 ;; This function is called by:
  3294 ;;		_app_process_set_mode_init
  3295 ;;		_app_process_set_mode_next
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           
  3300                           ;psect for function _app_process_motor_duty
  3301  02F6                     _app_process_motor_duty:	
  3302  02F6                     l6255:	
  3303                           ;incstack = 0
  3304                           ; Regs used in _app_process_motor_duty: [wreg-fsr0h+status,2+status,0]
  3305                           
  3306                           
  3307                           ;app_motor.c: 56: switch (work_mode.mode)
  3308  02F6  2B0B               	goto	l6265
  3309  02F7                     l6257:	
  3310                           
  3311                           ;app_motor.c: 59: MOTOR_InitStruct.Period = 127;
  3312  02F7  307F               	movlw	127
  3313  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  3314  02F9  00BC               	movwf	_MOTOR_InitStruct^(0+128)
  3315                           
  3316                           ;app_motor.c: 60: MOTOR_InitStruct.DutyLow = 102 / 2;
  3317  02FA  3033               	movlw	51
  3318  02FB  2B05               	goto	L7
  3319  02FC                     l6259:	
  3320                           ;app_motor.c: 63: break;
  3321                           
  3322                           ;app_motor.c: 62: work_mode.mode_out_put = work_mode.mode;
  3323                           
  3324                           ;app_motor.c: 61: MOTOR_InitStruct.DutyHigh = 102 / 2;
  3325                           
  3326                           
  3327                           ;app_motor.c: 65: MOTOR_InitStruct.Period = 98;
  3328  02FC  3062               	movlw	98
  3329  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  3330  02FE  00BC               	movwf	_MOTOR_InitStruct^(0+128)
  3331                           
  3332                           ;app_motor.c: 66: MOTOR_InitStruct.DutyLow = 78 / 2;
  3333  02FF  3027               	movlw	39
  3334  0300  2B05               	goto	L7
  3335  0301                     l6261:	
  3336                           ;app_motor.c: 69: break;
  3337                           
  3338                           ;app_motor.c: 68: work_mode.mode_out_put = work_mode.mode;
  3339                           
  3340                           ;app_motor.c: 67: MOTOR_InitStruct.DutyHigh = 78 / 2;
  3341                           
  3342                           
  3343                           ;app_motor.c: 71: MOTOR_InitStruct.Period = 75;
  3344  0301  304B               	movlw	75
  3345  0302  1683               	bsf	3,5	;RP0=1, select bank1
  3346  0303  00BC               	movwf	_MOTOR_InitStruct^(0+128)
  3347                           
  3348                           ;app_motor.c: 72: MOTOR_InitStruct.DutyLow = 60 /2;
  3349  0304  301E               	movlw	30
  3350  0305                     L7:	
  3351  0305  00BD               	movwf	(_MOTOR_InitStruct^(0+128)+1)
  3352                           
  3353                           ;app_motor.c: 73: MOTOR_InitStruct.DutyHigh = 60 /2;
  3354  0306  00BE               	movwf	(_MOTOR_InitStruct^(0+128)+2)
  3355                           
  3356                           ;app_motor.c: 74: work_mode.mode_out_put = work_mode.mode;
  3357  0307  1283               	bcf	3,5	;RP0=0, select bank0
  3358  0308  0866               	movf	_work_mode,w
  3359  0309  00E7               	movwf	_work_mode+1
  3360                           
  3361                           ;app_motor.c: 75: break;
  3362  030A  2B16               	goto	l6267
  3363  030B                     l6265:	
  3364  030B  0866               	movf	_work_mode,w
  3365                           
  3366                           ; Switch size 1, requested type "space"
  3367                           ; Number of cases is 3, Range of values is 1 to 3
  3368                           ; switch strategies available:
  3369                           ; Name         Instructions Cycles
  3370                           ; simple_byte           10     6 (average)
  3371                           ; direct_byte           12     9 (fixed)
  3372                           ; jumptable            263     9 (fixed)
  3373                           ;	Chosen strategy is simple_byte
  3374  030C  3A01               	xorlw	1	; case 1
  3375  030D  1903               	skipnz
  3376  030E  2AF7               	goto	l6257
  3377  030F  3A03               	xorlw	3	; case 2
  3378  0310  1903               	skipnz
  3379  0311  2AFC               	goto	l6259
  3380  0312  3A01               	xorlw	1	; case 3
  3381  0313  1903               	skipnz
  3382  0314  2B01               	goto	l6261
  3383  0315  2B16               	goto	l6267
  3384  0316                     l6267:	
  3385                           
  3386                           ;app_motor.c: 80: low_a = (MOTOR_InitStruct.DutyLow);
  3387  0316  1683               	bsf	3,5	;RP0=1, select bank1
  3388  0317  083D               	movf	(_MOTOR_InitStruct^(0+128)+1),w
  3389  0318  1283               	bcf	3,5	;RP0=0, select bank0
  3390  0319  00C3               	movwf	_low_a
  3391                           
  3392                           ;app_motor.c: 81: dead_area1 = (MOTOR_InitStruct.Period);
  3393  031A  1683               	bsf	3,5	;RP0=1, select bank1
  3394  031B  083C               	movf	_MOTOR_InitStruct^(0+128),w
  3395  031C  1283               	bcf	3,5	;RP0=0, select bank0
  3396  031D  00C2               	movwf	_dead_area1
  3397                           
  3398                           ;app_motor.c: 83: dead_area_b1 = MOTOR_InitStruct.DutyLow + (((MOTOR_InitStruct.Period -
      +                           MOTOR_InitStruct.DutyLow) - MOTOR_InitStruct.DutyHigh) >> 1);
  3399  031E  1683               	bsf	3,5	;RP0=1, select bank1
  3400  031F  083C               	movf	_MOTOR_InitStruct^(0+128),w
  3401  0320  1283               	bcf	3,5	;RP0=0, select bank0
  3402  0321  00D3               	movwf	??_app_process_motor_duty
  3403  0322  01D4               	clrf	??_app_process_motor_duty+1
  3404  0323  0854               	movf	??_app_process_motor_duty+1,w
  3405  0324  00D6               	movwf	??_app_process_motor_duty+3
  3406  0325  1683               	bsf	3,5	;RP0=1, select bank1
  3407  0326  083D               	movf	(_MOTOR_InitStruct^(0+128)+1),w
  3408  0327  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0328  0253               	subwf	??_app_process_motor_duty,w
  3410  0329  00D5               	movwf	??_app_process_motor_duty+2
  3411  032A  1C03               	skipc
  3412  032B  03D6               	decf	??_app_process_motor_duty+3,f
  3413  032C  0856               	movf	??_app_process_motor_duty+3,w
  3414  032D  00D8               	movwf	??_app_process_motor_duty+5
  3415  032E  1683               	bsf	3,5	;RP0=1, select bank1
  3416  032F  083E               	movf	(_MOTOR_InitStruct^(0+128)+2),w
  3417  0330  1283               	bcf	3,5	;RP0=0, select bank0
  3418  0331  0255               	subwf	??_app_process_motor_duty+2,w
  3419  0332  00D7               	movwf	??_app_process_motor_duty+4
  3420  0333  1C03               	skipc
  3421  0334  03D8               	decf	??_app_process_motor_duty+5,f
  3422  0335  0D58               	rlf	??_app_process_motor_duty+5,w
  3423  0336  0CD8               	rrf	??_app_process_motor_duty+5,f
  3424  0337  0CD7               	rrf	??_app_process_motor_duty+4,f
  3425  0338  1683               	bsf	3,5	;RP0=1, select bank1
  3426  0339  083D               	movf	(_MOTOR_InitStruct^(0+128)+1),w
  3427  033A  1283               	bcf	3,5	;RP0=0, select bank0
  3428  033B  0757               	addwf	??_app_process_motor_duty+4,w
  3429  033C  00C0               	movwf	_dead_area_b1
  3430                           
  3431                           ;app_motor.c: 84: low_b = MOTOR_InitStruct.DutyHigh + dead_area_b1;
  3432  033D  1683               	bsf	3,5	;RP0=1, select bank1
  3433  033E  073E               	addwf	(_MOTOR_InitStruct^(0+128)+2),w
  3434  033F  1283               	bcf	3,5	;RP0=0, select bank0
  3435  0340  00C1               	movwf	_low_b
  3436                           
  3437                           ;app_motor.c: 85: dead_area_b2 = (MOTOR_InitStruct.Period);
  3438  0341  1683               	bsf	3,5	;RP0=1, select bank1
  3439  0342  083C               	movf	_MOTOR_InitStruct^(0+128),w
  3440  0343  1283               	bcf	3,5	;RP0=0, select bank0
  3441  0344  00BF               	movwf	_dead_area_b2
  3442  0345  0008               	return
  3443  0346                     __end_of_app_process_motor_duty:	
  3444                           
  3445                           	psect	text25
  3446  05B8                     __ptext25:	
  3447 ;; *************** function _app_led_mode_set *****************
  3448 ;; Defined at:
  3449 ;;		line 147 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_led.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;		None
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      void 
  3456 ;; Registers used:
  3457 ;;		wreg, status,2, status,0, pclath, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 100/100
  3460 ;;		On exit  : 100/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMMON   BANK0   BANK1
  3463 ;;      Params:         0       0       0
  3464 ;;      Locals:         0       0       0
  3465 ;;      Temps:          0       0       0
  3466 ;;      Totals:         0       0       0
  3467 ;;Total ram usage:        0 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    4
  3470 ;; This function calls:
  3471 ;;		_set_led_state
  3472 ;; This function is called by:
  3473 ;;		_app_process_set_mode_init
  3474 ;;		_app_process_set_mode_next
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           
  3479                           ;psect for function _app_led_mode_set
  3480  05B8                     _app_led_mode_set:	
  3481                           
  3482                           ;app_led.c: 149: if (work_mode.mode == WORK_MODE_ONE)
  3483                           
  3484                           ;incstack = 0
  3485                           ; Regs used in _app_led_mode_set: [wreg+status,2+status,0+pclath+cstack]
  3486  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  3487  05B9  0B66               	decfsz	_work_mode,w
  3488  05BA  2DC6               	goto	l6247
  3489                           
  3490                           ;app_led.c: 150: {
  3491                           ;app_led.c: 151: set_led_state(LED_INDEX_2 | LED_INDEX_3, LED_STATE_OFF);
  3492  05BB  3006               	movlw	6
  3493  05BC  00D3               	movwf	set_led_state@index
  3494  05BD  01D4               	clrf	set_led_state@index+1
  3495  05BE  01D5               	clrf	set_led_state@state
  3496  05BF  25E4               	fcall	_set_led_state
  3497                           
  3498                           ;app_led.c: 152: set_led_state(LED_INDEX_1, LED_STATE_ON);
  3499  05C0  01D3               	clrf	set_led_state@index
  3500  05C1  0AD3               	incf	set_led_state@index,f
  3501  05C2  01D4               	clrf	set_led_state@index+1
  3502  05C3  01D5               	clrf	set_led_state@state
  3503  05C4  0AD5               	incf	set_led_state@state,f
  3504  05C5  2DE4               	ljmp	l6217
  3505  05C6                     l6247:	
  3506                           ;app_led.c: 153: }
  3507                           
  3508                           
  3509                           ;app_led.c: 154: else if (work_mode.mode == WORK_MODE_TWO)
  3510  05C6  3002               	movlw	2
  3511  05C7  0666               	xorwf	_work_mode,w
  3512  05C8  1D03               	btfss	3,2
  3513  05C9  2DD5               	goto	l6251
  3514                           
  3515                           ;app_led.c: 155: {
  3516                           ;app_led.c: 156: set_led_state(LED_INDEX_1 | LED_INDEX_3, LED_STATE_OFF);
  3517  05CA  3005               	movlw	5
  3518  05CB  00D3               	movwf	set_led_state@index
  3519  05CC  01D4               	clrf	set_led_state@index+1
  3520  05CD  01D5               	clrf	set_led_state@state
  3521  05CE  25E4               	fcall	_set_led_state
  3522                           
  3523                           ;app_led.c: 157: set_led_state(LED_INDEX_2, LED_STATE_ON);
  3524  05CF  3002               	movlw	2
  3525  05D0  00D3               	movwf	set_led_state@index
  3526  05D1  01D4               	clrf	set_led_state@index+1
  3527  05D2  01D5               	clrf	set_led_state@state
  3528  05D3  0AD5               	incf	set_led_state@state,f
  3529  05D4  2DE4               	ljmp	l6217
  3530  05D5                     l6251:	
  3531                           ;app_led.c: 158: }
  3532                           
  3533                           
  3534                           ;app_led.c: 159: else if (work_mode.mode == WORK_MODE_THREE)
  3535  05D5  3003               	movlw	3
  3536  05D6  0666               	xorwf	_work_mode,w
  3537  05D7  1D03               	btfss	3,2
  3538  05D8  0008               	return
  3539                           
  3540                           ;app_led.c: 160: {
  3541                           ;app_led.c: 161: set_led_state(LED_INDEX_1 | LED_INDEX_2, LED_STATE_OFF);
  3542  05D9  3003               	movlw	3
  3543  05DA  00D3               	movwf	set_led_state@index
  3544  05DB  01D4               	clrf	set_led_state@index+1
  3545  05DC  01D5               	clrf	set_led_state@state
  3546  05DD  25E4               	fcall	_set_led_state
  3547                           
  3548                           ;app_led.c: 162: set_led_state(LED_INDEX_3, LED_STATE_ON);
  3549  05DE  3004               	movlw	4
  3550  05DF  00D3               	movwf	set_led_state@index
  3551  05E0  01D4               	clrf	set_led_state@index+1
  3552  05E1  01D5               	clrf	set_led_state@state
  3553  05E2  0AD5               	incf	set_led_state@state,f
  3554  05E3  2DE4               	ljmp	l6217
  3555  05E4                     __end_of_app_led_mode_set:	
  3556                           
  3557                           	psect	text26
  3558  06BE                     __ptext26:	
  3559 ;; *************** function _charge_or_lowBat_check *****************
  3560 ;; Defined at:
  3561 ;;		line 141 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_key.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;		None
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;		None
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      void 
  3568 ;; Registers used:
  3569 ;;		wreg, status,2, status,0
  3570 ;; Tracked objects:
  3571 ;;		On entry : 100/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1
  3575 ;;      Params:         0       0       0
  3576 ;;      Locals:         0       0       0
  3577 ;;      Temps:          0       0       0
  3578 ;;      Totals:         0       0       0
  3579 ;;Total ram usage:        0 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    3
  3582 ;; This function calls:
  3583 ;;		Nothing
  3584 ;; This function is called by:
  3585 ;;		_app_process_key
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           
  3590                           ;psect for function _charge_or_lowBat_check
  3591  06BE                     _charge_or_lowBat_check:	
  3592                           
  3593                           ;app_key.c: 143: if (app_charge.Charge)
  3594                           
  3595                           ;incstack = 0
  3596                           ; Regs used in _charge_or_lowBat_check: [wreg+status,2+status,0]
  3597  06BE  1683               	bsf	3,5	;RP0=1, select bank1
  3598  06BF  1C20               	btfss	_app_charge^(0+128),0
  3599  06C0  2EC2               	goto	l6637
  3600                           
  3601                           ;app_key.c: 144: {
  3602                           ;app_key.c: 157: key_brush_pwrtype = KEY_TYPE_IDLE;
  3603                           
  3604                           ;app_key.c: 158: key_water_pwr_type = KEY_TYPE_IDLE;
  3605                           
  3606                           ;app_key.c: 159: key_water_mode_type = KEY_TYPE_IDLE;
  3607                           
  3608                           ;app_key.c: 160: }
  3609  06C1  2ED3               	ljmp	PL8	;call to abstracted procedure
  3610  06C2                     l6637:	
  3611                           
  3612                           ;app_key.c: 161: else if (app_charge.LowPower)
  3613  06C2  0826               	movf	(_app_charge^(0+128)+6),w
  3614  06C3  1903               	btfsc	3,2
  3615  06C4  0008               	return
  3616                           
  3617                           ;app_key.c: 162: {
  3618                           ;app_key.c: 163: if (key_brush_pwrtype || key_water_pwr_type || key_water_mode_type)
  3619  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  3620  06C6  084C               	movf	_key_brush_pwrtype,w
  3621  06C7  1D03               	btfss	3,2
  3622  06C8  2ECE               	goto	l1620
  3623  06C9  084B               	movf	_key_water_pwr_type,w
  3624  06CA  1903               	btfsc	3,2
  3625  06CB  084A               	movf	_key_water_mode_type,w
  3626  06CC  1903               	btfsc	3,2
  3627  06CD  0008               	return
  3628  06CE                     l1620:	
  3629                           
  3630                           ;app_key.c: 164: {
  3631                           ;app_key.c: 165: app_charge.LowLed = 1;
  3632  06CE  1683               	bsf	3,5	;RP0=1, select bank1
  3633  06CF  01A7               	clrf	(_app_charge^(0+128)+7)
  3634  06D0  0AA7               	incf	(_app_charge^(0+128)+7),f
  3635                           
  3636                           ;app_key.c: 166: app_charge.LowLed_cnt = 0;
  3637  06D1  01A8               	clrf	(_app_charge^(0+128)+8)
  3638                           
  3639                           ;app_key.c: 167: key_brush_pwrtype = KEY_TYPE_IDLE;
  3640                           
  3641                           ;app_key.c: 168: key_water_pwr_type = KEY_TYPE_IDLE;
  3642                           
  3643                           ;app_key.c: 169: key_water_mode_type = KEY_TYPE_IDLE;
  3644  06D2  2ED3               	ljmp	PL8	;call to abstracted procedure
  3645  06D3                     __end_of_charge_or_lowBat_check:	
  3646  06D3                     PL8:	
  3647  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  3648  06D4  01CC               	clrf	_key_brush_pwrtype
  3649  06D5  01CB               	clrf	_key_water_pwr_type
  3650  06D6  01CA               	clrf	_key_water_mode_type
  3651  06D7  0008               	return
  3652  06D8                     __end_ofPL8:	
  3653                           
  3654                           	psect	text27
  3655  0712                     __ptext27:	
  3656 ;; *************** function _app_process_go_to_sleep *****************
  3657 ;; Defined at:
  3658 ;;		line 86 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_process.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;		None
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      void 
  3665 ;; Registers used:
  3666 ;;		wreg, status,2, status,0, pclath, cstack
  3667 ;; Tracked objects:
  3668 ;;		On entry : 100/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMMON   BANK0   BANK1
  3672 ;;      Params:         0       0       0
  3673 ;;      Locals:         0       0       0
  3674 ;;      Temps:          0       0       0
  3675 ;;      Totals:         0       0       0
  3676 ;;Total ram usage:        0 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    5
  3679 ;; This function calls:
  3680 ;;		_GotoSleep
  3681 ;; This function is called by:
  3682 ;;		_main
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           
  3687                           ;psect for function _app_process_go_to_sleep
  3688  0712                     _app_process_go_to_sleep:	
  3689                           
  3690                           ;app_process.c: 88: if (app_work_state == WORK_STATE_POWEROFF && water_work_state == WAT
      +                          ER_WORK_STATE_POWEROFF && !app_charge.flag_remind_delay_10s && !app_charge.LowLed)
  3691                           
  3692                           ;incstack = 0
  3693                           ; Regs used in _app_process_go_to_sleep: [wreg+status,2+status,0+pclath+cstack]
  3694  0712  086D               	movf	_app_work_state,w	;volatile
  3695  0713  1D03               	btfss	3,2
  3696  0714  2F20               	goto	l7073
  3697  0715  086C               	movf	_water_work_state,w	;volatile
  3698  0716  1D03               	btfss	3,2
  3699  0717  2F20               	goto	l7073
  3700  0718  1683               	bsf	3,5	;RP0=1, select bank1
  3701  0719  0822               	movf	(_app_charge^(0+128)+2),w
  3702  071A  1D03               	btfss	3,2
  3703  071B  2F20               	goto	l7073
  3704  071C  0827               	movf	(_app_charge^(0+128)+7),w
  3705  071D  1D03               	btfss	3,2
  3706  071E  2F20               	goto	l7073
  3707                           
  3708                           ;app_process.c: 89: {
  3709                           ;app_process.c: 90: GotoSleep();
  3710  071F  2BD5               	ljmp	l6769
  3711  0720                     l7073:	
  3712                           ;app_process.c: 91: }
  3713                           
  3714                           
  3715                           ;app_process.c: 92: else
  3716                           ;app_process.c: 93: {
  3717                           ;app_process.c: 94: CntSleep = 0;
  3718  0720  1283               	bcf	3,5	;RP0=0, select bank0
  3719  0721  01C5               	clrf	_CntSleep
  3720  0722  0008               	return
  3721  0723                     __end_of_app_process_go_to_sleep:	
  3722                           
  3723                           	psect	text28
  3724  03D5                     __ptext28:	
  3725 ;; *************** function _GotoSleep *****************
  3726 ;; Defined at:
  3727 ;;		line 139 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\main.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;		None
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;		None
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg, status,2, status,0, pclath, cstack
  3736 ;; Tracked objects:
  3737 ;;		On entry : 100/100
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMMON   BANK0   BANK1
  3741 ;;      Params:         0       0       0
  3742 ;;      Locals:         0       0       0
  3743 ;;      Temps:          0       0       0
  3744 ;;      Totals:         0       0       0
  3745 ;;Total ram usage:        0 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    4
  3748 ;; This function calls:
  3749 ;;		_AdcConfig
  3750 ;;		_ChargePwmOut
  3751 ;;		_PortInit
  3752 ;; This function is called by:
  3753 ;;		_app_process_go_to_sleep
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           
  3758                           ;psect for function _GotoSleep
  3759  03D5                     _GotoSleep:	
  3760  03D5                     l6769:	
  3761                           ;incstack = 0
  3762                           ; Regs used in _GotoSleep: [wreg+status,2+status,0+pclath+cstack]
  3763                           
  3764                           
  3765                           ;main.c: 141: if (RB2 && RB0 && RB1)
  3766  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  3767  03D6  1906               	btfsc	6,2	;volatile
  3768  03D7  1C06               	btfss	6,0	;volatile
  3769  03D8  2C10               	goto	l6827
  3770  03D9  1C86               	btfss	6,1	;volatile
  3771  03DA  2C10               	goto	l6827
  3772  03DB  30C8               	movlw	200
  3773                           
  3774                           ;main.c: 142: {
  3775                           ;main.c: 144: CntSleep++;
  3776  03DC  0AC5               	incf	_CntSleep,f
  3777                           
  3778                           ;main.c: 145: if (CntSleep >= 200)
  3779  03DD  0245               	subwf	_CntSleep,w
  3780  03DE  1C03               	skipc
  3781  03DF  0008               	return
  3782                           
  3783                           ;main.c: 146: {
  3784                           ;main.c: 147: CntSleep = 0;
  3785  03E0  01C5               	clrf	_CntSleep
  3786                           
  3787                           ;main.c: 149: ADCON0 = 0b00000000;
  3788  03E1  019F               	clrf	31	;volatile
  3789                           
  3790                           ;main.c: 150: ADCON1 = 0b00000000;
  3791  03E2  1683               	bsf	3,5	;RP0=1, select bank1
  3792  03E3  019F               	clrf	31	;volatile
  3793                           
  3794                           ;main.c: 152: SWDTEN = 0;
  3795  03E4  1008               	bcf	8,0	;volatile
  3796                           
  3797                           ;main.c: 153: WDTCON = 0x00;
  3798  03E5  0188               	clrf	8	;volatile
  3799                           
  3800                           ;main.c: 155: GIE = 0;
  3801  03E6  138B               	bcf	11,7	;volatile
  3802                           
  3803                           ;main.c: 156: TRISB = 0b00010111;
  3804  03E7  3017               	movlw	23
  3805  03E8  0086               	movwf	6	;volatile
  3806                           
  3807                           ;main.c: 157: WPUB = 0b00000111;
  3808  03E9  3007               	movlw	7
  3809  03EA  0095               	movwf	21	;volatile
  3810                           
  3811                           ;main.c: 158: TRISA = 0b00000000;
  3812  03EB  0185               	clrf	5	;volatile
  3813                           
  3814                           ;main.c: 159: PORTA = 0b00000000;
  3815  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  3816  03ED  0185               	clrf	5	;volatile
  3817                           
  3818                           ;main.c: 160: ChargePwmOut(0);
  3819  03EE  3000               	movlw	0
  3820  03EF  2734               	fcall	_ChargePwmOut
  3821                           
  3822                           ;main.c: 162: ANSELH = 0b00000000;
  3823  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  3824  03F1  0194               	clrf	20	;volatile
  3825                           
  3826                           ;main.c: 165: IOCA = 0b00000000;
  3827  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  3828  03F3  0189               	clrf	9	;volatile
  3829                           
  3830                           ;main.c: 166: IOCB = 0b00010111;
  3831  03F4  3017               	movlw	23
  3832  03F5  1683               	bsf	3,5	;RP0=1, select bank1
  3833  03F6  0096               	movwf	22	;volatile
  3834                           
  3835                           ;main.c: 168: RAIE = 1;
  3836  03F7  158C               	bsf	12,3	;volatile
  3837                           
  3838                           ;main.c: 169: RBIE = 1;
  3839  03F8  158B               	bsf	11,3	;volatile
  3840                           
  3841                           ;main.c: 170: PEIE = 1;
  3842  03F9  170B               	bsf	11,6	;volatile
  3843                           
  3844                           ;main.c: 172: RAIF = 0;
  3845  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  3846  03FB  118C               	bcf	12,3	;volatile
  3847                           
  3848                           ;main.c: 173: PORTA;
  3849  03FC  0805               	movf	5,w	;volatile
  3850                           
  3851                           ;main.c: 174: RBIF = 0;
  3852  03FD  100B               	bcf	11,0	;volatile
  3853                           
  3854                           ;main.c: 175: PORTB;
  3855  03FE  0806               	movf	6,w	;volatile
  3856  03FF  0064               	clrwdt	;# 
  3857  0400  0063               	sleep	;# 
  3858  0401  0000               	nop	;# 
  3859  0402  0000               	nop	;# 
  3860  0403  0000               	nop	;# 
  3861                           
  3862                           ;main.c: 184: ADON = 1;
  3863  0404  1283               	bcf	3,5	;RP0=0, select bank0
  3864  0405  141F               	bsf	31,0	;volatile
  3865                           
  3866                           ;main.c: 186: SWDTEN = 1;
  3867  0406  1683               	bsf	3,5	;RP0=1, select bank1
  3868  0407  1408               	bsf	8,0	;volatile
  3869                           
  3870                           ;main.c: 188: IOCB = 0x00;
  3871  0408  0196               	clrf	22	;volatile
  3872                           
  3873                           ;main.c: 189: IOCA = 0x00;
  3874  0409  1283               	bcf	3,5	;RP0=0, select bank0
  3875  040A  0189               	clrf	9	;volatile
  3876                           
  3877                           ;main.c: 191: GIE = 1;
  3878  040B  178B               	bsf	11,7	;volatile
  3879                           
  3880                           ;main.c: 193: SWDTEN = 1;
  3881  040C  1683               	bsf	3,5	;RP0=1, select bank1
  3882  040D  1408               	bsf	8,0	;volatile
  3883                           
  3884                           ;main.c: 194: AdcConfig();
  3885  040E  27CE               	fcall	_AdcConfig
  3886                           
  3887                           ;main.c: 195: PortInit();
  3888  040F  2F23               	ljmp	l6369
  3889  0410                     l6827:	
  3890                           
  3891                           ;main.c: 198: else
  3892                           ;main.c: 199: {
  3893                           ;main.c: 200: CntSleep = 0;
  3894  0410  01C5               	clrf	_CntSleep
  3895  0411  0008               	return
  3896  0412                     __end_of_GotoSleep:	
  3897                           
  3898                           	psect	text29
  3899  0723                     __ptext29:	
  3900 ;; *************** function _PortInit *****************
  3901 ;; Defined at:
  3902 ;;		line 25 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\main.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;		None
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      void 
  3909 ;; Registers used:
  3910 ;;		wreg, status,2
  3911 ;; Tracked objects:
  3912 ;;		On entry : 100/100
  3913 ;;		On exit  : 100/100
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMMON   BANK0   BANK1
  3916 ;;      Params:         0       0       0
  3917 ;;      Locals:         0       0       0
  3918 ;;      Temps:          0       0       0
  3919 ;;      Totals:         0       0       0
  3920 ;;Total ram usage:        0 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    3
  3923 ;; This function calls:
  3924 ;;		Nothing
  3925 ;; This function is called by:
  3926 ;;		_main
  3927 ;;		_GotoSleep
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           
  3932                           ;psect for function _PortInit
  3933  0723                     _PortInit:	
  3934  0723                     l6369:	
  3935                           ;incstack = 0
  3936                           ; Regs used in _PortInit: [wreg+status,2]
  3937                           
  3938                           
  3939                           ;main.c: 27: TRISA = 0b00000000;
  3940  0723  0185               	clrf	5	;volatile
  3941                           
  3942                           ;main.c: 28: PORTA = 0b00000000;
  3943  0724  1283               	bcf	3,5	;RP0=0, select bank0
  3944  0725  0185               	clrf	5	;volatile
  3945                           
  3946                           ;main.c: 29: WPUA = 0b00000000;
  3947  0726  0187               	clrf	7	;volatile
  3948                           
  3949                           ;main.c: 30: IOCA = 0b00000000;
  3950  0727  0189               	clrf	9	;volatile
  3951                           
  3952                           ;main.c: 32: TRISB = 0b00010111;
  3953  0728  3017               	movlw	23
  3954  0729  1683               	bsf	3,5	;RP0=1, select bank1
  3955  072A  0086               	movwf	6	;volatile
  3956                           
  3957                           ;main.c: 33: PORTB = 0b00000000;
  3958  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3959  072C  0186               	clrf	6	;volatile
  3960                           
  3961                           ;main.c: 34: ANSELH = 0b00010000;
  3962  072D  3010               	movlw	16
  3963  072E  1683               	bsf	3,5	;RP0=1, select bank1
  3964  072F  0094               	movwf	20	;volatile
  3965                           
  3966                           ;main.c: 35: WPUB = 0b00000111;
  3967  0730  3007               	movlw	7
  3968  0731  0095               	movwf	21	;volatile
  3969                           
  3970                           ;main.c: 36: IOCB = 0b00000000;
  3971  0732  0196               	clrf	22	;volatile
  3972  0733  0008               	return
  3973  0734                     __end_of_PortInit:	
  3974                           
  3975                           	psect	text30
  3976  07CE                     __ptext30:	
  3977 ;; *************** function _AdcConfig *****************
  3978 ;; Defined at:
  3979 ;;		line 69 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\main.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;		None
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  1    wreg      void 
  3986 ;; Registers used:
  3987 ;;		wreg, status,2
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 100/100
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMMON   BANK0   BANK1
  3993 ;;      Params:         0       0       0
  3994 ;;      Locals:         0       0       0
  3995 ;;      Temps:          0       0       0
  3996 ;;      Totals:         0       0       0
  3997 ;;Total ram usage:        0 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    3
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_main
  4004 ;;		_GotoSleep
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           
  4009                           ;psect for function _AdcConfig
  4010  07CE                     _AdcConfig:	
  4011                           
  4012                           ;main.c: 71: ADCON0 = 0b00111101;
  4013                           
  4014                           ;incstack = 0
  4015                           ; Regs used in _AdcConfig: [wreg+status,2]
  4016  07CE  303D               	movlw	61
  4017  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  4018  07D0  009F               	movwf	31	;volatile
  4019                           
  4020                           ;main.c: 72: ADCON1 = 0b00000000;
  4021  07D1  1683               	bsf	3,5	;RP0=1, select bank1
  4022  07D2  019F               	clrf	31	;volatile
  4023  07D3  0008               	return
  4024  07D4                     __end_of_AdcConfig:	
  4025                           
  4026                           	psect	text31
  4027  07E3                     __ptext31:	
  4028 ;; *************** function _app_process_charge *****************
  4029 ;; Defined at:
  4030 ;;		line 244 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_charge.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      void 
  4037 ;; Registers used:
  4038 ;;		wreg, status,2, status,0, pclath, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMMON   BANK0   BANK1
  4044 ;;      Params:         0       0       0
  4045 ;;      Locals:         0       0       0
  4046 ;;      Temps:          0       0       0
  4047 ;;      Totals:         0       0       0
  4048 ;;Total ram usage:        0 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    6
  4051 ;; This function calls:
  4052 ;;		_Charge_Check
  4053 ;; This function is called by:
  4054 ;;		_main
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           
  4059                           ;psect for function _app_process_charge
  4060  07E3                     _app_process_charge:	
  4061                           
  4062                           ;app_charge.c: 246: Charge_Check();
  4063                           
  4064                           ;incstack = 0
  4065                           ; Regs used in _app_process_charge: [wreg+status,2+status,0+pclath+cstack]
  4066  07E3  282E               	ljmp	l6441
  4067  07E4                     __end_of_app_process_charge:	
  4068                           
  4069                           	psect	text32
  4070  002E                     __ptext32:	
  4071 ;; *************** function _Charge_Check *****************
  4072 ;; Defined at:
  4073 ;;		line 56 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_charge.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;		None
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0, pclath, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1
  4087 ;;      Params:         0       0       0
  4088 ;;      Locals:         0       0       0
  4089 ;;      Temps:          0       1       0
  4090 ;;      Totals:         0       1       0
  4091 ;;Total ram usage:        1 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    5
  4094 ;; This function calls:
  4095 ;;		_AdcResultChk
  4096 ;;		_ChargePwmOut
  4097 ;;		_app_process_set_work_state
  4098 ;;		_set_led_state
  4099 ;; This function is called by:
  4100 ;;		_app_process_charge
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           
  4105                           ;psect for function _Charge_Check
  4106  002E                     _Charge_Check:	
  4107  002E                     l6441:	
  4108                           ;incstack = 0
  4109                           ; Regs used in _Charge_Check: [wreg+status,2+status,0+pclath+cstack]
  4110                           
  4111                           
  4112                           ;app_charge.c: 58: ADCON0 = 0b00110001;
  4113  002E  3031               	movlw	49
  4114  002F  1283               	bcf	3,5	;RP0=0, select bank0
  4115  0030  009F               	movwf	31	;volatile
  4116                           
  4117                           ;app_charge.c: 59: _delay((unsigned long)((20)*(16000000UL/4000000.0)));
  4118  0031  301A               	movlw	26
  4119  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4120  0033  00E0               	movwf	??_Charge_Check
  4121  0034                     u3087:	
  4122  0034  0BE0               	decfsz	??_Charge_Check,f
  4123  0035  2834               	goto	u3087
  4124                           
  4125                           ;app_charge.c: 60: ADCON1 = 0b00000100;
  4126  0036  3004               	movlw	4
  4127  0037  1683               	bsf	3,5	;RP0=1, select bank1
  4128  0038  009F               	movwf	31	;volatile
  4129                           
  4130                           ;app_charge.c: 61: _delay((unsigned long)((20)*(16000000UL/4000000.0)));
  4131  0039  301A               	movlw	26
  4132  003A  1283               	bcf	3,5	;RP0=0, select bank0
  4133  003B  00E0               	movwf	??_Charge_Check
  4134  003C                     u3097:	
  4135  003C  0BE0               	decfsz	??_Charge_Check,f
  4136  003D  283C               	goto	u3097
  4137                           
  4138                           ;app_charge.c: 62: adresult_chagrge_vdd = AdcResultChk(4,12);
  4139  003E  300C               	movlw	12
  4140  003F  1283               	bcf	3,5	;RP0=0, select bank0
  4141  0040  00D9               	movwf	AdcResultChk@adldo
  4142  0041  3004               	movlw	4
  4143  0042  2761               	fcall	_AdcResultChk
  4144  0043  085A               	movf	?_AdcResultChk+1,w
  4145  0044  00B7               	movwf	_adresult_chagrge_vdd+1	;volatile
  4146  0045  0859               	movf	?_AdcResultChk,w
  4147  0046  00B6               	movwf	_adresult_chagrge_vdd	;volatile
  4148                           
  4149                           ;app_charge.c: 75: if (adresult_chagrge_vdd < 1300)
  4150  0047  3005               	movlw	5
  4151  0048  0237               	subwf	_adresult_chagrge_vdd+1,w	;volatile
  4152  0049  3014               	movlw	20
  4153  004A  1903               	skipnz
  4154  004B  0236               	subwf	_adresult_chagrge_vdd,w	;volatile
  4155  004C  1803               	skipnc
  4156  004D  2869               	goto	l6467
  4157                           
  4158                           ;app_charge.c: 76: {
  4159                           ;app_charge.c: 77: if (!flag_charge_once)
  4160  004E  1B7B               	btfsc	_flag_charge_once/(0+8),_flag_charge_once& (0+7)
  4161  004F  286C               	goto	l6469
  4162                           
  4163                           ;app_charge.c: 78: {
  4164                           ;app_charge.c: 79: app_charge.DisChargeCnt++;
  4165  0050  1683               	bsf	3,5	;RP0=1, select bank1
  4166  0051  0AAB               	incf	(_app_charge^(0+128)+11),f
  4167  0052  1903               	skipnz
  4168  0053  0AAC               	incf	((_app_charge+1)^(0+128)+11),f
  4169                           
  4170                           ;app_charge.c: 80: if(app_charge.DisChargeCnt >= ((500) / 10))
  4171  0054  3000               	movlw	0
  4172  0055  022C               	subwf	((_app_charge+1)^(0+128)+11),w
  4173  0056  3032               	movlw	50
  4174  0057  1903               	skipnz
  4175  0058  022B               	subwf	(_app_charge^(0+128)+11),w
  4176  0059  1C03               	skipc
  4177  005A  286C               	goto	l6469
  4178  005B  3003               	movlw	3
  4179                           
  4180                           ;app_charge.c: 81: {
  4181                           ;app_charge.c: 82: flag_charge_once = 1;
  4182  005C  177B               	bsf	_flag_charge_once/(0+8),_flag_charge_once& (0+7)
  4183                           
  4184                           ;app_charge.c: 83: flag_discharge_once = 0;
  4185  005D  12FB               	bcf	_flag_discharge_once/(0+8),_flag_discharge_once& (0+7)
  4186                           
  4187                           ;app_charge.c: 85: app_charge.DisChargeCnt = 0;
  4188  005E  01AB               	clrf	(_app_charge^(0+128)+11)
  4189  005F  01AC               	clrf	((_app_charge+1)^(0+128)+11)
  4190                           
  4191                           ;app_charge.c: 86: app_charge.Charge = 0;
  4192  0060  1020               	bcf	_app_charge^(0+128),0
  4193                           
  4194                           ;app_charge.c: 87: app_charge.FullCharge = 0;
  4195  0061  10A0               	bcf	_app_charge^(0+128),1
  4196                           
  4197                           ;app_charge.c: 88: set_led_state(LED_INDEX_9 | LED_INDEX_10,LED_STATE_OFF);
  4198  0062  2134               	fcall	PL12	;call to abstracted procedure
  4199  0063  25E4               	fcall	_set_led_state
  4200                           
  4201                           ;app_charge.c: 89: ChargePwmOut(0);
  4202  0064  3000               	movlw	0
  4203  0065  2734               	fcall	_ChargePwmOut
  4204                           
  4205                           ;app_charge.c: 90: app_process_set_work_state(WORK_STATE_POWEROFF);
  4206  0066  3000               	movlw	0
  4207  0067  27D4               	fcall	_app_process_set_work_state
  4208  0068  286C               	goto	l6469
  4209  0069                     l6467:	
  4210                           
  4211                           ;app_charge.c: 94: else
  4212                           ;app_charge.c: 95: {
  4213                           ;app_charge.c: 96: app_charge.DisChargeCnt = 0;
  4214  0069  1683               	bsf	3,5	;RP0=1, select bank1
  4215  006A  01AB               	clrf	(_app_charge^(0+128)+11)
  4216  006B  01AC               	clrf	((_app_charge+1)^(0+128)+11)
  4217  006C                     l6469:	
  4218                           
  4219                           ;app_charge.c: 97: }
  4220                           ;app_charge.c: 98: if (adresult_chagrge_vdd > 1700)
  4221  006C  3006               	movlw	6
  4222  006D  1283               	bcf	3,5	;RP0=0, select bank0
  4223  006E  0237               	subwf	_adresult_chagrge_vdd+1,w	;volatile
  4224  006F  30A5               	movlw	165
  4225  0070  1903               	skipnz
  4226  0071  0236               	subwf	_adresult_chagrge_vdd,w	;volatile
  4227  0072  1C03               	skipc
  4228  0073  2891               	goto	l6487
  4229                           
  4230                           ;app_charge.c: 99: {
  4231                           ;app_charge.c: 100: if (!flag_discharge_once)
  4232  0074  1AFB               	btfsc	_flag_discharge_once/(0+8),_flag_discharge_once& (0+7)
  4233  0075  2894               	goto	l6489
  4234                           
  4235                           ;app_charge.c: 101: {
  4236                           ;app_charge.c: 102: if (app_charge.ChargeCnt <= ((100) / 10))
  4237  0076  3000               	movlw	0
  4238  0077  1683               	bsf	3,5	;RP0=1, select bank1
  4239  0078  022A               	subwf	((_app_charge+1)^(0+128)+9),w
  4240  0079  300B               	movlw	11
  4241  007A  1903               	skipnz
  4242  007B  0229               	subwf	(_app_charge^(0+128)+9),w
  4243  007C  1803               	skipnc
  4244  007D  2882               	goto	l1046
  4245                           
  4246                           ;app_charge.c: 103: {
  4247                           ;app_charge.c: 104: app_charge.ChargeCnt++;
  4248  007E  0AA9               	incf	(_app_charge^(0+128)+9),f
  4249  007F  1903               	skipnz
  4250  0080  0AAA               	incf	((_app_charge+1)^(0+128)+9),f
  4251                           
  4252                           ;app_charge.c: 105: }
  4253  0081  2894               	goto	l6489
  4254  0082                     l1046:	
  4255                           
  4256                           ;app_charge.c: 106: else
  4257                           ;app_charge.c: 107: {
  4258                           ;app_charge.c: 108: flag_charge_once = 0;
  4259  0082  137B               	bcf	_flag_charge_once/(0+8),_flag_charge_once& (0+7)
  4260                           
  4261                           ;app_charge.c: 109: flag_discharge_once = 1;
  4262  0083  16FB               	bsf	_flag_discharge_once/(0+8),_flag_discharge_once& (0+7)
  4263                           
  4264                           ;app_charge.c: 111: app_charge.ChargeFullCnt = 0;
  4265  0084  01AD               	clrf	(_app_charge^(0+128)+13)
  4266  0085  01AE               	clrf	((_app_charge+1)^(0+128)+13)
  4267                           
  4268                           ;app_charge.c: 112: app_charge.ChargeCnt = 0;
  4269  0086  01A9               	clrf	(_app_charge^(0+128)+9)
  4270  0087  01AA               	clrf	((_app_charge+1)^(0+128)+9)
  4271                           
  4272                           ;app_charge.c: 113: app_charge.Charge = 1;
  4273  0088  1420               	bsf	_app_charge^(0+128),0
  4274                           
  4275                           ;app_charge.c: 114: app_charge.FullCharge = 0;
  4276  0089  10A0               	bcf	_app_charge^(0+128),1
  4277                           
  4278                           ;app_charge.c: 116: adresultvdd_back = 4096;
  4279  008A  1283               	bcf	3,5	;RP0=0, select bank0
  4280  008B  01B8               	clrf	_adresultvdd_back	;volatile
  4281  008C  3010               	movlw	16
  4282  008D  00B9               	movwf	_adresultvdd_back+1	;volatile
  4283                           
  4284                           ;app_charge.c: 117: app_process_set_work_state(WORK_STATE_CHARGING);
  4285  008E  3002               	movlw	2
  4286  008F  27D4               	fcall	_app_process_set_work_state
  4287  0090  2894               	goto	l6489
  4288  0091                     l6487:	
  4289                           
  4290                           ;app_charge.c: 121: else
  4291                           ;app_charge.c: 122: {
  4292                           ;app_charge.c: 123: app_charge.ChargeCnt = 0;
  4293  0091  1683               	bsf	3,5	;RP0=1, select bank1
  4294  0092  01A9               	clrf	(_app_charge^(0+128)+9)
  4295  0093  01AA               	clrf	((_app_charge+1)^(0+128)+9)
  4296  0094                     l6489:	
  4297                           
  4298                           ;app_charge.c: 124: }
  4299                           ;app_charge.c: 125: if(app_charge.Charge)
  4300  0094  1683               	bsf	3,5	;RP0=1, select bank1
  4301  0095  1C20               	btfss	_app_charge^(0+128),0
  4302  0096  2921               	goto	l6545
  4303                           
  4304                           ;app_charge.c: 126: {
  4305                           ;app_charge.c: 127: if(app_charge.FullCharge || app_charge.ForceFullCharge)
  4306  0097  18A0               	btfsc	_app_charge^(0+128),1
  4307  0098  289B               	goto	l6495
  4308  0099  1D20               	btfss	_app_charge^(0+128),2
  4309  009A  28CC               	goto	l6517
  4310  009B                     l6495:	
  4311                           
  4312                           ;app_charge.c: 128: {
  4313                           ;app_charge.c: 129: if (charge_force_full_cnt <= (100UL * 3600 *15 + 100UL * 3600 *9))
  4314  009B  0846               	movf	(_charge_force_full_cnt+3)^(0+128),w
  4315  009C  1D03               	btfss	3,2
  4316  009D  28B2               	goto	l1053
  4317  009E  3083               	movlw	131
  4318  009F  0245               	subwf	(_charge_force_full_cnt+2)^(0+128),w
  4319  00A0  1D03               	skipz
  4320  00A1  28A8               	goto	u1683
  4321  00A2  30D6               	movlw	214
  4322  00A3  0244               	subwf	(_charge_force_full_cnt+1)^(0+128),w
  4323  00A4  1D03               	skipz
  4324  00A5  28A8               	goto	u1683
  4325  00A6  3001               	movlw	1
  4326  00A7  0243               	subwf	_charge_force_full_cnt^(0+128),w
  4327  00A8                     u1683:	
  4328  00A8  1803               	btfsc	3,0
  4329  00A9  28B2               	goto	l1053
  4330                           
  4331                           ;app_charge.c: 131: {
  4332                           ;app_charge.c: 132: charge_force_full_cnt++;
  4333  00AA  0AC3               	incf	_charge_force_full_cnt^(0+128),f
  4334  00AB  1903               	skipnz
  4335  00AC  0AC4               	incf	(_charge_force_full_cnt+1)^(0+128),f
  4336  00AD  1903               	skipnz
  4337  00AE  0AC5               	incf	(_charge_force_full_cnt+2)^(0+128),f
  4338  00AF  1903               	skipnz
  4339  00B0  0AC6               	incf	(_charge_force_full_cnt+3)^(0+128),f
  4340                           
  4341                           ;app_charge.c: 133: }
  4342  00B1  28B3               	goto	l1054
  4343  00B2                     l1053:	
  4344                           
  4345                           ;app_charge.c: 134: else
  4346                           ;app_charge.c: 135: {
  4347                           ;app_charge.c: 136: app_charge.flag_charge_force_full_24hour = 1;
  4348  00B2  15A0               	bsf	_app_charge^(0+128),3
  4349  00B3                     l1054:	
  4350                           
  4351                           ;app_charge.c: 137: }
  4352                           ;app_charge.c: 138: if (app_charge.flag_charge_force_full_24hour)
  4353  00B3  1DA0               	btfss	_app_charge^(0+128),3
  4354  00B4  28B8               	goto	l1055
  4355  00B5                     l6499:	
  4356                           
  4357                           ;app_charge.c: 139: {
  4358                           ;app_charge.c: 140: {PWM0EN = 0;TRISB3 = 0;RB3 = 0;};
  4359  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  4360  00B6  212E               	fcall	PL4	;call to abstracted procedure
  4361                           
  4362                           ;app_charge.c: 141: }
  4363  00B7  0008               	return
  4364  00B8                     l1055:	
  4365                           
  4366                           ;app_charge.c: 142: else
  4367                           ;app_charge.c: 143: {
  4368                           ;app_charge.c: 144: if (app_charge.ForceFullCharge)
  4369  00B8  1920               	btfsc	_app_charge^(0+128),2
  4370  00B9  28B5               	goto	l6499
  4371                           
  4372                           ;app_charge.c: 148: else
  4373                           ;app_charge.c: 149: {
  4374                           ;app_charge.c: 150: if (adresultvdd > 1213)
  4375  00BA  3004               	movlw	4
  4376  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  4377  00BC  023B               	subwf	_adresultvdd+1,w	;volatile
  4378  00BD  30BE               	movlw	190
  4379  00BE  1903               	skipnz
  4380  00BF  023A               	subwf	_adresultvdd,w	;volatile
  4381  00C0  1C03               	skipc
  4382  00C1  28C4               	goto	l6507
  4383                           
  4384                           ;app_charge.c: 151: {
  4385                           ;app_charge.c: 152: ChargePwmOut(60);
  4386  00C2  303C               	movlw	60
  4387  00C3  2F34               	ljmp	_ChargePwmOut
  4388  00C4                     l6507:	
  4389                           ;app_charge.c: 153: }
  4390                           
  4391                           
  4392                           ;app_charge.c: 154: else if(adresultvdd <= 1180)
  4393  00C4  3004               	movlw	4
  4394  00C5  023B               	subwf	_adresultvdd+1,w	;volatile
  4395  00C6  309D               	movlw	157
  4396  00C7  1903               	skipnz
  4397  00C8  023A               	subwf	_adresultvdd,w	;volatile
  4398  00C9  1803               	skipnc
  4399  00CA  0008               	return
  4400  00CB  28B5               	goto	l6499
  4401  00CC                     l6517:	
  4402                           ;app_charge.c: 157: }
  4403                           ;app_charge.c: 158: }
  4404                           ;app_charge.c: 159: }
  4405                           ;app_charge.c: 161: }
  4406                           
  4407                           
  4408                           ;app_charge.c: 183: }
  4409                           ;app_charge.c: 184: }
  4410                           ;app_charge.c: 185: if (adresultvdd <= 1170)
  4411  00CC  3004               	movlw	4
  4412  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  4413  00CE  023B               	subwf	_adresultvdd+1,w	;volatile
  4414  00CF  3093               	movlw	147
  4415  00D0  1903               	skipnz
  4416  00D1  023A               	subwf	_adresultvdd,w	;volatile
  4417  00D2  1803               	skipnc
  4418  00D3  28DD               	goto	l6523
  4419                           
  4420                           ;app_charge.c: 186: {
  4421                           ;app_charge.c: 187: if (++charge_full_cnt >= 100)
  4422  00D4  3064               	movlw	100
  4423  00D5  0ACD               	incf	_charge_full_cnt,f
  4424  00D6  024D               	subwf	_charge_full_cnt,w
  4425  00D7  1C03               	skipc
  4426  00D8  28DE               	goto	l6525
  4427                           
  4428                           ;app_charge.c: 188: {
  4429                           ;app_charge.c: 189: {PWM0EN = 0;TRISB3 = 0;RB3 = 0;};
  4430  00D9  212E               	fcall	PL4	;call to abstracted procedure
  4431                           
  4432                           ;app_charge.c: 190: app_charge.FullCharge = 1;
  4433  00DA  1683               	bsf	3,5	;RP0=1, select bank1
  4434  00DB  14A0               	bsf	_app_charge^(0+128),1
  4435  00DC  28DE               	goto	l6525
  4436  00DD                     l6523:	
  4437                           
  4438                           ;app_charge.c: 193: else
  4439                           ;app_charge.c: 194: {
  4440                           ;app_charge.c: 195: charge_full_cnt = 0;
  4441  00DD  01CD               	clrf	_charge_full_cnt
  4442  00DE                     l6525:	
  4443                           
  4444                           ;app_charge.c: 196: }
  4445                           ;app_charge.c: 198: if (charge_force_full_cnt <= 100UL * 3600 *15)
  4446  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  4447  00DF  0846               	movf	(_charge_force_full_cnt+3)^(0+128),w
  4448  00E0  1D03               	btfss	3,2
  4449  00E1  28F6               	goto	l1068
  4450  00E2  3052               	movlw	82
  4451  00E3  0245               	subwf	(_charge_force_full_cnt+2)^(0+128),w
  4452  00E4  1D03               	skipz
  4453  00E5  28EC               	goto	u1753
  4454  00E6  3065               	movlw	101
  4455  00E7  0244               	subwf	(_charge_force_full_cnt+1)^(0+128),w
  4456  00E8  1D03               	skipz
  4457  00E9  28EC               	goto	u1753
  4458  00EA  30C1               	movlw	193
  4459  00EB  0243               	subwf	_charge_force_full_cnt^(0+128),w
  4460  00EC                     u1753:	
  4461  00EC  1803               	btfsc	3,0
  4462  00ED  28F6               	goto	l1068
  4463                           
  4464                           ;app_charge.c: 200: {
  4465                           ;app_charge.c: 201: charge_force_full_cnt++;
  4466  00EE  0AC3               	incf	_charge_force_full_cnt^(0+128),f
  4467  00EF  1903               	skipnz
  4468  00F0  0AC4               	incf	(_charge_force_full_cnt+1)^(0+128),f
  4469  00F1  1903               	skipnz
  4470  00F2  0AC5               	incf	(_charge_force_full_cnt+2)^(0+128),f
  4471  00F3  1903               	skipnz
  4472  00F4  0AC6               	incf	(_charge_force_full_cnt+3)^(0+128),f
  4473                           
  4474                           ;app_charge.c: 202: }
  4475  00F5  28F7               	goto	l6529
  4476  00F6                     l1068:	
  4477                           
  4478                           ;app_charge.c: 203: else
  4479                           ;app_charge.c: 204: {
  4480                           ;app_charge.c: 205: app_charge.ForceFullCharge = 1;
  4481  00F6  1520               	bsf	_app_charge^(0+128),2
  4482  00F7                     l6529:	
  4483                           
  4484                           ;app_charge.c: 206: }
  4485                           ;app_charge.c: 208: if (adresultvdd_back >= adresultvdd)
  4486  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  4487  00F8  083B               	movf	_adresultvdd+1,w	;volatile
  4488  00F9  0239               	subwf	_adresultvdd_back+1,w	;volatile
  4489  00FA  1D03               	skipz
  4490  00FB  28FE               	goto	u1765
  4491  00FC  083A               	movf	_adresultvdd,w	;volatile
  4492  00FD  0238               	subwf	_adresultvdd_back,w	;volatile
  4493  00FE                     u1765:	
  4494  00FE  1C03               	skipc
  4495  00FF  2904               	goto	l1070
  4496                           
  4497                           ;app_charge.c: 209: {
  4498                           ;app_charge.c: 210: adresultvdd_back = adresultvdd;
  4499  0100  083B               	movf	_adresultvdd+1,w	;volatile
  4500  0101  00B9               	movwf	_adresultvdd_back+1	;volatile
  4501  0102  083A               	movf	_adresultvdd,w	;volatile
  4502  0103  00B8               	movwf	_adresultvdd_back	;volatile
  4503  0104                     l1070:	
  4504                           
  4505                           ;app_charge.c: 211: }
  4506                           ;app_charge.c: 214: if(adresultvdd_back < 1199)
  4507  0104  3004               	movlw	4
  4508  0105  0239               	subwf	_adresultvdd_back+1,w	;volatile
  4509  0106  30AF               	movlw	175
  4510  0107  1903               	skipnz
  4511  0108  0238               	subwf	_adresultvdd_back,w	;volatile
  4512  0109  1803               	skipnc
  4513  010A  290D               	goto	l6535
  4514                           
  4515                           ;app_charge.c: 215: {
  4516                           ;app_charge.c: 216: ChargePwmOut(60);
  4517  010B  303C               	movlw	60
  4518  010C  2F34               	ljmp	_ChargePwmOut
  4519  010D                     l6535:	
  4520                           ;app_charge.c: 217: }
  4521                           
  4522                           
  4523                           ;app_charge.c: 218: else if(adresultvdd_back < 1228)
  4524  010D  3004               	movlw	4
  4525  010E  0239               	subwf	_adresultvdd_back+1,w	;volatile
  4526  010F  30CC               	movlw	204
  4527  0110  1903               	skipnz
  4528  0111  0238               	subwf	_adresultvdd_back,w	;volatile
  4529  0112  1803               	skipnc
  4530  0113  2916               	goto	l6539
  4531                           
  4532                           ;app_charge.c: 219: {
  4533                           ;app_charge.c: 220: ChargePwmOut(60);
  4534  0114  303C               	movlw	60
  4535  0115  2F34               	ljmp	_ChargePwmOut
  4536  0116                     l6539:	
  4537                           ;app_charge.c: 221: }
  4538                           
  4539                           
  4540                           ;app_charge.c: 222: else if(adresultvdd_back < 1445)
  4541  0116  3005               	movlw	5
  4542  0117  0239               	subwf	_adresultvdd_back+1,w	;volatile
  4543  0118  30A5               	movlw	165
  4544  0119  1903               	skipnz
  4545  011A  0238               	subwf	_adresultvdd_back,w	;volatile
  4546  011B  1803               	skipnc
  4547  011C  291F               	goto	l6543
  4548                           
  4549                           ;app_charge.c: 223: {
  4550                           ;app_charge.c: 224: ChargePwmOut(80);
  4551  011D  3050               	movlw	80
  4552  011E  2F34               	ljmp	_ChargePwmOut
  4553  011F                     l6543:	
  4554                           ;app_charge.c: 225: }
  4555                           
  4556                           
  4557                           ;app_charge.c: 226: else
  4558                           ;app_charge.c: 227: {
  4559                           ;app_charge.c: 228: ChargePwmOut(60);
  4560  011F  303C               	movlw	60
  4561  0120  2F34               	ljmp	_ChargePwmOut
  4562  0121                     l6545:	
  4563                           
  4564                           ;app_charge.c: 235: charge_full_cnt = 0;
  4565  0121  1283               	bcf	3,5	;RP0=0, select bank0
  4566  0122  01CD               	clrf	_charge_full_cnt
  4567                           
  4568                           ;app_charge.c: 236: charge_force_full_cnt = 0;
  4569  0123  1683               	bsf	3,5	;RP0=1, select bank1
  4570  0124  01C3               	clrf	_charge_force_full_cnt^(0+128)
  4571  0125  01C4               	clrf	(_charge_force_full_cnt+1)^(0+128)
  4572  0126  01C5               	clrf	(_charge_force_full_cnt+2)^(0+128)
  4573  0127  01C6               	clrf	(_charge_force_full_cnt+3)^(0+128)
  4574                           
  4575                           ;app_charge.c: 237: app_charge.flag_charge_force_full_24hour = 0;
  4576  0128  11A0               	bcf	_app_charge^(0+128),3
  4577                           
  4578                           ;app_charge.c: 238: app_charge.FullCharge = 0;
  4579  0129  10A0               	bcf	_app_charge^(0+128),1
  4580                           
  4581                           ;app_charge.c: 239: app_charge.ForceFullCharge = 0;
  4582  012A  1120               	bcf	_app_charge^(0+128),2
  4583                           
  4584                           ;app_charge.c: 240: app_charge.ChargeFullCnt = 0;
  4585  012B  01AD               	clrf	(_app_charge^(0+128)+13)
  4586  012C  01AE               	clrf	((_app_charge+1)^(0+128)+13)
  4587  012D  0008               	return
  4588  012E                     __end_of_Charge_Check:	
  4589  012E                     PL4:	
  4590  012E  101B               	bcf	27,0	;volatile
  4591  012F  1683               	bsf	3,5	;RP0=1, select bank1
  4592  0130  1186               	bcf	6,3	;volatile
  4593  0131  1283               	bcf	3,5	;RP0=0, select bank0
  4594  0132  1186               	bcf	6,3	;volatile
  4595  0133  0008               	return
  4596  0134                     __end_ofPL4:	
  4597  0134                     PL12:	
  4598  0134  1283               	bcf	3,5	;RP0=0, select bank0
  4599  0135  01D3               	clrf	set_led_state@index
  4600  0136  00D4               	movwf	set_led_state@index+1
  4601  0137  01D5               	clrf	set_led_state@state
  4602  0138  0008               	return
  4603  0139                     __end_ofPL12:	
  4604                           
  4605                           	psect	text33
  4606  05E4                     __ptext33:	
  4607 ;; *************** function _set_led_state *****************
  4608 ;; Defined at:
  4609 ;;		line 269 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_led.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  index           2    0[BANK0 ] enum E591
  4612 ;;  state           1    2[BANK0 ] enum E587
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0
  4619 ;; Tracked objects:
  4620 ;;		On entry : 100/0
  4621 ;;		On exit  : 100/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMMON   BANK0   BANK1
  4624 ;;      Params:         0       3       0
  4625 ;;      Locals:         0       0       0
  4626 ;;      Temps:          0       6       0
  4627 ;;      Totals:         0       9       0
  4628 ;;Total ram usage:        9 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    3
  4631 ;; This function calls:
  4632 ;;		Nothing
  4633 ;; This function is called by:
  4634 ;;		_Charge_Check
  4635 ;;		_app_led_mode_set
  4636 ;;		_app_led_water_mode_set
  4637 ;;		_process_led_remind_low_power
  4638 ;;		_app_process_power_off
  4639 ;;		_water_turn_off
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           
  4644                           ;psect for function _set_led_state
  4645  05E4                     _set_led_state:	
  4646  05E4                     l6217:	
  4647                           ;incstack = 0
  4648                           ; Regs used in _set_led_state: [wreg+status,2+status,0]
  4649                           
  4650                           
  4651                           ;app_led.c: 271: if (LED_STATE_ON == state)
  4652  05E4  0B55               	decfsz	set_led_state@state,w
  4653  05E5  2DF5               	goto	l6221
  4654                           
  4655                           ;app_led.c: 272: {
  4656                           ;app_led.c: 273: led_index |= index;
  4657  05E6  0853               	movf	set_led_state@index,w
  4658  05E7  00D6               	movwf	??_set_led_state
  4659  05E8  0854               	movf	set_led_state@index+1,w
  4660  05E9  00D7               	movwf	??_set_led_state+1
  4661  05EA  01D8               	clrf	??_set_led_state+2
  4662  05EB  01D9               	clrf	??_set_led_state+3
  4663  05EC  0856               	movf	??_set_led_state,w
  4664  05ED  04A0               	iorwf	_led_index,f
  4665  05EE  0857               	movf	??_set_led_state+1,w
  4666  05EF  04A1               	iorwf	_led_index+1,f
  4667  05F0  0858               	movf	??_set_led_state+2,w
  4668  05F1  04A2               	iorwf	_led_index+2,f
  4669  05F2  0859               	movf	??_set_led_state+3,w
  4670  05F3  04A3               	iorwf	_led_index+3,f
  4671                           
  4672                           ;app_led.c: 274: }
  4673  05F4  0008               	return
  4674  05F5                     l6221:	
  4675                           
  4676                           ;app_led.c: 275: else if (LED_STATE_OFF == state)
  4677  05F5  0855               	movf	set_led_state@state,w
  4678  05F6  1D03               	btfss	3,2
  4679  05F7  0008               	return
  4680                           
  4681                           ;app_led.c: 276: {
  4682                           ;app_led.c: 277: led_index &= ~index;
  4683  05F8  0854               	movf	set_led_state@index+1,w
  4684  05F9  00D7               	movwf	??_set_led_state+1
  4685  05FA  0853               	movf	set_led_state@index,w
  4686  05FB  00D6               	movwf	??_set_led_state
  4687  05FC  09D6               	comf	??_set_led_state,f
  4688  05FD  09D7               	comf	??_set_led_state+1,f
  4689  05FE  0856               	movf	??_set_led_state,w
  4690  05FF  00D8               	movwf	??_set_led_state+2
  4691  0600  0857               	movf	??_set_led_state+1,w
  4692  0601  00D9               	movwf	??_set_led_state+3
  4693  0602  3000               	movlw	0
  4694  0603  1BD9               	btfsc	??_set_led_state+3,7
  4695  0604  30FF               	movlw	255
  4696  0605  00DA               	movwf	??_set_led_state+4
  4697  0606  00DB               	movwf	??_set_led_state+5
  4698  0607  0858               	movf	??_set_led_state+2,w
  4699  0608  05A0               	andwf	_led_index,f
  4700  0609  0859               	movf	??_set_led_state+3,w
  4701  060A  05A1               	andwf	_led_index+1,f
  4702  060B  085A               	movf	??_set_led_state+4,w
  4703  060C  05A2               	andwf	_led_index+2,f
  4704  060D  085B               	movf	??_set_led_state+5,w
  4705  060E  05A3               	andwf	_led_index+3,f
  4706  060F  0008               	return
  4707  0610                     __end_of_set_led_state:	
  4708                           
  4709                           	psect	text34
  4710  0734                     __ptext34:	
  4711 ;; *************** function _ChargePwmOut *****************
  4712 ;; Defined at:
  4713 ;;		line 38 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_charge.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;  Duty            1    wreg     unsigned char 
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;  Duty            1    0[BANK0 ] unsigned char 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  1    wreg      void 
  4720 ;; Registers used:
  4721 ;;		wreg, status,2, status,0
  4722 ;; Tracked objects:
  4723 ;;		On entry : 100/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMMON   BANK0   BANK1
  4727 ;;      Params:         0       0       0
  4728 ;;      Locals:         0       1       0
  4729 ;;      Temps:          0       0       0
  4730 ;;      Totals:         0       1       0
  4731 ;;Total ram usage:        1 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    3
  4734 ;; This function calls:
  4735 ;;		Nothing
  4736 ;; This function is called by:
  4737 ;;		_Charge_Check
  4738 ;;		_GotoSleep
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _ChargePwmOut
  4744  0734                     _ChargePwmOut:	
  4745                           
  4746                           ;incstack = 0
  4747                           ; Regs used in _ChargePwmOut: [wreg+status,2+status,0]
  4748                           ;ChargePwmOut@Duty stored from wreg
  4749  0734  00D3               	movwf	ChargePwmOut@Duty
  4750                           
  4751                           ;app_charge.c: 40: if(Duty == 0)
  4752  0735  0853               	movf	ChargePwmOut@Duty,w
  4753  0736  1D03               	btfss	3,2
  4754  0737  2F3C               	goto	l1034
  4755                           
  4756                           ;app_charge.c: 41: {
  4757                           ;app_charge.c: 42: PWM0EN = 0;
  4758  0738  101B               	bcf	27,0	;volatile
  4759                           
  4760                           ;app_charge.c: 43: TRISB3 = 1;
  4761  0739  1683               	bsf	3,5	;RP0=1, select bank1
  4762  073A  1586               	bsf	6,3	;volatile
  4763                           
  4764                           ;app_charge.c: 44: }
  4765  073B  0008               	return
  4766  073C                     l1034:	
  4767                           
  4768                           ;app_charge.c: 45: else
  4769                           ;app_charge.c: 46: {
  4770                           ;app_charge.c: 47: if(!PWM0EN)
  4771  073C  1C1B               	btfss	27,0	;volatile
  4772                           
  4773                           ;app_charge.c: 48: {
  4774                           ;app_charge.c: 49: PWM0EN = 1;
  4775  073D  141B               	bsf	27,0	;volatile
  4776                           
  4777                           ;app_charge.c: 50: }
  4778                           ;app_charge.c: 51: {TRISB3 = 0;};
  4779  073E  1683               	bsf	3,5	;RP0=1, select bank1
  4780  073F  1186               	bcf	6,3	;volatile
  4781                           
  4782                           ;app_charge.c: 52: PWMD0L = Duty;
  4783  0740  1283               	bcf	3,5	;RP0=0, select bank0
  4784  0741  0853               	movf	ChargePwmOut@Duty,w
  4785  0742  0096               	movwf	22	;volatile
  4786  0743  0008               	return
  4787  0744                     __end_of_ChargePwmOut:	
  4788                           
  4789                           	psect	text35
  4790  07E4                     __ptext35:	
  4791 ;; *************** function _app_adc_process *****************
  4792 ;; Defined at:
  4793 ;;		line 213 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_adc.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      void 
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0, pclath, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMMON   BANK0   BANK1
  4807 ;;      Params:         0       0       0
  4808 ;;      Locals:         0       0       0
  4809 ;;      Temps:          0       0       0
  4810 ;;      Totals:         0       0       0
  4811 ;;Total ram usage:        0 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    6
  4814 ;; This function calls:
  4815 ;;		_app_adc_bat_voltage_check
  4816 ;; This function is called by:
  4817 ;;		_main
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           
  4822                           ;psect for function _app_adc_process
  4823  07E4                     _app_adc_process:	
  4824                           
  4825                           ;app_adc.c: 216: app_adc_bat_voltage_check();
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in _app_adc_process: [wreg+status,2+status,0+pclath+cstack]
  4829  07E4  2A95               	ljmp	l6385
  4830  07E5                     __end_of_app_adc_process:	
  4831                           
  4832                           	psect	text36
  4833  0295                     __ptext36:	
  4834 ;; *************** function _app_adc_bat_voltage_check *****************
  4835 ;; Defined at:
  4836 ;;		line 98 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_adc.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;		None
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;		None
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  1    wreg      void 
  4843 ;; Registers used:
  4844 ;;		wreg, status,2, status,0, pclath, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMMON   BANK0   BANK1
  4850 ;;      Params:         0       0       0
  4851 ;;      Locals:         0       0       0
  4852 ;;      Temps:          0       1       0
  4853 ;;      Totals:         0       1       0
  4854 ;;Total ram usage:        1 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    5
  4857 ;; This function calls:
  4858 ;;		_AdcResultChk
  4859 ;;		_app_process_set_water_state
  4860 ;;		_app_process_set_work_state
  4861 ;; This function is called by:
  4862 ;;		_app_adc_process
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           
  4867                           ;psect for function _app_adc_bat_voltage_check
  4868  0295                     _app_adc_bat_voltage_check:	
  4869  0295                     l6385:	
  4870                           ;incstack = 0
  4871                           ; Regs used in _app_adc_bat_voltage_check: [wreg+status,2+status,0+pclath+cstack]
  4872                           
  4873                           
  4874                           ;app_adc.c: 100: ADCON0 = 0b00111101;
  4875  0295  303D               	movlw	61
  4876  0296  1283               	bcf	3,5	;RP0=0, select bank0
  4877  0297  009F               	movwf	31	;volatile
  4878                           
  4879                           ;app_adc.c: 101: _delay((unsigned long)((20)*(16000000UL/4000000.0)));
  4880  0298  301A               	movlw	26
  4881  0299  1283               	bcf	3,5	;RP0=0, select bank0
  4882  029A  00E0               	movwf	??_app_adc_bat_voltage_check
  4883  029B                     u3107:	
  4884  029B  0BE0               	decfsz	??_app_adc_bat_voltage_check,f
  4885  029C  2A9B               	goto	u3107
  4886                           
  4887                           ;app_adc.c: 102: ADCON1 = 0b00000000;
  4888  029D  1683               	bsf	3,5	;RP0=1, select bank1
  4889  029E  019F               	clrf	31	;volatile
  4890                           
  4891                           ;app_adc.c: 103: _delay((unsigned long)((20)*(16000000UL/4000000.0)));
  4892  029F  301A               	movlw	26
  4893  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  4894  02A1  00E0               	movwf	??_app_adc_bat_voltage_check
  4895  02A2                     u3117:	
  4896  02A2  0BE0               	decfsz	??_app_adc_bat_voltage_check,f
  4897  02A3  2AA2               	goto	u3117
  4898  02A4  300F               	movlw	15
  4899                           
  4900                           ;app_adc.c: 105: adresultvdd = AdcResultChk(15,0);
  4901  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  4902  02A6  01D9               	clrf	AdcResultChk@adldo
  4903  02A7  2761               	fcall	_AdcResultChk
  4904  02A8  085A               	movf	?_AdcResultChk+1,w
  4905  02A9  00BB               	movwf	_adresultvdd+1	;volatile
  4906  02AA  0859               	movf	?_AdcResultChk,w
  4907  02AB  00BA               	movwf	_adresultvdd	;volatile
  4908                           
  4909                           ;app_adc.c: 120: if(app_charge.Charge)
  4910  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  4911  02AD  1C20               	btfss	_app_charge^(0+128),0
  4912  02AE  2AC4               	goto	l6407
  4913                           
  4914                           ;app_adc.c: 121: {
  4915                           ;app_adc.c: 122: if(adresultvdd < 1535)
  4916  02AF  3005               	movlw	5
  4917  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  4918  02B1  023B               	subwf	_adresultvdd+1,w	;volatile
  4919  02B2  30FF               	movlw	255
  4920  02B3  1903               	skipnz
  4921  02B4  023A               	subwf	_adresultvdd,w	;volatile
  4922  02B5  1803               	skipnc
  4923  02B6  2AC2               	goto	l6405
  4924                           
  4925                           ;app_adc.c: 123: {
  4926                           ;app_adc.c: 124: CntLowPowerOff++;
  4927  02B7  0AD0               	incf	_CntLowPowerOff,f	;volatile
  4928                           
  4929                           ;app_adc.c: 125: if(CntLowPowerOff > 250)
  4930  02B8  30FB               	movlw	251
  4931  02B9  0250               	subwf	_CntLowPowerOff,w	;volatile
  4932  02BA  1C03               	skipc
  4933  02BB  0008               	return
  4934                           
  4935                           ;app_adc.c: 126: {
  4936                           ;app_adc.c: 127: CntLowPowerOff = 0;
  4937  02BC  01D0               	clrf	_CntLowPowerOff	;volatile
  4938                           
  4939                           ;app_adc.c: 128: app_charge.Remind = 0;
  4940  02BD  1683               	bsf	3,5	;RP0=1, select bank1
  4941  02BE  1220               	bcf	_app_charge^(0+128),4
  4942                           
  4943                           ;app_adc.c: 129: app_charge.LowLed = 0;
  4944  02BF  01A7               	clrf	(_app_charge^(0+128)+7)
  4945                           
  4946                           ;app_adc.c: 130: app_charge.LowPower = 0;
  4947  02C0  01A6               	clrf	(_app_charge^(0+128)+6)
  4948  02C1  0008               	return
  4949  02C2                     l6405:	
  4950                           
  4951                           ;app_adc.c: 133: else
  4952                           ;app_adc.c: 134: {
  4953                           ;app_adc.c: 135: CntLowPowerOff = 0;
  4954  02C2  01D0               	clrf	_CntLowPowerOff	;volatile
  4955  02C3  0008               	return
  4956  02C4                     l6407:	
  4957                           
  4958                           ;app_adc.c: 138: else
  4959                           ;app_adc.c: 139: {
  4960                           ;app_adc.c: 140: if(adresultvdd > 1694 - 20)
  4961  02C4  3006               	movlw	6
  4962  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  4963  02C6  023B               	subwf	_adresultvdd+1,w	;volatile
  4964  02C7  308B               	movlw	139
  4965  02C8  1903               	skipnz
  4966  02C9  023A               	subwf	_adresultvdd,w	;volatile
  4967  02CA  1C03               	skipc
  4968  02CB  2AE2               	goto	l6427
  4969                           
  4970                           ;app_adc.c: 141: {
  4971                           ;app_adc.c: 142: CntLowPowerOff++;
  4972  02CC  0AD0               	incf	_CntLowPowerOff,f	;volatile
  4973                           
  4974                           ;app_adc.c: 143: if(CntLowPowerOff > 100)
  4975  02CD  3065               	movlw	101
  4976  02CE  0250               	subwf	_CntLowPowerOff,w	;volatile
  4977  02CF  1C03               	skipc
  4978  02D0  2AE3               	goto	l6429
  4979                           
  4980                           ;app_adc.c: 144: {
  4981                           ;app_adc.c: 145: CntLowPowerOff = 0;
  4982  02D1  01D0               	clrf	_CntLowPowerOff	;volatile
  4983                           
  4984                           ;app_adc.c: 146: app_charge.Remind = 0;
  4985  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  4986  02D3  1220               	bcf	_app_charge^(0+128),4
  4987                           
  4988                           ;app_adc.c: 148: if (!app_charge.LowPower)
  4989  02D4  0826               	movf	(_app_charge^(0+128)+6),w
  4990  02D5  1D03               	btfss	3,2
  4991  02D6  2AE3               	goto	l6429
  4992                           
  4993                           ;app_adc.c: 149: {
  4994                           ;app_adc.c: 150: app_process_set_work_state(WORK_STATE_POWEROFF);
  4995  02D7  3000               	movlw	0
  4996  02D8  27D4               	fcall	_app_process_set_work_state
  4997                           
  4998                           ;app_adc.c: 151: app_process_set_water_state(WATER_WORK_STATE_POWEROFF);
  4999  02D9  3000               	movlw	0
  5000  02DA  27D9               	fcall	_app_process_set_water_state
  5001                           
  5002                           ;app_adc.c: 152: app_charge.LowPower = 1;
  5003  02DB  1683               	bsf	3,5	;RP0=1, select bank1
  5004  02DC  01A6               	clrf	(_app_charge^(0+128)+6)
  5005  02DD  0AA6               	incf	(_app_charge^(0+128)+6),f
  5006                           
  5007                           ;app_adc.c: 153: app_charge.LowLed = 1;
  5008  02DE  01A7               	clrf	(_app_charge^(0+128)+7)
  5009  02DF  0AA7               	incf	(_app_charge^(0+128)+7),f
  5010                           
  5011                           ;app_adc.c: 154: app_charge.LowLed_cnt = 0;
  5012  02E0  01A8               	clrf	(_app_charge^(0+128)+8)
  5013  02E1  2AE3               	goto	l6429
  5014  02E2                     l6427:	
  5015                           
  5016                           ;app_adc.c: 158: else
  5017                           ;app_adc.c: 159: {
  5018                           ;app_adc.c: 160: CntLowPowerOff = 0;
  5019  02E2  01D0               	clrf	_CntLowPowerOff	;volatile
  5020  02E3                     l6429:	
  5021                           
  5022                           ;app_adc.c: 161: }
  5023                           ;app_adc.c: 163: if(adresultvdd > 1445 -15)
  5024  02E3  3005               	movlw	5
  5025  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  5026  02E5  023B               	subwf	_adresultvdd+1,w	;volatile
  5027  02E6  3097               	movlw	151
  5028  02E7  1903               	skipnz
  5029  02E8  023A               	subwf	_adresultvdd,w	;volatile
  5030  02E9  1C03               	skipc
  5031  02EA  2AF4               	goto	l6439
  5032  02EB  3065               	movlw	101
  5033                           
  5034                           ;app_adc.c: 164: {
  5035                           ;app_adc.c: 165: bat_remind_delay++;
  5036  02EC  0ACE               	incf	_bat_remind_delay,f
  5037                           
  5038                           ;app_adc.c: 166: if(bat_remind_delay > 100)
  5039  02ED  024E               	subwf	_bat_remind_delay,w
  5040  02EE  1C03               	skipc
  5041  02EF  0008               	return
  5042                           
  5043                           ;app_adc.c: 167: {
  5044                           ;app_adc.c: 168: bat_remind_delay = 0;
  5045  02F0  01CE               	clrf	_bat_remind_delay
  5046                           
  5047                           ;app_adc.c: 169: app_charge.Remind = 1;
  5048  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  5049  02F2  1620               	bsf	_app_charge^(0+128),4
  5050  02F3  0008               	return
  5051  02F4                     l6439:	
  5052                           
  5053                           ;app_adc.c: 172: else
  5054                           ;app_adc.c: 173: {
  5055                           ;app_adc.c: 174: bat_remind_delay = 0;
  5056  02F4  01CE               	clrf	_bat_remind_delay
  5057  02F5  0008               	return
  5058  02F6                     __end_of_app_adc_bat_voltage_check:	
  5059                           
  5060                           	psect	text37
  5061  07D4                     __ptext37:	
  5062 ;; *************** function _app_process_set_work_state *****************
  5063 ;; Defined at:
  5064 ;;		line 34 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_process.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  states          1    wreg     enum E511
  5067 ;; Auto vars:     Size  Location     Type
  5068 ;;  states          1    0[BANK0 ] enum E511
  5069 ;; Return value:  Size  Location     Type
  5070 ;;                  1    wreg      void 
  5071 ;; Registers used:
  5072 ;;		wreg, status,2
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/100
  5075 ;;		On exit  : 100/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMMON   BANK0   BANK1
  5078 ;;      Params:         0       0       0
  5079 ;;      Locals:         0       1       0
  5080 ;;      Temps:          0       0       0
  5081 ;;      Totals:         0       1       0
  5082 ;;Total ram usage:        1 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; Hardware stack levels required when called:    3
  5085 ;; This function calls:
  5086 ;;		Nothing
  5087 ;; This function is called by:
  5088 ;;		_app_adc_bat_voltage_check
  5089 ;;		_Charge_Check
  5090 ;;		_handle_key_pwr
  5091 ;;		_process_led_remind_low_power
  5092 ;;		_app_process_working
  5093 ;;		_main
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           
  5098                           ;psect for function _app_process_set_work_state
  5099  07D4                     _app_process_set_work_state:	
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in _app_process_set_work_state: [wreg+status,2]
  5103                           ;app_process_set_work_state@states stored from wreg
  5104  07D4  1283               	bcf	3,5	;RP0=0, select bank0
  5105  07D5  00D3               	movwf	app_process_set_work_state@states
  5106                           
  5107                           ;app_process.c: 36: app_work_state = states;
  5108  07D6  00ED               	movwf	_app_work_state	;volatile
  5109                           
  5110                           ;app_process.c: 37: work_step = 0;
  5111  07D7  01C4               	clrf	_work_step
  5112  07D8  0008               	return
  5113  07D9                     __end_of_app_process_set_work_state:	
  5114                           
  5115                           	psect	text38
  5116  07D9                     __ptext38:	
  5117 ;; *************** function _app_process_set_water_state *****************
  5118 ;; Defined at:
  5119 ;;		line 17 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_water_process.
      +c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;  states          1    wreg     enum E551
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  states          1    0[BANK0 ] enum E551
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      void 
  5126 ;; Registers used:
  5127 ;;		wreg, status,2
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 100/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMMON   BANK0   BANK1
  5133 ;;      Params:         0       0       0
  5134 ;;      Locals:         0       1       0
  5135 ;;      Temps:          0       0       0
  5136 ;;      Totals:         0       1       0
  5137 ;;Total ram usage:        1 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    3
  5140 ;; This function calls:
  5141 ;;		Nothing
  5142 ;; This function is called by:
  5143 ;;		_app_adc_bat_voltage_check
  5144 ;;		_handle_key_water
  5145 ;;		_process_led_remind_low_power
  5146 ;;		_app_process_charing
  5147 ;;		_main
  5148 ;;		_app_process_water_working
  5149 ;;		_app_process_water_mdoe_led
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function _app_process_set_water_state
  5155  07D9                     _app_process_set_water_state:	
  5156                           
  5157                           ;incstack = 0
  5158                           ; Regs used in _app_process_set_water_state: [wreg+status,2]
  5159                           ;app_process_set_water_state@states stored from wreg
  5160  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  5161  07DA  00D3               	movwf	app_process_set_water_state@states
  5162                           
  5163                           ;app_water_process.c: 19: water_work_state = states;
  5164  07DB  00EC               	movwf	_water_work_state	;volatile
  5165                           
  5166                           ;app_water_process.c: 20: water_work_step = 0;
  5167  07DC  01BE               	clrf	_water_work_step
  5168  07DD  0008               	return
  5169  07DE                     __end_of_app_process_set_water_state:	
  5170                           
  5171                           	psect	text39
  5172  0761                     __ptext39:	
  5173 ;; *************** function _AdcResultChk *****************
  5174 ;; Defined at:
  5175 ;;		line 54 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_adc.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  adch            1    wreg     unsigned char 
  5178 ;;  adldo           1    6[BANK0 ] unsigned char 
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  adch            1    9[BANK0 ] unsigned char 
  5181 ;;  ad_value        2   11[BANK0 ] volatile unsigned int 
  5182 ;;  ad_temp         2    0        volatile unsigned int 
  5183 ;;  ad_value_min    2    0        volatile unsigned int 
  5184 ;;  ad_value_max    2    0        volatile unsigned int 
  5185 ;;  i               1   10[BANK0 ] volatile unsigned char 
  5186 ;; Return value:  Size  Location     Type
  5187 ;;                  2    6[BANK0 ] unsigned int 
  5188 ;; Registers used:
  5189 ;;		wreg, status,2, status,0, pclath, cstack
  5190 ;; Tracked objects:
  5191 ;;		On entry : 100/0
  5192 ;;		On exit  : 100/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMMON   BANK0   BANK1
  5195 ;;      Params:         0       3       0
  5196 ;;      Locals:         0       4       0
  5197 ;;      Temps:          0       0       0
  5198 ;;      Totals:         0       7       0
  5199 ;;Total ram usage:        7 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; Hardware stack levels required when called:    4
  5202 ;; This function calls:
  5203 ;;		_AdcOneChk
  5204 ;; This function is called by:
  5205 ;;		_app_adc_bat_voltage_check
  5206 ;;		_Charge_Check
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           
  5211                           ;psect for function _AdcResultChk
  5212  0761                     _AdcResultChk:	
  5213                           
  5214                           ;incstack = 0
  5215                           ; Regs used in _AdcResultChk: [wreg+status,2+status,0+pclath+cstack]
  5216                           ;AdcResultChk@adch stored from wreg
  5217  0761  00DC               	movwf	AdcResultChk@adch
  5218                           
  5219                           ;app_adc.c: 56: volatile unsigned char i = 0;
  5220  0762  01DD               	clrf	AdcResultChk@i	;volatile
  5221                           
  5222                           ;app_adc.c: 57: volatile unsigned int ad_value;
  5223                           ;app_adc.c: 58: volatile unsigned int ad_value_max;
  5224                           ;app_adc.c: 59: volatile unsigned int ad_value_min;
  5225                           ;app_adc.c: 61: volatile unsigned int ad_temp;
  5226                           ;app_adc.c: 63: ad_value = AdcOneChk(adch,adldo);
  5227  0763  0859               	movf	AdcResultChk@adldo,w
  5228  0764  00D3               	movwf	AdcOneChk@adldo
  5229  0765  258B               	fcall	_AdcOneChk
  5230  0766  0854               	movf	?_AdcOneChk+1,w
  5231  0767  00DF               	movwf	AdcResultChk@ad_value+1	;volatile
  5232  0768  0853               	movf	?_AdcOneChk,w
  5233  0769  00DE               	movwf	AdcResultChk@ad_value	;volatile
  5234                           
  5235                           ;app_adc.c: 64: return ad_value;
  5236  076A  085F               	movf	AdcResultChk@ad_value+1,w	;volatile
  5237  076B  00DA               	movwf	?_AdcResultChk+1
  5238  076C  085E               	movf	AdcResultChk@ad_value,w	;volatile
  5239  076D  00D9               	movwf	?_AdcResultChk
  5240  076E  0008               	return
  5241  076F                     __end_of_AdcResultChk:	
  5242                           
  5243                           	psect	text40
  5244  058B                     __ptext40:	
  5245 ;; *************** function _AdcOneChk *****************
  5246 ;; Defined at:
  5247 ;;		line 27 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_adc.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;  adch            1    wreg     unsigned char 
  5250 ;;  adldo           1    0[BANK0 ] unsigned char 
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;  adch            1    0[COMMON] unsigned char 
  5253 ;;  ad_result       2    4[BANK0 ] volatile unsigned int 
  5254 ;;  i               1    3[BANK0 ] volatile unsigned char 
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  2    0[BANK0 ] unsigned int 
  5257 ;; Registers used:
  5258 ;;		wreg, status,2, status,0
  5259 ;; Tracked objects:
  5260 ;;		On entry : 100/0
  5261 ;;		On exit  : 100/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1
  5264 ;;      Params:         0       2       0
  5265 ;;      Locals:         0       3       0
  5266 ;;      Temps:          0       1       0
  5267 ;;      Totals:         0       6       0
  5268 ;;Total ram usage:        6 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    3
  5271 ;; This function calls:
  5272 ;;		Nothing
  5273 ;; This function is called by:
  5274 ;;		_AdcResultChk
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           
  5279                           ;psect for function _AdcOneChk
  5280  058B                     _AdcOneChk:	
  5281                           
  5282                           ;app_adc.c: 29: volatile unsigned char i = 0;
  5283                           
  5284                           ;incstack = 0
  5285                           ; Regs used in _AdcOneChk: [wreg+status,2+status,0]
  5286  058B  01D6               	clrf	AdcOneChk@i	;volatile
  5287                           
  5288                           ;app_adc.c: 30: volatile unsigned int ad_result;
  5289                           ;app_adc.c: 33: _delay((unsigned long)((20)*(16000000UL/4000000.0)));
  5290  058C  301A               	movlw	26
  5291  058D  1283               	bcf	3,5	;RP0=0, select bank0
  5292  058E  00D5               	movwf	??_AdcOneChk
  5293  058F                     u3127:	
  5294  058F  0BD5               	decfsz	??_AdcOneChk,f
  5295  0590  2D8F               	goto	u3127
  5296  0591  0000               	nop	;# 
  5297  0592  0000               	nop	;# 
  5298  0593  0000               	nop	;# 
  5299  0594  0000               	nop	;# 
  5300                           
  5301                           ;app_adc.c: 39: GODONE = 1;
  5302  0595  1283               	bcf	3,5	;RP0=0, select bank0
  5303  0596  149F               	bsf	31,1	;volatile
  5304  0597                     l503:	
  5305                           ;app_adc.c: 41: while(GODONE)
  5306                           
  5307  0597  1C9F               	btfss	31,1	;volatile
  5308  0598  2DA0               	goto	l6235
  5309  0599  0064               	clrwdt	;# 
  5310                           
  5311                           ;app_adc.c: 44: if(0 == (--i))
  5312  059A  1283               	bcf	3,5	;RP0=0, select bank0
  5313  059B  0BD6               	decfsz	AdcOneChk@i,f	;volatile
  5314  059C  2D97               	goto	l503
  5315                           
  5316                           ;app_adc.c: 45: return 0;
  5317  059D  01D3               	clrf	?_AdcOneChk
  5318  059E  01D4               	clrf	?_AdcOneChk+1
  5319  059F  0008               	return
  5320  05A0                     l6235:	
  5321                           
  5322                           ;app_adc.c: 46: }
  5323                           ;app_adc.c: 47: ad_result=ADRESH;
  5324  05A0  081E               	movf	30,w	;volatile
  5325  05A1  00D7               	movwf	AdcOneChk@ad_result	;volatile
  5326  05A2  01D8               	clrf	AdcOneChk@ad_result+1	;volatile
  5327                           
  5328                           ;app_adc.c: 48: ad_result= (ad_result<<4);
  5329  05A3  0ED7               	swapf	AdcOneChk@ad_result,f	;volatile
  5330  05A4  0ED8               	swapf	AdcOneChk@ad_result+1,f	;volatile
  5331  05A5  30F0               	movlw	240
  5332  05A6  05D8               	andwf	AdcOneChk@ad_result+1,f	;volatile
  5333  05A7  0857               	movf	AdcOneChk@ad_result,w	;volatile
  5334  05A8  390F               	andlw	15
  5335  05A9  04D8               	iorwf	AdcOneChk@ad_result+1,f	;volatile
  5336  05AA  30F0               	movlw	240
  5337  05AB  05D7               	andwf	AdcOneChk@ad_result,f	;volatile
  5338                           
  5339                           ;app_adc.c: 49: ad_result +=(ADRESL>>4);
  5340  05AC  1683               	bsf	3,5	;RP0=1, select bank1
  5341  05AD  0E1E               	swapf	30,w	;volatile
  5342  05AE  390F               	andlw	15
  5343  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  5344  05B0  07D7               	addwf	AdcOneChk@ad_result,f	;volatile
  5345  05B1  1803               	skipnc
  5346  05B2  0AD8               	incf	AdcOneChk@ad_result+1,f	;volatile
  5347                           
  5348                           ;app_adc.c: 51: return ad_result;
  5349  05B3  0858               	movf	AdcOneChk@ad_result+1,w	;volatile
  5350  05B4  00D4               	movwf	?_AdcOneChk+1
  5351  05B5  0857               	movf	AdcOneChk@ad_result,w	;volatile
  5352  05B6  00D3               	movwf	?_AdcOneChk
  5353  05B7  0008               	return
  5354  05B8                     __end_of_AdcOneChk:	
  5355                           
  5356                           	psect	text41
  5357  0786                     __ptext41:	
  5358 ;; *************** function _Timer2Config *****************
  5359 ;; Defined at:
  5360 ;;		line 52 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\main.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;		None
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;		None
  5365 ;; Return value:  Size  Location     Type
  5366 ;;                  1    wreg      void 
  5367 ;; Registers used:
  5368 ;;		wreg
  5369 ;; Tracked objects:
  5370 ;;		On entry : 100/0
  5371 ;;		On exit  : 100/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMMON   BANK0   BANK1
  5374 ;;      Params:         0       0       0
  5375 ;;      Locals:         0       0       0
  5376 ;;      Temps:          0       0       0
  5377 ;;      Totals:         0       0       0
  5378 ;;Total ram usage:        0 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    3
  5381 ;; This function calls:
  5382 ;;		Nothing
  5383 ;; This function is called by:
  5384 ;;		_main
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           
  5389                           ;psect for function _Timer2Config
  5390  0786                     _Timer2Config:	
  5391                           
  5392                           ;main.c: 62: PR2 = 250;
  5393                           
  5394                           ;incstack = 0
  5395                           ; Regs used in _Timer2Config: [wreg]
  5396  0786  30FA               	movlw	250
  5397  0787  1683               	bsf	3,5	;RP0=1, select bank1
  5398  0788  0092               	movwf	18	;volatile
  5399                           
  5400                           ;main.c: 63: TMR2IF = 0;
  5401  0789  1283               	bcf	3,5	;RP0=0, select bank0
  5402  078A  108C               	bcf	12,1	;volatile
  5403                           
  5404                           ;main.c: 64: TMR2IE = 1;
  5405  078B  1683               	bsf	3,5	;RP0=1, select bank1
  5406  078C  148C               	bsf	12,1	;volatile
  5407                           
  5408                           ;main.c: 65: T2CON = 0B00011100;
  5409  078D  301C               	movlw	28
  5410  078E  1283               	bcf	3,5	;RP0=0, select bank0
  5411  078F  0092               	movwf	18	;volatile
  5412  0790  0008               	return
  5413  0791                     __end_of_Timer2Config:	
  5414                           
  5415                           	psect	text42
  5416  07BA                     __ptext42:	
  5417 ;; *************** function _Timer0Cofng *****************
  5418 ;; Defined at:
  5419 ;;		line 40 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\main.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;		None
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      void 
  5426 ;; Registers used:
  5427 ;;		wreg, status,2
  5428 ;; Tracked objects:
  5429 ;;		On entry : 100/100
  5430 ;;		On exit  : 100/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMMON   BANK0   BANK1
  5433 ;;      Params:         0       0       0
  5434 ;;      Locals:         0       0       0
  5435 ;;      Temps:          0       0       0
  5436 ;;      Totals:         0       0       0
  5437 ;;Total ram usage:        0 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    3
  5440 ;; This function calls:
  5441 ;;		Nothing
  5442 ;; This function is called by:
  5443 ;;		_main
  5444 ;; This function uses a non-reentrant model
  5445 ;;
  5446                           
  5447                           
  5448                           ;psect for function _Timer0Cofng
  5449  07BA                     _Timer0Cofng:	
  5450                           
  5451                           ;main.c: 42: OPTION_REG = 0B00000000;
  5452                           
  5453                           ;incstack = 0
  5454                           ; Regs used in _Timer0Cofng: [wreg+status,2]
  5455  07BA  0181               	clrf	1	;volatile
  5456                           
  5457                           ;main.c: 45: TMR0 = 165;
  5458  07BB  30A5               	movlw	165
  5459  07BC  1283               	bcf	3,5	;RP0=0, select bank0
  5460  07BD  0081               	movwf	1	;volatile
  5461                           
  5462                           ;main.c: 47: T0IF = 0;
  5463  07BE  110B               	bcf	11,2	;volatile
  5464                           
  5465                           ;main.c: 48: T0IE = 1;
  5466  07BF  168B               	bsf	11,5	;volatile
  5467  07C0  0008               	return
  5468  07C1                     __end_of_Timer0Cofng:	
  5469                           
  5470                           	psect	text43
  5471  07C1                     __ptext43:	
  5472 ;; *************** function _PwmConfig *****************
  5473 ;; Defined at:
  5474 ;;		line 76 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\main.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;		None
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;		None
  5479 ;; Return value:  Size  Location     Type
  5480 ;;                  1    wreg      void 
  5481 ;; Registers used:
  5482 ;;		wreg, status,2
  5483 ;; Tracked objects:
  5484 ;;		On entry : 100/100
  5485 ;;		On exit  : 100/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMMON   BANK0   BANK1
  5488 ;;      Params:         0       0       0
  5489 ;;      Locals:         0       0       0
  5490 ;;      Temps:          0       0       0
  5491 ;;      Totals:         0       0       0
  5492 ;;Total ram usage:        0 bytes
  5493 ;; Hardware stack levels used:    1
  5494 ;; Hardware stack levels required when called:    3
  5495 ;; This function calls:
  5496 ;;		Nothing
  5497 ;; This function is called by:
  5498 ;;		_main
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           
  5503                           ;psect for function _PwmConfig
  5504  07C1                     _PwmConfig:	
  5505                           
  5506                           ;main.c: 78: PWMCON = 0B01100000;
  5507                           
  5508                           ;incstack = 0
  5509                           ; Regs used in _PwmConfig: [wreg+status,2]
  5510  07C1  3060               	movlw	96
  5511  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  5512  07C3  009B               	movwf	27	;volatile
  5513                           
  5514                           ;main.c: 79: PWMTH = 0B00000000;
  5515  07C4  019A               	clrf	26	;volatile
  5516                           
  5517                           ;main.c: 80: PWMTL = 99;
  5518  07C5  3063               	movlw	99
  5519  07C6  0099               	movwf	25	;volatile
  5520  07C7  0008               	return
  5521  07C8                     __end_of_PwmConfig:	
  5522                           
  5523                           	psect	text44
  5524  044D                     __ptext44:	
  5525 ;; *************** function _Timer2_Isr *****************
  5526 ;; Defined at:
  5527 ;;		line 207 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\main.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;		None
  5530 ;; Auto vars:     Size  Location     Type
  5531 ;;		None
  5532 ;; Return value:  Size  Location     Type
  5533 ;;                  1    wreg      void 
  5534 ;; Registers used:
  5535 ;;		wreg, status,2, status,0, pclath, cstack
  5536 ;; Tracked objects:
  5537 ;;		On entry : 0/0
  5538 ;;		On exit  : 100/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMMON   BANK0   BANK1
  5541 ;;      Params:         0       0       0
  5542 ;;      Locals:         0       0       0
  5543 ;;      Temps:          2       0       0
  5544 ;;      Totals:         2       0       0
  5545 ;;Total ram usage:        2 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; Hardware stack levels required when called:    2
  5548 ;; This function calls:
  5549 ;;		_Mode_control
  5550 ;;		_MotorWaterDrive
  5551 ;;		_led_charge_pwm
  5552 ;;		_process_led
  5553 ;; This function is called by:
  5554 ;;		Interrupt level 1
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558                           
  5559                           ;psect for function _Timer2_Isr
  5560  044D                     _Timer2_Isr:	
  5561                           
  5562                           ;main.c: 221: if (PWMIF)
  5563  044D  1283               	bcf	3,5	;RP0=0, select bank0
  5564  044E  190C               	btfsc	12,2	;volatile
  5565                           
  5566                           ;main.c: 222: {
  5567                           ;main.c: 223: PWMIF = 0;
  5568  044F  110C               	bcf	12,2	;volatile
  5569                           
  5570                           ;main.c: 224: }
  5571                           ;main.c: 226: if (T0IF)
  5572  0450  1D0B               	btfss	11,2	;volatile
  5573  0451  2C57               	goto	i1l7217
  5574                           
  5575                           ;main.c: 227: {
  5576                           ;main.c: 228: TMR0 = 165;
  5577  0452  30A5               	movlw	165
  5578  0453  0081               	movwf	1	;volatile
  5579                           
  5580                           ;main.c: 229: T0IF = 0;
  5581  0454  110B               	bcf	11,2	;volatile
  5582                           
  5583                           ;main.c: 230: Mode_control();
  5584  0455  2346               	fcall	_Mode_control
  5585                           
  5586                           ;main.c: 231: led_charge_pwm();
  5587  0456  2139               	fcall	_led_charge_pwm
  5588  0457                     i1l7217:	
  5589                           
  5590                           ;main.c: 239: }
  5591                           ;main.c: 240: if (TMR2IF)
  5592  0457  1283               	bcf	3,5	;RP0=0, select bank0
  5593  0458  1C8C               	btfss	12,1	;volatile
  5594  0459  2C77               	goto	i1l7237
  5595                           
  5596                           ;main.c: 241: {
  5597                           ;main.c: 242: TMR2IF = 0;
  5598  045A  108C               	bcf	12,1	;volatile
  5599                           
  5600                           ;main.c: 243: Cnt10ms++;
  5601  045B  1683               	bsf	3,5	;RP0=1, select bank1
  5602  045C  0ACD               	incf	_Cnt10ms^(0+128),f
  5603  045D  1903               	skipnz
  5604  045E  0ACE               	incf	(_Cnt10ms+1)^(0+128),f
  5605                           
  5606                           ;main.c: 244: Cnt1ms++;
  5607  045F  0ACB               	incf	_Cnt1ms^(0+128),f
  5608  0460  1903               	skipnz
  5609  0461  0ACC               	incf	(_Cnt1ms+1)^(0+128),f
  5610                           
  5611                           ;main.c: 245: MotorWaterDrive();
  5612  0462  26EE               	fcall	_MotorWaterDrive
  5613                           
  5614                           ;main.c: 246: if (Cnt1ms == 4)
  5615  0463  3004               	movlw	4
  5616  0464  1683               	bsf	3,5	;RP0=1, select bank1
  5617  0465  064B               	xorwf	_Cnt1ms^(0+128),w
  5618  0466  044C               	iorwf	(_Cnt1ms+1)^(0+128),w
  5619  0467  1D03               	btfss	3,2
  5620  0468  2C6C               	goto	i1l7231
  5621                           
  5622                           ;main.c: 247: {
  5623                           ;main.c: 248: Cnt1ms = 0;
  5624  0469  01CB               	clrf	_Cnt1ms^(0+128)
  5625  046A  01CC               	clrf	(_Cnt1ms+1)^(0+128)
  5626                           
  5627                           ;main.c: 249: process_led();
  5628  046B  2232               	fcall	_process_led
  5629  046C                     i1l7231:	
  5630                           
  5631                           ;main.c: 250: }
  5632                           ;main.c: 251: if (Cnt10ms >= 40)
  5633  046C  3000               	movlw	0
  5634  046D  1683               	bsf	3,5	;RP0=1, select bank1
  5635  046E  024E               	subwf	(_Cnt10ms+1)^(0+128),w
  5636  046F  3028               	movlw	40
  5637  0470  1903               	skipnz
  5638  0471  024D               	subwf	_Cnt10ms^(0+128),w
  5639  0472  1C03               	skipc
  5640  0473  2C77               	goto	i1l7237
  5641                           
  5642                           ;main.c: 252: {
  5643                           ;main.c: 253: Cnt10ms = 0;
  5644  0474  01CD               	clrf	_Cnt10ms^(0+128)
  5645  0475  01CE               	clrf	(_Cnt10ms+1)^(0+128)
  5646                           
  5647                           ;main.c: 254: Flag_10ms = 1;
  5648  0476  147B               	bsf	_Flag_10ms/(0+8),_Flag_10ms& (0+7)	;volatile
  5649  0477                     i1l7237:	
  5650                           
  5651                           ;main.c: 255: }
  5652                           ;main.c: 256: }
  5653                           ;main.c: 257: if (RAIF)
  5654  0477  1283               	bcf	3,5	;RP0=0, select bank0
  5655  0478  1D8C               	btfss	12,3	;volatile
  5656  0479  2C7C               	goto	i1l7243
  5657                           
  5658                           ;main.c: 258: {
  5659                           ;main.c: 259: RAIF = 0;
  5660  047A  118C               	bcf	12,3	;volatile
  5661                           
  5662                           ;main.c: 260: PORTA;
  5663  047B  0805               	movf	5,w	;volatile
  5664  047C                     i1l7243:	
  5665                           
  5666                           ;main.c: 261: }
  5667                           ;main.c: 262: if (RBIF)
  5668  047C  1C0B               	btfss	11,0	;volatile
  5669  047D  2C80               	goto	i1l3804
  5670                           
  5671                           ;main.c: 263: {
  5672                           ;main.c: 264: RBIF = 0;
  5673  047E  100B               	bcf	11,0	;volatile
  5674                           
  5675                           ;main.c: 265: PORTB;
  5676  047F  0806               	movf	6,w	;volatile
  5677  0480                     i1l3804:	
  5678  0480  087A               	movf	??_Timer2_Isr+1,w
  5679  0481  008A               	movwf	10
  5680  0482  0E79               	swapf	??_Timer2_Isr^(0+-128),w
  5681  0483  0083               	movwf	3
  5682  0484  0EFE               	swapf	126,f
  5683  0485  0E7E               	swapf	126,w
  5684  0486  0009               	retfie
  5685  0487                     __end_of_Timer2_Isr:	
  5686                           
  5687                           	psect	intentry
  5688  0004                     __pintentry:	
  5689                           ;incstack = 0
  5690                           ; Regs used in _Timer2_Isr: [wreg+status,2+status,0+pclath+cstack]
  5691                           
  5692  0004                     interrupt_function:	
  5693  007E                     saved_w	set	btemp
  5694  0004  00FE               	movwf	btemp
  5695  0005  0E03               	swapf	3,w
  5696  0006  00F9               	movwf	??_Timer2_Isr
  5697  0007  080A               	movf	10,w
  5698  0008  00FA               	movwf	??_Timer2_Isr+1
  5699  0009  2C4D               	ljmp	_Timer2_Isr
  5700                           
  5701                           	psect	text45
  5702  0232                     __ptext45:	
  5703 ;; *************** function _process_led *****************
  5704 ;; Defined at:
  5705 ;;		line 286 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_led.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;		None
  5708 ;; Auto vars:     Size  Location     Type
  5709 ;;		None
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  1    wreg      void 
  5712 ;; Registers used:
  5713 ;;		wreg, status,2, status,0
  5714 ;; Tracked objects:
  5715 ;;		On entry : 100/100
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMMON   BANK0   BANK1
  5719 ;;      Params:         0       0       0
  5720 ;;      Locals:         0       0       0
  5721 ;;      Temps:          0       0       0
  5722 ;;      Totals:         0       0       0
  5723 ;;Total ram usage:        0 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; This function calls:
  5726 ;;		Nothing
  5727 ;; This function is called by:
  5728 ;;		_Timer2_Isr
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           
  5733                           ;psect for function _process_led
  5734  0232                     _process_led:	
  5735                           
  5736                           ;app_led.c: 288: if (is_charge_pwm)
  5737                           
  5738                           ;incstack = 0
  5739                           ; Regs used in _process_led: [wreg+status,2+status,0]
  5740  0232  19FB               	btfsc	_is_charge_pwm/(0+8),_is_charge_pwm& (0+7)
  5741  0233  0008               	return
  5742                           
  5743                           ;app_led.c: 291: }
  5744                           ;app_led.c: 292: TRISA = 0b01011111;
  5745  0234  305F               	movlw	95
  5746  0235  0085               	movwf	5	;volatile
  5747                           
  5748                           ;app_led.c: 294: if (step == 0)
  5749  0236  1283               	bcf	3,5	;RP0=0, select bank0
  5750  0237  0846               	movf	_step,w	;volatile
  5751  0238  1D03               	btfss	3,2
  5752  0239  2A5B               	goto	i1l7035
  5753                           
  5754                           ;app_led.c: 295: {
  5755                           ;app_led.c: 296: if (led_index & LED_INDEX_1)
  5756  023A  1C20               	btfss	_led_index,0
  5757  023B  2A3F               	goto	i1l2248
  5758                           
  5759                           ;app_led.c: 297: {
  5760                           ;app_led.c: 298: RA1 = 0;
  5761  023C  1085               	bcf	5,1	;volatile
  5762                           
  5763                           ;app_led.c: 299: TRISA &= ~(1 << (1));
  5764  023D  1683               	bsf	3,5	;RP0=1, select bank1
  5765  023E  1085               	bcf	5,1	;volatile
  5766  023F                     i1l2248:	
  5767                           
  5768                           ;app_led.c: 300: }
  5769                           ;app_led.c: 301: if (led_index & LED_INDEX_2)
  5770  023F  1283               	bcf	3,5	;RP0=0, select bank0
  5771  0240  1CA0               	btfss	_led_index,1
  5772  0241  2A45               	goto	i1l2249
  5773                           
  5774                           ;app_led.c: 302: {
  5775                           ;app_led.c: 303: RA2 = 0;
  5776  0242  1105               	bcf	5,2	;volatile
  5777                           
  5778                           ;app_led.c: 304: TRISA &= ~(1 << (2));
  5779  0243  1683               	bsf	3,5	;RP0=1, select bank1
  5780  0244  1105               	bcf	5,2	;volatile
  5781  0245                     i1l2249:	
  5782                           
  5783                           ;app_led.c: 305: }
  5784                           ;app_led.c: 306: if (led_index & LED_INDEX_3)
  5785  0245  1283               	bcf	3,5	;RP0=0, select bank0
  5786  0246  1D20               	btfss	_led_index,2
  5787  0247  2A4B               	goto	i1l2250
  5788                           
  5789                           ;app_led.c: 307: {
  5790                           ;app_led.c: 308: RA3 = 0;
  5791  0248  1185               	bcf	5,3	;volatile
  5792                           
  5793                           ;app_led.c: 309: TRISA &= ~(1 << (3));
  5794  0249  1683               	bsf	3,5	;RP0=1, select bank1
  5795  024A  1185               	bcf	5,3	;volatile
  5796  024B                     i1l2250:	
  5797                           
  5798                           ;app_led.c: 310: }
  5799                           ;app_led.c: 311: if (led_index & LED_INDEX_4)
  5800  024B  1283               	bcf	3,5	;RP0=0, select bank0
  5801  024C  1DA0               	btfss	_led_index,3
  5802  024D  2A51               	goto	i1l2251
  5803                           
  5804                           ;app_led.c: 312: {
  5805                           ;app_led.c: 313: RA4 = 0;
  5806  024E  1205               	bcf	5,4	;volatile
  5807                           
  5808                           ;app_led.c: 314: TRISA &= ~(1 << (4));
  5809  024F  1683               	bsf	3,5	;RP0=1, select bank1
  5810  0250  1205               	bcf	5,4	;volatile
  5811  0251                     i1l2251:	
  5812                           
  5813                           ;app_led.c: 315: }
  5814                           ;app_led.c: 316: if (led_index & LED_INDEX_5)
  5815  0251  1283               	bcf	3,5	;RP0=0, select bank0
  5816  0252  1E20               	btfss	_led_index,4
  5817  0253  2A57               	goto	i1l2252
  5818                           
  5819                           ;app_led.c: 317: {
  5820                           ;app_led.c: 318: RA6 = 0;
  5821  0254  1305               	bcf	5,6	;volatile
  5822                           
  5823                           ;app_led.c: 319: TRISA &= ~(1 << (6));
  5824  0255  1683               	bsf	3,5	;RP0=1, select bank1
  5825  0256  1305               	bcf	5,6	;volatile
  5826  0257                     i1l2252:	
  5827                           
  5828                           ;app_led.c: 320: }
  5829                           ;app_led.c: 321: RA0 = 1;
  5830  0257  1283               	bcf	3,5	;RP0=0, select bank0
  5831  0258  1405               	bsf	5,0	;volatile
  5832                           
  5833                           ;app_led.c: 322: TRISA &= ~(1 << (0));
  5834  0259  1683               	bsf	3,5	;RP0=1, select bank1
  5835  025A  1005               	bcf	5,0	;volatile
  5836  025B                     i1l7035:	
  5837                           
  5838                           ;app_led.c: 323: }
  5839                           ;app_led.c: 324: if (step == 1)
  5840  025B  1283               	bcf	3,5	;RP0=0, select bank0
  5841  025C  0B46               	decfsz	_step,w	;volatile
  5842  025D  2A73               	goto	i1l7045
  5843                           
  5844                           ;app_led.c: 325: {
  5845                           ;app_led.c: 326: if (led_index & LED_INDEX_6)
  5846  025E  1EA0               	btfss	_led_index,5
  5847  025F  2A63               	goto	i1l2254
  5848                           
  5849                           ;app_led.c: 327: {
  5850                           ;app_led.c: 328: RA3 = 0;
  5851  0260  1185               	bcf	5,3	;volatile
  5852                           
  5853                           ;app_led.c: 329: TRISA &= ~(1 << (3));
  5854  0261  1683               	bsf	3,5	;RP0=1, select bank1
  5855  0262  1185               	bcf	5,3	;volatile
  5856  0263                     i1l2254:	
  5857                           
  5858                           ;app_led.c: 330: }
  5859                           ;app_led.c: 331: if (led_index & LED_INDEX_7)
  5860  0263  1283               	bcf	3,5	;RP0=0, select bank0
  5861  0264  1F20               	btfss	_led_index,6
  5862  0265  2A69               	goto	i1l2255
  5863                           
  5864                           ;app_led.c: 332: {
  5865                           ;app_led.c: 333: RA6 = 0;
  5866  0266  1305               	bcf	5,6	;volatile
  5867                           
  5868                           ;app_led.c: 334: TRISA &= ~(1 << (6));
  5869  0267  1683               	bsf	3,5	;RP0=1, select bank1
  5870  0268  1305               	bcf	5,6	;volatile
  5871  0269                     i1l2255:	
  5872                           
  5873                           ;app_led.c: 335: }
  5874                           ;app_led.c: 336: if (led_index & LED_INDEX_8)
  5875  0269  1283               	bcf	3,5	;RP0=0, select bank0
  5876  026A  1FA0               	btfss	_led_index,7
  5877  026B  2A6F               	goto	i1l2256
  5878                           
  5879                           ;app_led.c: 337: {
  5880                           ;app_led.c: 338: RA4 = 0;
  5881  026C  1205               	bcf	5,4	;volatile
  5882                           
  5883                           ;app_led.c: 339: TRISA &= ~(1 << (4));
  5884  026D  1683               	bsf	3,5	;RP0=1, select bank1
  5885  026E  1205               	bcf	5,4	;volatile
  5886  026F                     i1l2256:	
  5887                           
  5888                           ;app_led.c: 340: }
  5889                           ;app_led.c: 341: RA1 = 1;
  5890  026F  1283               	bcf	3,5	;RP0=0, select bank0
  5891  0270  1485               	bsf	5,1	;volatile
  5892                           
  5893                           ;app_led.c: 342: TRISA &= ~(1 << (1));
  5894  0271  1683               	bsf	3,5	;RP0=1, select bank1
  5895  0272  1085               	bcf	5,1	;volatile
  5896  0273                     i1l7045:	
  5897                           
  5898                           ;app_led.c: 343: }
  5899                           ;app_led.c: 344: if (step == 2)
  5900  0273  3002               	movlw	2
  5901  0274  1283               	bcf	3,5	;RP0=0, select bank0
  5902  0275  0646               	xorwf	_step,w	;volatile
  5903  0276  1D03               	btfss	3,2
  5904  0277  2A7E               	goto	i1l7051
  5905                           
  5906                           ;app_led.c: 345: {
  5907                           ;app_led.c: 346: if (led_index & LED_INDEX_9)
  5908  0278  1C21               	btfss	_led_index+1,0
  5909  0279  2A7D               	goto	i1l2258
  5910                           
  5911                           ;app_led.c: 347: {
  5912                           ;app_led.c: 348: RA3 = 0;
  5913  027A  1185               	bcf	5,3	;volatile
  5914                           
  5915                           ;app_led.c: 349: TRISA &= ~(1 << (3));
  5916  027B  1683               	bsf	3,5	;RP0=1, select bank1
  5917  027C  1185               	bcf	5,3	;volatile
  5918  027D                     i1l2258:	
  5919                           
  5920                           ;app_led.c: 350: }
  5921                           ;app_led.c: 351: RA2 = 1;
  5922                           
  5923                           ;app_led.c: 352: TRISA &= ~(1 << (2));
  5924  027D  2290               	fcall	PL14	;call to abstracted procedure
  5925  027E                     i1l7051:	
  5926                           
  5927                           ;app_led.c: 353: }
  5928                           ;app_led.c: 354: if (step == 3)
  5929  027E  3003               	movlw	3
  5930  027F  1283               	bcf	3,5	;RP0=0, select bank0
  5931  0280  0646               	xorwf	_step,w	;volatile
  5932  0281  1D03               	btfss	3,2
  5933  0282  2A89               	goto	i1l7057
  5934                           
  5935                           ;app_led.c: 355: {
  5936                           ;app_led.c: 356: if (led_index & LED_INDEX_10)
  5937  0283  1CA1               	btfss	_led_index+1,1
  5938  0284  2A88               	goto	i1l2260
  5939                           
  5940                           ;app_led.c: 357: {
  5941                           ;app_led.c: 358: RA4 = 0;
  5942  0285  1205               	bcf	5,4	;volatile
  5943                           
  5944                           ;app_led.c: 359: TRISA &= ~(1 << (4));
  5945  0286  1683               	bsf	3,5	;RP0=1, select bank1
  5946  0287  1205               	bcf	5,4	;volatile
  5947  0288                     i1l2260:	
  5948                           
  5949                           ;app_led.c: 360: }
  5950                           ;app_led.c: 361: RA2 = 1;
  5951                           
  5952                           ;app_led.c: 362: TRISA &= ~(1 << (2));
  5953  0288  2290               	fcall	PL14	;call to abstracted procedure
  5954  0289                     i1l7057:	
  5955                           
  5956                           ;app_led.c: 363: }
  5957                           ;app_led.c: 364: step++;
  5958  0289  1283               	bcf	3,5	;RP0=0, select bank0
  5959  028A  0AC6               	incf	_step,f	;volatile
  5960                           
  5961                           ;app_led.c: 365: if (step > 3)
  5962  028B  3004               	movlw	4
  5963  028C  0246               	subwf	_step,w	;volatile
  5964  028D  1803               	btfsc	3,0
  5965                           
  5966                           ;app_led.c: 366: {
  5967                           ;app_led.c: 367: step = 0;
  5968  028E  01C6               	clrf	_step	;volatile
  5969  028F  0008               	return
  5970  0290                     __end_of_process_led:	
  5971  0290                     PL14:	
  5972  0290  1283               	bcf	3,5	;RP0=0, select bank0
  5973  0291  1505               	bsf	5,2	;volatile
  5974  0292  1683               	bsf	3,5	;RP0=1, select bank1
  5975  0293  1105               	bcf	5,2	;volatile
  5976  0294  0008               	return
  5977  0295                     __end_ofPL14:	
  5978                           
  5979                           	psect	text46
  5980  0139                     __ptext46:	
  5981 ;; *************** function _led_charge_pwm *****************
  5982 ;; Defined at:
  5983 ;;		line 58 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_led.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;		None
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;		None
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  1    wreg      void 
  5990 ;; Registers used:
  5991 ;;		wreg, status,2, status,0, pclath, cstack
  5992 ;; Tracked objects:
  5993 ;;		On entry : 100/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMMON   BANK0   BANK1
  5997 ;;      Params:         0       0       0
  5998 ;;      Locals:         0       0       0
  5999 ;;      Temps:          0       0       0
  6000 ;;      Totals:         0       0       0
  6001 ;;Total ram usage:        0 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    1
  6004 ;; This function calls:
  6005 ;;		i1_set_led_state
  6006 ;; This function is called by:
  6007 ;;		_Timer2_Isr
  6008 ;; This function uses a non-reentrant model
  6009 ;;
  6010                           
  6011                           
  6012                           ;psect for function _led_charge_pwm
  6013  0139                     _led_charge_pwm:	
  6014                           
  6015                           ;app_led.c: 60: if (WORK_STATE_CHARGING == app_work_state)
  6016                           
  6017                           ;incstack = 0
  6018                           ; Regs used in _led_charge_pwm: [wreg+status,2+status,0+pclath+cstack]
  6019  0139  3002               	movlw	2
  6020  013A  066D               	xorwf	_app_work_state,w	;volatile
  6021  013B  1D03               	btfss	3,2
  6022  013C  29BD               	goto	i1l2168
  6023                           
  6024                           ;app_led.c: 61: {
  6025                           ;app_led.c: 62: if (app_charge.Charge)
  6026  013D  1683               	bsf	3,5	;RP0=1, select bank1
  6027  013E  1C20               	btfss	_app_charge^(0+128),0
  6028  013F  0008               	return
  6029                           
  6030                           ;app_led.c: 63: {
  6031                           ;app_led.c: 64: RA0 = 0;
  6032  0140  1283               	bcf	3,5	;RP0=0, select bank0
  6033  0141  1005               	bcf	5,0	;volatile
  6034                           
  6035                           ;app_led.c: 65: TRISA &= ~(1 << (0));
  6036  0142  1683               	bsf	3,5	;RP0=1, select bank1
  6037  0143  1005               	bcf	5,0	;volatile
  6038                           
  6039                           ;app_led.c: 66: RA1 = 0;
  6040  0144  1283               	bcf	3,5	;RP0=0, select bank0
  6041  0145  1085               	bcf	5,1	;volatile
  6042                           
  6043                           ;app_led.c: 67: TRISA &= ~(1 << (1));
  6044  0146  1683               	bsf	3,5	;RP0=1, select bank1
  6045  0147  1085               	bcf	5,1	;volatile
  6046                           
  6047                           ;app_led.c: 68: RA6 = 0;
  6048  0148  1283               	bcf	3,5	;RP0=0, select bank0
  6049  0149  1305               	bcf	5,6	;volatile
  6050                           
  6051                           ;app_led.c: 69: TRISA &= ~(1 << (6));
  6052  014A  1683               	bsf	3,5	;RP0=1, select bank1
  6053  014B  1305               	bcf	5,6	;volatile
  6054                           
  6055                           ;app_led.c: 70: if (app_charge.flag_charge_force_full_24hour)
  6056  014C  1DA0               	btfss	_app_charge^(0+128),3
  6057  014D  2955               	goto	i1l2170
  6058  014E  3003               	movlw	3
  6059                           
  6060                           ;app_led.c: 71: {
  6061                           ;app_led.c: 72: is_charge_pwm = 0;
  6062  014F  11FB               	bcf	_is_charge_pwm/(0+8),_is_charge_pwm& (0+7)
  6063                           
  6064                           ;app_led.c: 73: set_led_state(LED_INDEX_9 | LED_INDEX_10, LED_STATE_OFF);
  6065  0150  01F0               	clrf	i1set_led_state@index
  6066  0151  00F1               	movwf	i1set_led_state@index+1
  6067  0152  01F2               	clrf	i1set_led_state@state
  6068  0153  255D               	fcall	i1_set_led_state
  6069                           
  6070                           ;app_led.c: 74: }
  6071  0154  0008               	return
  6072  0155                     i1l2170:	
  6073                           
  6074                           ;app_led.c: 75: else if (app_charge.FullCharge || app_charge.ForceFullCharge)
  6075  0155  18A0               	btfsc	_app_charge^(0+128),1
  6076  0156  2959               	goto	i1l2174
  6077  0157  1D20               	btfss	_app_charge^(0+128),2
  6078  0158  2966               	goto	i1l2172
  6079  0159                     i1l2174:	
  6080  0159  3001               	movlw	1
  6081                           
  6082                           ;app_led.c: 76: {
  6083                           ;app_led.c: 77: is_charge_pwm = 0;
  6084  015A  11FB               	bcf	_is_charge_pwm/(0+8),_is_charge_pwm& (0+7)
  6085                           
  6086                           ;app_led.c: 78: set_led_state(LED_INDEX_9, LED_STATE_ON);
  6087  015B  01F0               	clrf	i1set_led_state@index
  6088  015C  00F1               	movwf	i1set_led_state@index+1
  6089  015D  01F2               	clrf	i1set_led_state@state
  6090  015E  0AF2               	incf	i1set_led_state@state,f
  6091  015F  255D               	fcall	i1_set_led_state
  6092                           
  6093                           ;app_led.c: 79: set_led_state(LED_INDEX_10, LED_STATE_OFF);
  6094  0160  3002               	movlw	2
  6095  0161  01F0               	clrf	i1set_led_state@index
  6096  0162  00F1               	movwf	i1set_led_state@index+1
  6097  0163  01F2               	clrf	i1set_led_state@state
  6098  0164  255D               	fcall	i1_set_led_state
  6099                           
  6100                           ;app_led.c: 80: }
  6101  0165  0008               	return
  6102  0166                     i1l2172:	
  6103                           
  6104                           ;app_led.c: 81: else
  6105                           ;app_led.c: 82: {
  6106                           ;app_led.c: 83: is_charge_pwm = 1;
  6107  0166  15FB               	bsf	_is_charge_pwm/(0+8),_is_charge_pwm& (0+7)
  6108                           
  6109                           ;app_led.c: 84: PWM_Cnt++;
  6110  0167  1283               	bcf	3,5	;RP0=0, select bank0
  6111  0168  0AAA               	incf	_PWM_Cnt,f
  6112  0169  1903               	skipnz
  6113  016A  0AAB               	incf	_PWM_Cnt+1,f
  6114                           
  6115                           ;app_led.c: 87: if (PWM_Duty >= PWM_Cnt)
  6116  016B  082B               	movf	_PWM_Cnt+1,w
  6117  016C  022D               	subwf	_PWM_Duty+1,w
  6118  016D  1D03               	skipz
  6119  016E  2971               	goto	u245_25
  6120  016F  082A               	movf	_PWM_Cnt,w
  6121  0170  022C               	subwf	_PWM_Duty,w
  6122  0171                     u245_25:	
  6123  0171  1C03               	skipc
  6124  0172  297F               	goto	i1l2176
  6125                           
  6126                           ;app_led.c: 88: {
  6127                           ;app_led.c: 89: RA2 = 1;
  6128  0173  1505               	bsf	5,2	;volatile
  6129                           
  6130                           ;app_led.c: 90: TRISA &= ~(1 << (2));
  6131  0174  1683               	bsf	3,5	;RP0=1, select bank1
  6132  0175  1105               	bcf	5,2	;volatile
  6133                           
  6134                           ;app_led.c: 91: RA4 = 0;
  6135  0176  1283               	bcf	3,5	;RP0=0, select bank0
  6136  0177  1205               	bcf	5,4	;volatile
  6137                           
  6138                           ;app_led.c: 92: TRISA &= ~(1 << (4));
  6139  0178  1683               	bsf	3,5	;RP0=1, select bank1
  6140  0179  1205               	bcf	5,4	;volatile
  6141                           
  6142                           ;app_led.c: 93: RA3 = 1;
  6143  017A  1283               	bcf	3,5	;RP0=0, select bank0
  6144  017B  1585               	bsf	5,3	;volatile
  6145                           
  6146                           ;app_led.c: 94: TRISA &= ~(1 << (3));
  6147  017C  1683               	bsf	3,5	;RP0=1, select bank1
  6148  017D  1185               	bcf	5,3	;volatile
  6149                           
  6150                           ;app_led.c: 95: }
  6151  017E  2986               	goto	i1l6923
  6152  017F                     i1l2176:	
  6153                           
  6154                           ;app_led.c: 96: else
  6155                           ;app_led.c: 97: {
  6156                           ;app_led.c: 98: RA2 = 0;
  6157  017F  1105               	bcf	5,2	;volatile
  6158                           
  6159                           ;app_led.c: 99: TRISA &= ~(1 << (2));
  6160  0180  1683               	bsf	3,5	;RP0=1, select bank1
  6161  0181  1105               	bcf	5,2	;volatile
  6162                           
  6163                           ;app_led.c: 100: RA4 = 0;
  6164  0182  1283               	bcf	3,5	;RP0=0, select bank0
  6165  0183  1205               	bcf	5,4	;volatile
  6166                           
  6167                           ;app_led.c: 101: TRISA &= ~(1 << (4));
  6168  0184  1683               	bsf	3,5	;RP0=1, select bank1
  6169  0185  1205               	bcf	5,4	;volatile
  6170  0186                     i1l6923:	
  6171                           
  6172                           ;app_led.c: 102: }
  6173                           ;app_led.c: 103: if (PWM_Cnt >= 199)
  6174  0186  3000               	movlw	0
  6175  0187  1283               	bcf	3,5	;RP0=0, select bank0
  6176  0188  022B               	subwf	_PWM_Cnt+1,w
  6177  0189  30C7               	movlw	199
  6178  018A  1903               	skipnz
  6179  018B  022A               	subwf	_PWM_Cnt,w
  6180  018C  1C03               	skipc
  6181  018D  2990               	goto	i1l6927
  6182                           
  6183                           ;app_led.c: 104: {
  6184                           ;app_led.c: 105: PWM_Cnt = 0;
  6185  018E  01AA               	clrf	_PWM_Cnt
  6186  018F  01AB               	clrf	_PWM_Cnt+1
  6187  0190                     i1l6927:	
  6188                           
  6189                           ;app_led.c: 106: }
  6190                           ;app_led.c: 107: pwm_timer++;
  6191  0190  0AA8               	incf	_pwm_timer,f
  6192  0191  1903               	skipnz
  6193  0192  0AA9               	incf	_pwm_timer+1,f
  6194                           
  6195                           ;app_led.c: 108: if (!PWM_dir)
  6196  0193  1A7B               	btfsc	_PWM_dir/(0+8),_PWM_dir& (0+7)
  6197  0194  29A9               	goto	i1l6941
  6198                           
  6199                           ;app_led.c: 109: {
  6200                           ;app_led.c: 110: if (pwm_timer >= 200)
  6201  0195  3000               	movlw	0
  6202  0196  0229               	subwf	_pwm_timer+1,w
  6203  0197  30C8               	movlw	200
  6204  0198  1903               	skipnz
  6205  0199  0228               	subwf	_pwm_timer,w
  6206  019A  1C03               	skipc
  6207  019B  0008               	return
  6208  019C  3000               	movlw	0
  6209                           
  6210                           ;app_led.c: 111: {
  6211                           ;app_led.c: 112: pwm_timer = 0;
  6212  019D  01A8               	clrf	_pwm_timer
  6213  019E  01A9               	clrf	_pwm_timer+1
  6214                           
  6215                           ;app_led.c: 114: if (PWM_Duty >= 199)
  6216  019F  022D               	subwf	_PWM_Duty+1,w
  6217  01A0  30C7               	movlw	199
  6218  01A1  1903               	skipnz
  6219  01A2  022C               	subwf	_PWM_Duty,w
  6220  01A3  1803               	btfsc	3,0
  6221                           
  6222                           ;app_led.c: 115: {
  6223                           ;app_led.c: 116: PWM_dir = 1;
  6224  01A4  167B               	bsf	_PWM_dir/(0+8),_PWM_dir& (0+7)
  6225                           
  6226                           ;app_led.c: 117: }
  6227                           ;app_led.c: 118: PWM_Duty++;
  6228  01A5  0AAC               	incf	_PWM_Duty,f
  6229  01A6  1903               	skipnz
  6230  01A7  0AAD               	incf	_PWM_Duty+1,f
  6231  01A8  0008               	return
  6232  01A9                     i1l6941:	
  6233                           
  6234                           ;app_led.c: 121: else
  6235                           ;app_led.c: 122: {
  6236                           ;app_led.c: 123: if (pwm_timer >= 200)
  6237  01A9  3000               	movlw	0
  6238  01AA  0229               	subwf	_pwm_timer+1,w
  6239  01AB  30C8               	movlw	200
  6240  01AC  1903               	skipnz
  6241  01AD  0228               	subwf	_pwm_timer,w
  6242  01AE  1C03               	skipc
  6243  01AF  0008               	return
  6244  01B0  3001               	movlw	1
  6245                           
  6246                           ;app_led.c: 124: {
  6247                           ;app_led.c: 126: pwm_timer = 0;
  6248  01B1  01A8               	clrf	_pwm_timer
  6249  01B2  01A9               	clrf	_pwm_timer+1
  6250                           
  6251                           ;app_led.c: 129: PWM_Duty--;
  6252  01B3  02AC               	subwf	_PWM_Duty,f
  6253  01B4  3000               	movlw	0
  6254  01B5  1C03               	skipc
  6255  01B6  03AD               	decf	_PWM_Duty+1,f
  6256  01B7  02AD               	subwf	_PWM_Duty+1,f
  6257                           
  6258                           ;app_led.c: 130: if (!PWM_Duty)
  6259  01B8  082C               	movf	_PWM_Duty,w
  6260  01B9  042D               	iorwf	_PWM_Duty+1,w
  6261  01BA  1903               	btfsc	3,2
  6262                           
  6263                           ;app_led.c: 131: {
  6264                           ;app_led.c: 132: PWM_dir = 0;
  6265  01BB  127B               	bcf	_PWM_dir/(0+8),_PWM_dir& (0+7)
  6266  01BC  0008               	return
  6267  01BD                     i1l2168:	
  6268                           
  6269                           ;app_led.c: 139: else
  6270                           ;app_led.c: 140: {
  6271                           ;app_led.c: 141: is_charge_pwm = 0;
  6272  01BD  11FB               	bcf	_is_charge_pwm/(0+8),_is_charge_pwm& (0+7)
  6273                           
  6274                           ;app_led.c: 142: PWM_Cnt = 0;
  6275  01BE  01AA               	clrf	_PWM_Cnt
  6276  01BF  01AB               	clrf	_PWM_Cnt+1
  6277                           
  6278                           ;app_led.c: 143: pwm_timer = 0;
  6279  01C0  01A8               	clrf	_pwm_timer
  6280  01C1  01A9               	clrf	_pwm_timer+1
  6281  01C2  0008               	return
  6282  01C3                     __end_of_led_charge_pwm:	
  6283                           
  6284                           	psect	text47
  6285  055D                     __ptext47:	
  6286 ;; *************** function i1_set_led_state *****************
  6287 ;; Defined at:
  6288 ;;		line 269 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_led.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;  index           2    0[COMMON] enum E591
  6291 ;;  state           1    2[COMMON] enum E587
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;		None
  6294 ;; Return value:  Size  Location     Type
  6295 ;;                  1    wreg      void 
  6296 ;; Registers used:
  6297 ;;		wreg, status,2, status,0
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/100
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMMON   BANK0   BANK1
  6303 ;;      Params:         3       0       0
  6304 ;;      Locals:         0       0       0
  6305 ;;      Temps:          6       0       0
  6306 ;;      Totals:         9       0       0
  6307 ;;Total ram usage:        9 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; This function calls:
  6310 ;;		Nothing
  6311 ;; This function is called by:
  6312 ;;		_led_charge_pwm
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           
  6317                           ;psect for function i1_set_led_state
  6318  055D                     i1_set_led_state:	
  6319                           
  6320                           ;app_led.c: 271: if (LED_STATE_ON == state)
  6321                           
  6322                           ;incstack = 0
  6323                           ; Regs used in i1_set_led_state: [wreg+status,2+status,0]
  6324  055D  0B72               	decfsz	i1set_led_state@state,w
  6325  055E  2D6F               	goto	i1l6889
  6326                           
  6327                           ;app_led.c: 272: {
  6328                           ;app_led.c: 273: led_index |= index;
  6329  055F  0870               	movf	i1set_led_state@index,w
  6330  0560  00F3               	movwf	??i1_set_led_state
  6331  0561  0871               	movf	i1set_led_state@index+1,w
  6332  0562  00F4               	movwf	??i1_set_led_state+1
  6333  0563  01F5               	clrf	??i1_set_led_state+2
  6334  0564  01F6               	clrf	??i1_set_led_state+3
  6335  0565  0873               	movf	??i1_set_led_state,w
  6336  0566  1283               	bcf	3,5	;RP0=0, select bank0
  6337  0567  04A0               	iorwf	_led_index,f
  6338  0568  0874               	movf	??i1_set_led_state+1,w
  6339  0569  04A1               	iorwf	_led_index+1,f
  6340  056A  0875               	movf	??i1_set_led_state+2,w
  6341  056B  04A2               	iorwf	_led_index+2,f
  6342  056C  0876               	movf	??i1_set_led_state+3,w
  6343  056D  04A3               	iorwf	_led_index+3,f
  6344                           
  6345                           ;app_led.c: 274: }
  6346  056E  0008               	return
  6347  056F                     i1l6889:	
  6348                           
  6349                           ;app_led.c: 275: else if (LED_STATE_OFF == state)
  6350  056F  0872               	movf	i1set_led_state@state,w
  6351  0570  1D03               	btfss	3,2
  6352  0571  0008               	return
  6353                           
  6354                           ;app_led.c: 276: {
  6355                           ;app_led.c: 277: led_index &= ~index;
  6356  0572  0871               	movf	i1set_led_state@index+1,w
  6357  0573  00F4               	movwf	??i1_set_led_state+1
  6358  0574  0870               	movf	i1set_led_state@index,w
  6359  0575  00F3               	movwf	??i1_set_led_state
  6360  0576  09F3               	comf	??i1_set_led_state,f
  6361  0577  09F4               	comf	??i1_set_led_state+1,f
  6362  0578  0873               	movf	??i1_set_led_state,w
  6363  0579  00F5               	movwf	??i1_set_led_state+2
  6364  057A  0874               	movf	??i1_set_led_state+1,w
  6365  057B  00F6               	movwf	??i1_set_led_state+3
  6366  057C  3000               	movlw	0
  6367  057D  1BF6               	btfsc	??i1_set_led_state+3,7
  6368  057E  30FF               	movlw	255
  6369  057F  00F7               	movwf	??i1_set_led_state+4
  6370  0580  00F8               	movwf	??i1_set_led_state+5
  6371  0581  0875               	movf	??i1_set_led_state+2,w
  6372  0582  1283               	bcf	3,5	;RP0=0, select bank0
  6373  0583  05A0               	andwf	_led_index,f
  6374  0584  0876               	movf	??i1_set_led_state+3,w
  6375  0585  05A1               	andwf	_led_index+1,f
  6376  0586  0877               	movf	??i1_set_led_state+4,w
  6377  0587  05A2               	andwf	_led_index+2,f
  6378  0588  0878               	movf	??i1_set_led_state+5,w
  6379  0589  05A3               	andwf	_led_index+3,f
  6380  058A  0008               	return
  6381  058B                     __end_ofi1_set_led_state:	
  6382                           
  6383                           	psect	text48
  6384  06EE                     __ptext48:	
  6385 ;; *************** function _MotorWaterDrive *****************
  6386 ;; Defined at:
  6387 ;;		line 73 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_water_process.
      +c"
  6388 ;; Parameters:    Size  Location     Type
  6389 ;;		None
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;		None
  6392 ;; Return value:  Size  Location     Type
  6393 ;;                  1    wreg      void 
  6394 ;; Registers used:
  6395 ;;		wreg, status,2, status,0
  6396 ;; Tracked objects:
  6397 ;;		On entry : 100/100
  6398 ;;		On exit  : 100/0
  6399 ;;		Unchanged: 0/0
  6400 ;; Data sizes:     COMMON   BANK0   BANK1
  6401 ;;      Params:         0       0       0
  6402 ;;      Locals:         0       0       0
  6403 ;;      Temps:          0       0       0
  6404 ;;      Totals:         0       0       0
  6405 ;;Total ram usage:        0 bytes
  6406 ;; Hardware stack levels used:    1
  6407 ;; This function calls:
  6408 ;;		Nothing
  6409 ;; This function is called by:
  6410 ;;		_Timer2_Isr
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           
  6415                           ;psect for function _MotorWaterDrive
  6416  06EE                     _MotorWaterDrive:	
  6417                           
  6418                           ;app_water_process.c: 75: if(water_work_mode.water_mode_out_put == WATER_WORK_MODE_IDEL)
  6419                           
  6420                           ;incstack = 0
  6421                           ; Regs used in _MotorWaterDrive: [wreg+status,2+status,0]
  6422  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  6423  06EF  0862               	movf	_water_work_mode+1,w
  6424  06F0  1D03               	btfss	3,2
  6425  06F1  2EF4               	goto	i1l7155
  6426                           
  6427                           ;app_water_process.c: 76: {
  6428                           ;app_water_process.c: 77: (RA5=0);
  6429  06F2  1285               	bcf	5,5	;volatile
  6430                           
  6431                           ;app_water_process.c: 78: return;
  6432  06F3  0008               	return
  6433  06F4                     i1l7155:	
  6434                           
  6435                           ;app_water_process.c: 79: }
  6436                           ;app_water_process.c: 80: CntWaterDrive++;
  6437  06F4  0ABD               	incf	_CntWaterDrive,f
  6438                           
  6439                           ;app_water_process.c: 81: if(CntWaterDrive==1)
  6440  06F5  0B3D               	decfsz	_CntWaterDrive,w
  6441  06F6  2EF8               	goto	i1l7161
  6442                           
  6443                           ;app_water_process.c: 82: {
  6444                           ;app_water_process.c: 83: (RA5=1);
  6445  06F7  1685               	bsf	5,5	;volatile
  6446  06F8                     i1l7161:	
  6447                           
  6448                           ;app_water_process.c: 84: }
  6449                           ;app_water_process.c: 85: if(CntWaterDrive==MotorWaterDuty)
  6450  06F8  083D               	movf	_CntWaterDrive,w
  6451  06F9  063C               	xorwf	_MotorWaterDuty,w
  6452  06FA  1903               	btfsc	3,2
  6453                           
  6454                           ;app_water_process.c: 86: {
  6455                           ;app_water_process.c: 87: (RA5=0);
  6456  06FB  1285               	bcf	5,5	;volatile
  6457                           
  6458                           ;app_water_process.c: 88: }
  6459                           ;app_water_process.c: 89: if(CntWaterDrive>99)
  6460  06FC  3064               	movlw	100
  6461  06FD  023D               	subwf	_CntWaterDrive,w
  6462  06FE  1803               	btfsc	3,0
  6463                           
  6464                           ;app_water_process.c: 90: {
  6465                           ;app_water_process.c: 91: CntWaterDrive=0;
  6466  06FF  01BD               	clrf	_CntWaterDrive
  6467  0700  0008               	return
  6468  0701                     __end_of_MotorWaterDrive:	
  6469                           
  6470                           	psect	text49
  6471  0346                     __ptext49:	
  6472 ;; *************** function _Mode_control *****************
  6473 ;; Defined at:
  6474 ;;		line 89 in file "D:\Weiai\project\°¬çê¶û\ABB868\ABB868_V4_SC8P1712E_20250310_0xf33d¸ÄÎªºôÎüµÆ°æ±¾\app_motor.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;		None
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;		None
  6479 ;; Return value:  Size  Location     Type
  6480 ;;                  1    wreg      void 
  6481 ;; Registers used:
  6482 ;;		wreg, status,2, status,0
  6483 ;; Tracked objects:
  6484 ;;		On entry : 100/0
  6485 ;;		On exit  : 100/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMMON   BANK0   BANK1
  6488 ;;      Params:         0       0       0
  6489 ;;      Locals:         0       0       0
  6490 ;;      Temps:          2       0       0
  6491 ;;      Totals:         2       0       0
  6492 ;;Total ram usage:        2 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; This function calls:
  6495 ;;		Nothing
  6496 ;; This function is called by:
  6497 ;;		_Timer2_Isr
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           
  6502                           ;psect for function _Mode_control
  6503  0346                     _Mode_control:	
  6504                           
  6505                           ;app_motor.c: 94: if(WORK_MODE_IDEL == work_mode.mode_out_put)
  6506                           
  6507                           ;incstack = 0
  6508                           ; Regs used in _Mode_control: [wreg+status,2+status,0]
  6509  0346  0867               	movf	_work_mode+1,w
  6510  0347  1D03               	btfss	3,2
  6511  0348  2B4C               	goto	i1l7127
  6512                           
  6513                           ;app_motor.c: 95: {
  6514                           ;app_motor.c: 96: RB5 = 0;
  6515  0349  1286               	bcf	6,5	;volatile
  6516                           
  6517                           ;app_motor.c: 97: RB6 = 0;
  6518  034A  1306               	bcf	6,6	;volatile
  6519                           
  6520                           ;app_motor.c: 98: return;
  6521  034B  0008               	return
  6522  034C                     i1l7127:	
  6523                           
  6524                           ;app_motor.c: 99: }
  6525                           ;app_motor.c: 101: motor_fix_cnt++;
  6526  034C  0AA6               	incf	_motor_fix_cnt,f	;volatile
  6527  034D  1903               	skipnz
  6528  034E  0AA7               	incf	_motor_fix_cnt+1,f	;volatile
  6529                           
  6530                           ;app_motor.c: 102: if (motor_fix_cnt <= low_a)
  6531  034F  0843               	movf	_low_a,w
  6532  0350  00F0               	movwf	??_Mode_control
  6533  0351  01F1               	clrf	??_Mode_control+1
  6534  0352  0827               	movf	_motor_fix_cnt+1,w	;volatile
  6535  0353  0271               	subwf	??_Mode_control+1,w
  6536  0354  1D03               	skipz
  6537  0355  2B58               	goto	u291_25
  6538  0356  0826               	movf	_motor_fix_cnt,w	;volatile
  6539  0357  0270               	subwf	??_Mode_control,w
  6540  0358                     u291_25:	
  6541  0358  1C03               	skipc
  6542  0359  2B5C               	goto	i1l7133
  6543                           
  6544                           ;app_motor.c: 103: {
  6545                           ;app_motor.c: 104: RB5 = 0;
  6546  035A  1286               	bcf	6,5	;volatile
  6547                           
  6548                           ;app_motor.c: 106: }
  6549  035B  2B67               	goto	i1l7137
  6550  035C                     i1l7133:	
  6551                           
  6552                           ;app_motor.c: 107: else if (motor_fix_cnt <= dead_area1)
  6553  035C  0842               	movf	_dead_area1,w
  6554  035D  00F0               	movwf	??_Mode_control
  6555  035E  01F1               	clrf	??_Mode_control+1
  6556  035F  0827               	movf	_motor_fix_cnt+1,w	;volatile
  6557  0360  0271               	subwf	??_Mode_control+1,w
  6558  0361  1D03               	skipz
  6559  0362  2B65               	goto	u292_25
  6560  0363  0826               	movf	_motor_fix_cnt,w	;volatile
  6561  0364  0270               	subwf	??_Mode_control,w
  6562  0365                     u292_25:	
  6563  0365  1803               	btfsc	3,0
  6564                           
  6565                           ;app_motor.c: 108: {
  6566                           ;app_motor.c: 109: RB5 = 1;
  6567  0366  1686               	bsf	6,5	;volatile
  6568  0367                     i1l7137:	
  6569                           ;app_motor.c: 111: }
  6570                           
  6571                           
  6572                           ;app_motor.c: 115: }
  6573                           ;app_motor.c: 117: if (motor_fix_cnt <= dead_area_b1)
  6574  0367  0840               	movf	_dead_area_b1,w
  6575  0368  00F0               	movwf	??_Mode_control
  6576  0369  01F1               	clrf	??_Mode_control+1
  6577  036A  0827               	movf	_motor_fix_cnt+1,w	;volatile
  6578  036B  0271               	subwf	??_Mode_control+1,w
  6579  036C  1D03               	skipz
  6580  036D  2B70               	goto	u293_25
  6581  036E  0826               	movf	_motor_fix_cnt,w	;volatile
  6582  036F  0270               	subwf	??_Mode_control,w
  6583  0370                     u293_25:	
  6584  0370  1C03               	skipc
  6585  0371  2B74               	goto	i1l7141
  6586  0372                     i1l7139:	
  6587                           
  6588                           ;app_motor.c: 118: {
  6589                           ;app_motor.c: 119: RB6 = 1;
  6590  0372  1706               	bsf	6,6	;volatile
  6591                           
  6592                           ;app_motor.c: 121: }
  6593  0373  0008               	return
  6594  0374                     i1l7141:	
  6595                           
  6596                           ;app_motor.c: 122: else if (motor_fix_cnt <= low_b)
  6597  0374  0841               	movf	_low_b,w
  6598  0375  00F0               	movwf	??_Mode_control
  6599  0376  01F1               	clrf	??_Mode_control+1
  6600  0377  0827               	movf	_motor_fix_cnt+1,w	;volatile
  6601  0378  0271               	subwf	??_Mode_control+1,w
  6602  0379  1D03               	skipz
  6603  037A  2B7D               	goto	u294_25
  6604  037B  0826               	movf	_motor_fix_cnt,w	;volatile
  6605  037C  0270               	subwf	??_Mode_control,w
  6606  037D                     u294_25:	
  6607  037D  1C03               	skipc
  6608  037E  2B81               	goto	i1l7145
  6609                           
  6610                           ;app_motor.c: 123: {
  6611                           ;app_motor.c: 124: RB6 = 0;
  6612  037F  1306               	bcf	6,6	;volatile
  6613                           
  6614                           ;app_motor.c: 126: }
  6615  0380  0008               	return
  6616  0381                     i1l7145:	
  6617                           
  6618                           ;app_motor.c: 127: else if (motor_fix_cnt <= dead_area_b2)
  6619  0381  083F               	movf	_dead_area_b2,w
  6620  0382  00F0               	movwf	??_Mode_control
  6621  0383  01F1               	clrf	??_Mode_control+1
  6622  0384  0827               	movf	_motor_fix_cnt+1,w	;volatile
  6623  0385  0271               	subwf	??_Mode_control+1,w
  6624  0386  1D03               	skipz
  6625  0387  2B8A               	goto	u295_25
  6626  0388  0826               	movf	_motor_fix_cnt,w	;volatile
  6627  0389  0270               	subwf	??_Mode_control,w
  6628  038A                     u295_25:	
  6629  038A  1803               	btfsc	3,0
  6630  038B  2B72               	goto	i1l7139
  6631                           
  6632                           ;app_motor.c: 132: else
  6633                           ;app_motor.c: 133: {
  6634                           ;app_motor.c: 134: motor_fix_cnt = 0;
  6635  038C  01A6               	clrf	_motor_fix_cnt	;volatile
  6636  038D  01A7               	clrf	_motor_fix_cnt+1	;volatile
  6637  038E  0008               	return
  6638  038F                     __end_of_Mode_control:	
  6639  0003                     
  6640                           	psect	functab
  6641  0025                     __pfunctab:	
  6642  0025                     __fptable:	
  6643  0025                     fptable:	
  6644  0025  00FF               	movwf	(btemp+1)& (0+127)
  6645  0026  3000               	movlw	high fptable
  6646  0027  008A               	movwf	10
  6647  0028  087F               	movf	(btemp+1)& (0+127),w
  6648  0029  0782               	addwf	2,f
  6649  002A                     fpbase:	
  6650  002A  282A               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  6651  002B                     fp__app_process_power_off:	
  6652  002B                     entry__app_process_power_off:	
  6653  002B  2F9A               	ljmp	_app_process_power_off
  6654  002C                     fp__app_process_charing:	
  6655  002C                     entry__app_process_charing:	
  6656  002C  2F53               	ljmp	_app_process_charing
  6657  002D                     fp__app_process_working:	
  6658  002D                     entry__app_process_working:	
  6659  002D  2D2D               	ljmp	_app_process_working
  6660  002E                     __end_of__fptable:	
  6661  007E                     btemp	set	126	;btemp
  6662  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         106
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     14      78
    BANK1            80      0      55

Pointer List with Targets:

    S1426$cb	PTR FTN()void  size(1) Largest target is 1
		 -> app_process_charing(), app_process_power_off(), app_process_working(), 

    work_state_action_tab.cb	PTR FTN()void  size(1) Largest target is 1
		 -> app_process_charing(), app_process_power_off(), app_process_working(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Timer2_Isr in COMMON

    _led_charge_pwm->i1_set_led_state

Critical Paths under _main in BANK0

    _process_led_remind_low_power->_set_led_state
    _water_turn_off->_set_led_state
    _app_process_water_working->_app_process_set_water_state
    _app_process_water_mdoe_led->_app_process_set_water_state
    _app_process_working->_app_process_set_work_state
    _app_process_power_off->_set_led_state
    _app_led_water_mode_set->_set_led_state
    _app_led_mode_set->_set_led_state
    _GotoSleep->_ChargePwmOut
    _app_process_charge->_Charge_Check
    _Charge_Check->_AdcResultChk
    _app_adc_process->_app_adc_bat_voltage_check
    _app_adc_bat_voltage_check->_AdcResultChk
    _AdcResultChk->_AdcOneChk

Critical Paths under _Timer2_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer2_Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   23223
                          _AdcConfig
                           _PortInit
                          _PwmConfig
                        _Timer0Cofng
                       _Timer2Config
                    _app_adc_process
                 _app_process_charge
            _app_process_go_to_sleep
                    _app_process_key
        _app_process_set_water_state
         _app_process_set_work_state
                   _app_process_work
             _app_water_process_work
       _process_led_remind_low_power
 ---------------------------------------------------------------------------------
 (1) _process_led_remind_low_power                         0     0      0    2887
        _app_process_set_water_state
         _app_process_set_work_state
                _set_led_dirct_state
                      _set_led_state
 ---------------------------------------------------------------------------------
 (2) _set_led_dirct_state                                  2     0      2      75
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _app_water_process_work                               0     0      0    2812
         _app_process_water_mdoe_led
          _app_process_water_working
          _app_process_water_workoff
 ---------------------------------------------------------------------------------
 (2) _app_process_water_workoff                            0     0      0    2768
                     _water_turn_off
 ---------------------------------------------------------------------------------
 (3) _water_turn_off                                       0     0      0    2768
                      _set_led_state
 ---------------------------------------------------------------------------------
 (2) _app_process_water_working                            0     0      0      22
        _app_process_set_water_state
 ---------------------------------------------------------------------------------
 (2) _app_process_water_mdoe_led                           0     0      0      22
        _app_process_set_water_state
 ---------------------------------------------------------------------------------
 (1) _app_process_work                                     0     0      0    5580
                _app_process_charing
              _app_process_power_off
                _app_process_working
 ---------------------------------------------------------------------------------
 (2) _app_process_working                                  0     0      0      22
         _app_process_set_work_state
                  _work_chang_timing
 ---------------------------------------------------------------------------------
 (3) _work_chang_timing                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _app_process_charing                                  0     0      0    2790
              _app_process_power_off
        _app_process_set_water_state
 ---------------------------------------------------------------------------------
 (2) _app_process_power_off                                0     0      0    2768
                      _set_led_state
 ---------------------------------------------------------------------------------
 (1) _app_process_key                                      0     0      0    8348
             _charge_or_lowBat_check
                     _handle_key_pwr
                   _handle_key_water
                _key_brush_pwr_check
               _key_water_mode_check
                _key_water_pwr_check
 ---------------------------------------------------------------------------------
 (2) _key_water_pwr_check                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _key_water_mode_check                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _key_brush_pwr_check                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _handle_key_water                                     0     0      0    2790
             _app_led_water_mode_set
    _app_process_set_water_mode_next
        _app_process_set_water_state
                        _water_motor
 ---------------------------------------------------------------------------------
 (3) _water_motor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _app_process_set_water_mode_next                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _app_led_water_mode_set                               0     0      0    2768
                      _set_led_state
 ---------------------------------------------------------------------------------
 (2) _handle_key_pwr                                       0     0      0    5558
          _app_process_set_mode_init
          _app_process_set_mode_next
         _app_process_set_work_state
 ---------------------------------------------------------------------------------
 (3) _app_process_set_mode_next                            0     0      0    2768
                   _app_led_mode_set
             _app_process_motor_duty
 ---------------------------------------------------------------------------------
 (3) _app_process_set_mode_init                            0     0      0    2768
                   _app_led_mode_set
             _app_process_motor_duty
 ---------------------------------------------------------------------------------
 (4) _app_process_motor_duty                               6     6      0       0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (4) _app_led_mode_set                                     0     0      0    2768
                      _set_led_state
 ---------------------------------------------------------------------------------
 (2) _charge_or_lowBat_check                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _app_process_go_to_sleep                              0     0      0      44
                          _GotoSleep
 ---------------------------------------------------------------------------------
 (2) _GotoSleep                                            0     0      0      44
                          _AdcConfig
                       _ChargePwmOut
                           _PortInit
 ---------------------------------------------------------------------------------
 (3) _PortInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcConfig                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _app_process_charge                                   0     0      0    3149
                       _Charge_Check
 ---------------------------------------------------------------------------------
 (2) _Charge_Check                                         1     1      0    3149
                                             13 BANK0      1     1      0
                       _AdcResultChk
                       _ChargePwmOut
         _app_process_set_work_state
                      _set_led_state
 ---------------------------------------------------------------------------------
 (2) _set_led_state                                        9     6      3    2768
                                              0 BANK0      9     6      3
 ---------------------------------------------------------------------------------
 (3) _ChargePwmOut                                         1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _app_adc_process                                      0     0      0     359
          _app_adc_bat_voltage_check
 ---------------------------------------------------------------------------------
 (2) _app_adc_bat_voltage_check                            1     1      0     359
                                             13 BANK0      1     1      0
                       _AdcResultChk
        _app_process_set_water_state
         _app_process_set_work_state
 ---------------------------------------------------------------------------------
 (2) _app_process_set_work_state                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _app_process_set_water_state                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _AdcResultChk                                        13    10      3     315
                                              6 BANK0      7     4      3
                          _AdcOneChk
 ---------------------------------------------------------------------------------
 (4) _AdcOneChk                                            7     5      2     101
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _Timer2Config                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0Cofng                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwmConfig                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Timer2_Isr                                           2     2      0     244
                                              9 COMMON     2     2      0
                       _Mode_control
                    _MotorWaterDrive
                     _led_charge_pwm
                        _process_led
 ---------------------------------------------------------------------------------
 (7) _process_led                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _led_charge_pwm                                       0     0      0     244
                    i1_set_led_state
 ---------------------------------------------------------------------------------
 (8) i1_set_led_state                                      9     6      3     244
                                              0 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (7) _MotorWaterDrive                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Mode_control                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConfig
   _PortInit
   _PwmConfig
   _Timer0Cofng
   _Timer2Config
   _app_adc_process
     _app_adc_bat_voltage_check
       _AdcResultChk
         _AdcOneChk
       _app_process_set_water_state
       _app_process_set_work_state
   _app_process_charge
     _Charge_Check
       _AdcResultChk
         _AdcOneChk
       _ChargePwmOut
       _app_process_set_work_state
       _set_led_state
   _app_process_go_to_sleep
     _GotoSleep
       _AdcConfig
       _ChargePwmOut
       _PortInit
   _app_process_key
     _charge_or_lowBat_check
     _handle_key_pwr
       _app_process_set_mode_init
         _app_led_mode_set
           _set_led_state
         _app_process_motor_duty
       _app_process_set_mode_next
         _app_led_mode_set
           _set_led_state
         _app_process_motor_duty
       _app_process_set_work_state
     _handle_key_water
       _app_led_water_mode_set
         _set_led_state
       _app_process_set_water_mode_next
       _app_process_set_water_state
       _water_motor
     _key_brush_pwr_check
     _key_water_mode_check
     _key_water_pwr_check
   _app_process_set_water_state
   _app_process_set_work_state
   _app_process_work
     _app_process_charing
       _app_process_power_off
         _set_led_state
       _app_process_set_water_state
     _app_process_power_off
       _set_led_state
     _app_process_working
       _app_process_set_work_state
       _work_chang_timing
   _app_water_process_work
     _app_process_water_mdoe_led
       _app_process_set_water_state
     _app_process_water_working
       _app_process_set_water_state
     _app_process_water_workoff
       _water_turn_off
         _set_led_state
   _process_led_remind_low_power
     _app_process_set_water_state
     _app_process_set_work_state
     _set_led_dirct_state
     _set_led_state

 _Timer2_Isr (ROOT)
   _Mode_control
   _MotorWaterDrive
   _led_charge_pwm
     i1_set_led_state
   _process_led

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               50      0      37       6       68.8%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      E      4E       4       97.5%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       C       1       85.7%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      91       8        0.0%
ABS                  0      0      91       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Aug 06 10:47:32 2025

            ??_app_process_set_work_state 0053                                         pc 0002  
                ?_app_process_go_to_sleep 0070                                        PL2 0448  
                                      PL4 012E                                        PL6 022C  
                                      PL8 06D3                                        fsr 0004  
               _app_adc_bat_voltage_check 0295                        set_led_state@index 0053  
                      set_led_state@state 0055                                       PL10 0558  
                                     PL12 0134                                       PL14 0290  
                                     l503 0597                                       _GIE 005F  
                                     _RA0 0028                                       _RA1 0029  
                                     _RA2 002A                                       _RB0 0030  
                                     _RA3 002B                                       _RB1 0031  
                                     _RA4 002C                                       _RB2 0032  
                                     _RA5 002D                                       _RB3 0033  
                                     _RA6 002E                                       _RB5 0035  
                                     _RB6 0036                                       _PR2 0092  
                         ?_led_charge_pwm 0070                                       indf 0000  
                         ?_water_turn_off 0070                                      S7269 07DE  
                         _app_adc_process 07E4                                      l1034 073C  
                                    l1053 00B2                                      l1070 0104  
                                    l1054 00B3                                      l1046 0082  
                                    l1055 00B8                                      l1068 00F6  
                                    l2209 01ED                                      l1620 06CE  
                                    l6221 05F5                                      l7013 0228  
                                    l7111 0751                                      l6217 05E4  
                                    l7113 0752                                      l6235 05A0  
                                    l6251 05D5                                      l6331 0441  
                                    l6323 0429                                      l4804 069F  
                                    l6405 02C2                                      l6261 0301  
                                    l6309 0709                                      l7109 0750  
                                    l3782 0677                                      l6407 02C4  
                                    l6247 05C6                                      l6255 02F6  
                                    l6327 0435                                      l6319 041D  
                                    l6351 0699                                      l6343 068D  
                                    l6441 002E                                      l7073 0720  
                                    l6257 02F7                                      l6265 030B  
                                    l6427 02E2                                      l6523 00DD  
                                    l6507 00C4                                      l6259 02FC  
                                    l6267 0316                                      l6347 0693  
                                    l6339 0687                                      l7083 0776  
                                    l4851 074F                                      l6429 02E3  
                                    l6525 00DE                                      l6517 00CC  
                                    l6613 0502                                      l6621 0514  
                                    l6605 04F3                                      l6381 0791  
                                    l6439 02F4                                      l6543 011F  
                                    l6535 010D                                      l6711 03AF  
                                    l6631 052A                                      l7079 0773  
                                    l6385 0295                                      l6529 00F7  
                                    l6545 0121                                      l6369 0723  
                                    l6713 03B4                                      l6561 0494  
                                    l6625 051A                                      l6539 0116  
                                    l6467 0069                                      l6715 03B6  
                                    l6731 03CB                                      l6707 03AD  
                                    l6469 006C                                      l6637 06C2  
                                    l6733 03D3                                      l6573 04AC  
                                    l6741 0532                                      l6495 009B  
                                    l6487 0091                                      l6671 062E  
                                    l6727 03C9                                      l6719 03BC  
                                    l6735 07B3                                      l6489 0094  
                                    l6649 0611                                      l6681 0390  
                                    l6569 04A6                                      l6841 0640  
                                    l6499 00B5                                      l6827 0410  
                                    l6659 061E                                      l6675 0630  
                                    l6691 0399                                      l6579 04BC  
                                    l6587 04CB                                      l6595 04DD  
                                    l6669 062B                                      l6677 0639  
                                    l6693 039B                                      l6829 0753  
                                    l6765 0553                                      l6749 0540  
                                    l6837 063B                                      l6679 038F  
                                    l6599 04E3                                      l6767 0555  
                                    l6863 065F                                      l6847 064C  
                                    l6769 03D5                                      l6865 0661  
                                    l6699 03A7                                      l6875 06AB  
                                    l6971 01E1                                      _ADON 00F8  
                                    l6869 06A2                                      l6973 01E5  
                                    l6975 01E7                                      l6967 01DA  
                                    l6969 01DE                                      l6989 01FA  
                                    _T0IE 005D                                      _T0IF 005A  
                                    _IOCA 0009                                      _IOCB 0096  
                                    u3107 029B                                      u3117 02A2  
                                    u3127 058F                                      u3087 0034  
                                    u1753 00EC                                      u3097 003C  
                                    u1683 00A8                                      u1765 00FE  
                                    _RAIE 0463                                      _PEIE 005E  
                                    _RAIF 0063                                      _RBIE 005B  
                                    _RBIF 0058                                      _TMR0 0001  
                                    _WPUA 0007                                      _WPUB 0095  
     __size_of_app_process_set_work_state 0005                                      _main 0664  
                              _Flag_250us 03DA                                      _step 0046  
                                    btemp 007E                 entry__app_process_charing 002C  
                                    start 000A                   ??_app_process_power_off 005C  
               __size_of_handle_key_water 0046                  __size_of_app_process_key 0006  
              ?_app_process_water_working 0070                ?_app_process_water_workoff 0070  
             __size_of_app_process_charge 0001                                     ?_main 0070  
               entry__app_process_working 002D                                     _T2CON 0012  
                                   _PORTA 0005                                     _PORTB 0006  
                                   _PWMIF 0062                                     _TRISA 0085  
                                   _TRISB 0086                                     _PWMTH 001A  
                                   _PWMTL 0019                       _set_led_dirct_state 07B3  
                  fp__app_process_charing 002C                  __size_of_MotorWaterDrive 0013  
                                   _admax 00D1                                     _admin 00D3  
                                   _adsum 00C7                  ??_app_process_motor_duty 0053  
                      __size_of_AdcConfig 0006                                     _low_a 0043  
                                   _low_b 0041                        __size_of_AdcOneChk 002D  
                                   fpbase 002A                   ?_app_led_water_mode_set 0070  
                          __pbitbssCOMMON 03D8                                     pclath 000A  
                      AdcOneChk@ad_result 0057                                     status 0003  
                                   wtemp0 007E                             AdcResultChk@i 005D  
                        ?i1_set_led_state 0070                      ?_set_led_dirct_state 0053  
                  fp__app_process_working 002D                           __initialization 000B  
                   __size_of_Charge_Check 0100                              __end_of_main 0683  
                             _CntLedFlash 002E                     __size_of_ChargePwmOut 0010  
             ??_app_process_set_mode_init 005C               ??_app_process_set_mode_next 005C  
                           ?_Mode_control 0070               __end_of_key_brush_pwr_check 04BF  
                                  ??_main 0061                   __end_of_app_adc_process 07E5  
             __end_of_key_water_pwr_check 04F6                  __end_of_app_process_work 077B  
                 ?_app_water_process_work 0070                          __end_of_PortInit 0734  
            __size_of_app_process_charing 000E            __end_of_app_led_water_mode_set 0448  
                                  _ADCON0 001F                                    _ADCON1 009F  
                        _flag_charge_once 03DE                                    _ADRESH 001E  
                                  _ADRESL 009E                                    _ANSELH 0094  
                                  _GODONE 00F9                                    i1l2170 0155  
                                  i1l2250 024B                                    i1l2251 0251  
                                  i1l2172 0166                                    i1l2260 0288  
                                  i1l2252 0257                                    i1l2174 0159  
                                  i1l2254 0263                                    i1l2255 0269  
                                  i1l2176 017F                                    i1l2168 01BD  
                                  i1l2256 026F                                    i1l2248 023F  
                                  i1l2249 0245                                    i1l2258 027D  
                                  i1l3804 0480                                    i1l7051 027E  
                                  i1l7035 025B                                    i1l7141 0374  
                                  i1l7133 035C                                    i1l7045 0273  
                                  i1l7127 034C                                    i1l7231 046C  
                                  i1l7145 0381                                    i1l7137 0367  
                                  i1l7161 06F8                                    i1l7057 0289  
                                  i1l7217 0457                                    i1l7139 0372  
                                  i1l7155 06F4                                    i1l7243 047C  
                                  i1l7237 0477                                    i1l6923 0186  
                                  i1l6941 01A9                                    i1l6927 0190  
                                  _INTCON 000B                                    i1l6889 056F  
                                  u245_25 0171                                    u291_25 0358  
                                  u292_25 0365                                    u293_25 0370  
                                  u294_25 037D                                    u295_25 038A  
                                  _OSCCON 008F                                    _PWM0EN 00D8  
                            _Charge_Check 002E                                    _TMR2IE 0461  
                                  _TMR2IF 0061                                    _PWMD0L 0016  
                                  _WDTCON 0088                                    _PWMCON 001B  
                                  _TRISB3 0433                                    _SWDTEN 0440  
                            _dead_area_b1 0040                              _dead_area_b2 003F  
                        __end_of__fptable 002E                             _is_charge_pwm 03DB  
                      __size_of_GotoSleep 003D                              _ChargePwmOut 0734  
                                  _Cnt1ms 00CB                             ??_Timer0Cofng 0053  
                   ??_set_led_dirct_state 0055              __size_of_app_process_working 002B  
      __end_of_app_process_set_work_state 07D9                _app_process_set_work_state 07D4  
                              _Timer2_Isr 044D                         __end_of_AdcConfig 07D4  
                          ??_Mode_control 0070                         __end_of_AdcOneChk 05B8  
                       ??_app_process_key 005C                        __size_of_PwmConfig 0007  
          __end_of_app_water_process_work 0753                                    fptable 0025  
                                  fptotal 0003                                    saved_w 007E  
      __size_of_app_adc_bat_voltage_check 0061                           _charge_full_cnt 004D  
            __end_of_key_water_mode_check 052D                          ChargePwmOut@Duty 0053  
               _app_process_set_mode_init 077B           __size_of_app_process_motor_duty 0050  
               _app_process_set_mode_next 0701                              ?_process_led 0070  
                          _MotorWaterDuty 003C              ??_app_process_water_mdoe_led 0054  
                 __end_of__initialization 0023                         ??_MotorWaterDrive 0070  
                            ?_water_motor 0070                     __end_of_set_led_state 0610  
               __size_of_app_led_mode_set 002C                          _handle_key_water 038F  
                          __pcstackCOMMON 0070                      _adresult_chagrge_vdd 0036  
                            __pidataBANK0 0000                       __end_of_Timer0Cofng 07C1  
                        ??_led_charge_pwm 0079                          ??_water_turn_off 005C  
                              __end_ofPL2 044D                                __end_ofPL4 0134  
                              __end_ofPL6 0232                                __end_ofPL8 06D8  
     __end_of_app_process_set_water_state 07DE               _app_process_set_water_state 07D9  
                set_led_dirct_state@index 0053                         __end_of_GotoSleep 0412  
                        ?_app_adc_process 0070                                _dead_area1 0042  
     __size_of_app_process_water_mdoe_led 001C          __size_of_app_process_go_to_sleep 0011  
 __end_of_app_process_set_water_mode_next 07B3  __size_of_app_process_set_water_mode_next 0008  
       ??_app_process_set_water_mode_next 0053          ?_app_process_set_water_mode_next 0070  
         _app_process_set_water_mode_next 07AB         __end_of_app_adc_bat_voltage_check 02F6  
                          _CntLowPowerOff 0050                                __pbssBANK0 0020  
                              __pbssBANK1 00A0                             ?_Timer2Config 0070  
                       __end_of_PwmConfig 07C8                               ?_Timer2_Isr 0070  
                              __pmaintext 0664            __size_of_app_process_power_off 0009  
                               ?_PortInit 0070             __end_of_app_process_power_off 07A3  
                  _app_process_motor_duty 02F6                                __pintentry 0004  
                              _app_charge 00A0               ??_app_process_water_working 0054  
             ??_app_process_water_workoff 005C         app_process_set_water_state@states 0053  
                 __size_of_handle_key_pwr 002B                                   _PWM_Cnt 002A  
                                 _Cnt10ms 00CD                        _key_water_pwr_type 004B  
                                 _PWM_dir 03DC                      __end_of_Mode_control 038F  
                          ??_Timer2Config 0053                  ??_charge_or_lowBat_check 0053  
                             _Timer0Cofng 07BA                       _app_process_charing 0753  
                              ??_PortInit 0053                __end_of_app_process_charge 07E4  
                    _key_water_mode_check 04F6                                   _adtimes 0052  
                                 __ptext1 01C3                                   __ptext2 07B3  
                                 __ptext3 0744                                   __ptext4 07E2  
                                 __ptext5 0791                                   __ptext6 063B  
                                 __ptext7 06A2                                   __ptext8 076F  
                                 __ptext9 052D                       _app_process_working 052D  
                    ?_app_process_charing 0070                         ?_app_process_work 0070  
                     __size_of_Timer2_Isr 003A                         _key_brush_pwrtype 004C  
                      ??_app_process_work 005C                                   clrloop0 07A4  
                    end_of_initialization 0023        __end_of_app_process_water_mdoe_led 06BE  
              _app_process_water_mdoe_led 06A2                 _app_process_water_working 063B  
               _app_process_water_workoff 07E2                      __size_of_process_led 005E  
                    ?_app_process_working 0070                      __size_of_water_motor 001F  
                         _app_process_key 07C8        __size_of_app_process_set_mode_init 000B  
      __size_of_app_process_set_mode_next 0011                          _app_led_mode_set 05B8  
             ?_app_process_set_work_state 0070                     ?_key_water_mode_check 0070  
                __size_ofi1_set_led_state 002E                              _KeyRelaxCnt1 0049  
                            _KeyRelaxCnt2 0048                              _KeyRelaxCnt3 0047  
                fp__app_process_power_off 002B                                 _AdcConfig 07CE  
                               _AdcOneChk 058B                     ??_app_process_charing 005C  
                           ?_AdcResultChk 0059                           _MotorWaterDrive 06EE  
                               _BatAdcCnt 0051                   _app_process_go_to_sleep 0712  
             entry__app_process_power_off 002B              __size_of_key_brush_pwr_check 0038  
                __end_of_handle_key_water 03D5                              _KeyPressCnt1 0034  
                            _KeyPressCnt2 0032                              _KeyPressCnt3 0030  
             __end_of_set_led_dirct_state 07BA                                 _BatStates 006B  
            __size_of_key_water_pwr_check 0037                         _work_chang_timing 06D8  
        app_process_set_work_state@states 0053                     ??_app_process_working 0054  
                      ?_work_chang_timing 0070           __size_of_charge_or_lowBat_check 0015  
                               _Flag_10ms 03D8         __end_of_app_process_set_mode_init 0786  
       __end_of_app_process_set_mode_next 0712                       ??_work_chang_timing 0053  
    __end_of_process_led_remind_low_power 022C     __size_of_process_led_remind_low_power 0069  
            _process_led_remind_low_power 01C3                                ?_AdcConfig 0070  
                    __end_of_Timer2Config 0791                                ?_AdcOneChk 0053  
                          ??_AdcResultChk 005C                          _adresultvdd_back 0038  
                             __end_ofPL10 055D                               __end_ofPL12 0139  
                             __end_ofPL14 0295                       start_initialization 000B  
                   __size_of_Mode_control 0049                            _handle_key_pwr 0610  
                               _GotoSleep 03D5                             _adresultmotor 00CF  
               __end_of_work_chang_timing 06EE                   __end_of_app_process_key 07CE  
                    AdcResultChk@ad_value 005E                   ?_app_process_motor_duty 0070  
                            ??_Timer2_Isr 0079                    ??_key_water_mode_check 0053  
                               _PwmConfig 07C1                          _water_work_state 006C  
                             __pdataBANK0 0061                   __end_of_MotorWaterDrive 0701  
                       __size_of_PortInit 0011                              _Mode_control 0346  
           ?_process_led_remind_low_power 0070                  ??_app_led_water_mode_set 005C  
               ??_app_process_go_to_sleep 0054                    _charge_or_lowBat_check 06BE  
                  __end_of_handle_key_pwr 063B                    __size_of_set_led_state 002C  
                       ??i1_set_led_state 0073                                 ___latbits 0000  
                           __pcstackBANK0 0053                            _motor_lock_cnt 004F  
                       __size_of__fptable 0009                                ?_GotoSleep 0070  
                      __end_of_Timer2_Isr 0487                               _adresultvdd 003A  
                __size_of_app_adc_process 0001                ?_app_adc_bat_voltage_check 0070  
          __end_of_app_process_motor_duty 0346                                 __pnvBANK0 006C  
                            ?_Timer0Cofng 0070                          _MOTOR_InitStruct 00BC  
      __size_of_app_process_water_working 0029        __size_of_app_process_water_workoff 0001  
                              ?_PwmConfig 0070                                 __pfunctab 0025  
                ??_app_water_process_work 005C                                 _app_timer 00B2  
                   _app_process_power_off 079A                                 __pswtext1 07DE  
                               _led_index 0020                               ??_AdcConfig 0053  
                             ??_AdcOneChk 0055                           ?_handle_key_pwr 0070  
                           _CntWaterDrive 003D                        _app_process_charge 07E3  
                __end_of_app_led_mode_set 05E4                   __size_of_led_charge_pwm 008A  
                 __size_of_water_turn_off 0009                       _key_water_mode_type 004A  
              __size_of_work_chang_timing 0016               ?_app_process_water_mdoe_led 0070  
                     ?_app_process_charge 0070                          ?_app_process_key 0070  
                           ?_Charge_Check 0070                         interrupt_function 0004  
         __end_of_app_process_go_to_sleep 0723                             ?_ChargePwmOut 0070  
                               clear_ram0 07A3                             _set_led_state 05E4  
                    __end_of_AdcResultChk 076F                 __size_of_app_process_work 000C  
                     _key_brush_pwr_check 0487                     __size_of_Timer2Config 000B  
       __end_of_app_process_water_working 0664         __end_of_app_process_water_workoff 07E3  
                              AdcOneChk@i 0056                      i1set_led_state@index 0070  
                    ??_app_process_charge 0061                          ?_MotorWaterDrive 0070  
                     _key_water_pwr_check 04BF                      i1set_led_state@state 0072  
                                _PWM_Duty 002C                                 _pwm_timer 0028  
         __size_of_app_led_water_mode_set 0036                                  _Flag_1ms 03D9  
                    ?_key_brush_pwr_check 0070            ??_process_led_remind_low_power 005C  
                             ??_GotoSleep 0054                         ?_handle_key_water 0070  
                                _CntSleep 0045                                 _work_mode 0066  
                               _work_step 0044                             ??_process_led 0070  
                          ??_Charge_Check 0060                        ??_handle_key_water 005C  
                    ?_key_water_pwr_check 0070                             ??_water_motor 0053  
                          ??_ChargePwmOut 0053                            ?_set_led_state 0053  
                          _app_work_state 006D                              _Timer2Config 0786  
                   _charge_force_full_cnt 00C3                          _bat_remind_delay 004E  
                       ??_app_adc_process 0061                               ??_PwmConfig 0053  
                         _water_work_mode 0061                                  _PortInit 0723  
                         _water_work_step 003E                    ?_app_process_power_off 0070  
         __size_of_app_water_process_work 000F                             _motor_fix_cnt 0026  
             __end_of_app_process_charing 0761              ?_app_process_set_water_state 0070  
                                __fptable 0025                                  _adresult 00D5  
                   ??_key_brush_pwr_check 0053                                  __ptext10 06D8  
                                __ptext11 0753                                  __ptext20 0412  
                                __ptext12 079A                                  __ptext21 0610  
                                __ptext13 07C8                                  __ptext30 07CE  
                                __ptext22 0701                                  __ptext14 04BF  
                                __ptext31 07E3                                  __ptext23 077B  
                                __ptext15 04F6                                  __ptext40 058B  
                                __ptext32 002E                                  __ptext24 02F6  
                                __ptext16 0487                                  __ptext41 0786  
                                __ptext33 05E4                                  __ptext25 05B8  
                                __ptext17 038F                                  __ptext42 07BA  
                                __ptext34 0734                                  __ptext26 06BE  
                                __ptext18 0683                                  __ptext43 07C1  
                                __ptext35 07E4                                  __ptext27 0712  
                                __ptext19 07AB                                  __ptext44 044D  
                                __ptext36 0295                                  __ptext28 03D5  
                                __ptext45 0232                                  __ptext37 07D4  
                                __ptext29 0723                                  __ptext46 0139  
                                __ptext38 07D9                                  __ptext47 055D  
                                __ptext39 0761                                  __ptext48 06EE  
                                __ptext49 0346               __end_of_app_process_working 0558  
                   ??_key_water_pwr_check 0053                             __size_of_main 001F  
                  _app_led_water_mode_set 0412                       __end_of_process_led 0290  
            __size_of_set_led_dirct_state 0007                       __end_of_water_motor 06A2  
                    __size_of_Timer0Cofng 0007                           i1_set_led_state 055D  
              ?_app_process_set_mode_init 0070                ?_app_process_set_mode_next 0070  
                 ?_charge_or_lowBat_check 0070             ??_app_process_set_water_state 0053  
                          _led_charge_pwm 0139                            _water_turn_off 0791  
                  _app_water_process_work 0744                                  intlevel1 0025  
                         ??_set_led_state 0056                     __size_of_AdcResultChk 000E  
             ??_app_adc_bat_voltage_check 0060                          _app_process_work 076F  
                      _water_mode_led_cnt 0024            __end_of_charge_or_lowBat_check 06D3  
           __size_of_key_water_mode_check 0037                            AdcOneChk@adldo 0053  
                        ??_handle_key_pwr 005C                         AdcResultChk@adldo 0059  
                    __end_of_Charge_Check 012E                      __end_of_ChargePwmOut 0744  
                     _flag_discharge_once 03DD                                _OPTION_REG 0081  
                  __end_of_led_charge_pwm 01C3                    __end_of_water_turn_off 079A  
                            _AdcResultChk 0761                         ?_app_led_mode_set 0070  
                           AdcOneChk@adch 0070                          AdcResultChk@adch 005C  
                      ??_app_led_mode_set 005C                               _process_led 0232  
                             _water_motor 0683                   __end_ofi1_set_led_state 058B  
    __size_of_app_process_set_water_state 0005  
